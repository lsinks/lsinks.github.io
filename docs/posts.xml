<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Louise E. Sinks</title>
<link>https://lsinks.github.io/posts.html</link>
<atom:link href="https://lsinks.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description>Data Science Blog and Portfolio of Louise Sinks</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Tue, 11 Apr 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Credit Card Fraud: A Tidymodels Tutorial</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial.html</link>
  <description><![CDATA[ 



<section id="classification-using-tidymodels" class="level1">
<h1>1. Classification using tidymodels</h1>
<p>I will walk through a classification problem from importing the data, cleaning, exploring, fitting, choosing a model, and finalizing the model.</p>
<p>I wanted to create a project that could serve as a template for other two-class classification problems. I also wanted to fully use the tidymodels framework, particularly more advanced functionalities like workflowsets. There are some great tutorials on tidymodels, in particular <a href="https://oliviergimenez.github.io/learning-machine-learning/">Olivier Gimenez’s tutorial on Kaggle’s Titanic competition</a>. This tutorial steps through each model individually, while I wanted to use the more streamlined approach offered by workflowsets. I also found myself confused as I started doing more advanced procedures in tidymodels, despite having read the book <a href="https://www.tmwr.org/">Tidy Modeling with R</a> multiple times and working through several tutorials on <a href="https://juliasilge.com/">Julia Silge’s excellent blog</a>. I ended up writing my own <a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial">tutorial on tidymodels objects</a> that goes through the differences in the various ways to perform fitting and the various objects produced.</p>
<p>In addition to providing a template for the machine learning portion, I wanted to create nice figures and tables that could also be re-used.</p>
<p>I will also have a different version of this code on Datacamp. I’ve numbered the code chunks manually to aid in comparison between the two versions. I start numbering at 2, because Code Block 1 will be installing libraries at the Datacamp workspace. There are some important differences between the RStudio environment and online notebooks/workspaces.</p>
<p>Please feel free to copy and use any of my code in your work. I’d appreciate an acknowledgment or link back if you find this tutorial useful.</p>
</section>
<section id="the-problem-predicting-credit-card-fraud" class="level1">
<h1>2. The problem: predicting credit card fraud</h1>
<p>The goal of the project is to correctly predict fraudulent credit card transactions.</p>
<p>The specific problem is one provided by Datacamp as a challenge in the certification community. The dataset (Credit Card Fraud) can also be found at the Datacamp workspace. To access the dataset and the data dictionary, you can create a new notebook on datacamp using the Credit Card Fraud dataset. That will produce a notebook like <a href="https://app.datacamp.com/workspace/w/f3a94059-683b-4bc6-b354-9b98cf3d5242/edit">this</a> with the dataset and the data dictionary.</p>
<p>The original source of the data (prior to preparation by DataCamp) can be found <a href="https://www.kaggle.com/kartik2112/fraud-detection?select=fraudTrain.csv">here</a>.</p>
</section>
<section id="set-up-steps" class="level1">
<h1>3. Set-up steps</h1>
<p>Loading the necessary libraries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Code Block 2: Loading Libraries</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># loading tidyverse/ tidymodels packages</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;">#core tidyverse</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(tidymodels) <span class="co" style="color: #5E5E5E;"># tidymodels framework</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(lubridate) <span class="co" style="color: #5E5E5E;"># date/time handling</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># visualization</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">library</span>(viridis) <span class="co" style="color: #5E5E5E;">#color scheme that is colorblind friendly</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">library</span>(ggthemes) <span class="co" style="color: #5E5E5E;"># themes for ggplot</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">library</span>(gt) <span class="co" style="color: #5E5E5E;"># to make nice tables</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;">library</span>(cowplot) <span class="co" style="color: #5E5E5E;"># to make multi-panel figures</span></span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;">library</span>(corrplot) <span class="co" style="color: #5E5E5E;"># nice correlation plot</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;">#Data Cleaning</span></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;">library</span>(skimr) <span class="co" style="color: #5E5E5E;">#provides overview of data and missingness</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;">#Geospatial Data</span></span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;">library</span>(tidygeocoder) <span class="co" style="color: #5E5E5E;">#converts city/state to lat/long</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;">#Modeling</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;">library</span>(ranger) <span class="co" style="color: #5E5E5E;"># random forest</span></span>
<span id="cb1-23"><span class="fu" style="color: #4758AB;">library</span>(glmnet) <span class="co" style="color: #5E5E5E;"># elastic net logistic regression</span></span>
<span id="cb1-24"><span class="fu" style="color: #4758AB;">library</span>(themis) <span class="co" style="color: #5E5E5E;"># provides up/down-sampling methods for the data</span></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;">library</span>(lightgbm) <span class="co" style="color: #5E5E5E;"># fast gradient-boosted machine algo</span></span>
<span id="cb1-26"><span class="fu" style="color: #4758AB;">library</span>(bonsai) <span class="co" style="color: #5E5E5E;">#provides parnsip objects for tree-based models</span></span></code></pre></div>
</div>
<p>I’m setting a global theme for my figures. I’m using <a href="https://wilkelab.org/cowplot/index.html">cowplot</a> to create some composite figures, and apparently you must choose a cowplot theme if you set a global theme. You can use a ggtheme on a graph by graph basis, but not globally.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Code Block 3: setting global figure options</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">theme_set</span>(<span class="fu" style="color: #4758AB;">theme_cowplot</span>(<span class="dv" style="color: #AD0000;">12</span>))</span></code></pre></div>
</div>
<p>Loading the data. This is a local copy that is part of the workspace download from Datacamp.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Code Block 4: Reading in the data</span></span>
<span id="cb3-2">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">'datacamp_workspace/credit_card_fraud.csv'</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) </span>
<span id="cb3-3">fraud</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 339,607 × 15
   trans_date_trans_time merchant        category    amt city  state   lat  long
   &lt;dttm&gt;                &lt;chr&gt;           &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 2019-01-01 00:00:44   Heller, Gutman… grocery… 107.   Orie… WA     48.9 -118.
 2 2019-01-01 00:00:51   Lind-Buckridge  enterta… 220.   Mala… ID     42.2 -112.
 3 2019-01-01 00:07:27   Kiehn Inc       grocery…  96.3  Gren… CA     41.6 -123.
 4 2019-01-01 00:09:03   Beier-Hyatt     shoppin…   7.77 High… NM     32.9 -106.
 5 2019-01-01 00:21:32   Bruen-Yost      misc_pos   6.85 Free… WY     43.0 -111.
 6 2019-01-01 00:22:06   Kunze Inc       grocery…  90.2  Hono… HI     20.1 -155.
 7 2019-01-01 00:22:18   Nitzsche, Kess… shoppin…   4.02 Vale… NE     42.8 -101.
 8 2019-01-01 00:22:36   Kihn, Abernath… shoppin…   3.66 West… OR     43.8 -122.
 9 2019-01-01 00:31:51   Ledner-Pfanner… gas_tra… 102.   Thom… UT     39.0 -110.
10 2019-01-01 00:34:10   Stracke-Lemke   grocery…  83.1  Conw… WA     48.3 -122.
# ℹ 339,597 more rows
# ℹ 7 more variables: city_pop &lt;dbl&gt;, job &lt;chr&gt;, dob &lt;date&gt;, trans_num &lt;chr&gt;,
#   merch_lat &lt;dbl&gt;, merch_long &lt;dbl&gt;, is_fraud &lt;dbl&gt;</code></pre>
</div>
</div>
</section>
<section id="validation-of-data-types" class="level1">
<h1>4. Validation of data types</h1>
<p>I examine the dataset via <code>skim</code> and make sure all data elements are as expected. <code>skim</code> is a function in the <a href="https://cran.r-project.org/web/packages/skimr/index.html">skimr package</a> that provides a high-level summary of the data. The output is a dataframe, <a href="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/#skimr-to-understand-your-data">so it can be manipulated and formatted more nicely</a> than the output of <code>summary()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Code Block 5: Validation of Data Types Against Data Dictionary</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># custom skim function to remore some of the quartile data</span></span>
<span id="cb5-3">my_skim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">skim_with</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="fu" style="color: #4758AB;">sfl</span>(<span class="at" style="color: #657422;">p25 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p50 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p75 =</span> <span class="cn" style="color: #8f5902;">NULL</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">my_skim</span>(fraud)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">fraud</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">339607</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">15</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Date</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">7</td>
</tr>
<tr class="odd">
<td style="text-align: left;">POSIXct</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 15%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">merchant</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">37</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">693</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">category</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">14</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">city</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">state</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">job</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">49</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">163</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">trans_num</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">339607</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: Date</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 17%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">dob</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">1927-09-09</td>
<td style="text-align: left;">2001-07-26</td>
<td style="text-align: left;">1974-03-10</td>
<td style="text-align: right;">187</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 16%">
<col style="width: 12%">
<col style="width: 16%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">amt</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">70.58</td>
<td style="text-align: right;">161.68</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">28948.90</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">lat</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">39.72</td>
<td style="text-align: right;">5.09</td>
<td style="text-align: right;">20.03</td>
<td style="text-align: right;">66.69</td>
<td style="text-align: left;">▁▆▇▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">long</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">-110.62</td>
<td style="text-align: right;">12.65</td>
<td style="text-align: right;">-165.67</td>
<td style="text-align: right;">-89.63</td>
<td style="text-align: left;">▁▁▅▇▆</td>
</tr>
<tr class="even">
<td style="text-align: left;">city_pop</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">107140.87</td>
<td style="text-align: right;">293029.89</td>
<td style="text-align: right;">46.00</td>
<td style="text-align: right;">2383912.00</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">merch_lat</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">39.72</td>
<td style="text-align: right;">5.13</td>
<td style="text-align: right;">19.03</td>
<td style="text-align: right;">67.51</td>
<td style="text-align: left;">▁▅▇▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">merch_long</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">-110.62</td>
<td style="text-align: right;">12.66</td>
<td style="text-align: right;">-166.67</td>
<td style="text-align: right;">-88.63</td>
<td style="text-align: left;">▁▁▃▇▅</td>
</tr>
<tr class="odd">
<td style="text-align: left;">is_fraud</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0.01</td>
<td style="text-align: right;">0.07</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: POSIXct</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 19%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 17%">
<col style="width: 17%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: left;">min</th>
<th style="text-align: left;">max</th>
<th style="text-align: left;">median</th>
<th style="text-align: right;">n_unique</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">trans_date_trans_time</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">2019-01-01 00:00:44</td>
<td style="text-align: left;">2020-12-31 23:59:24</td>
<td style="text-align: left;">2019-12-31 15:11:23</td>
<td style="text-align: right;">338504</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Everything looks okay, and I am lucky because there is no missing data. I will not need to do cleaning or imputation.</p>
<p>I see that <code>is_fraud</code> is coded as 0 or 1, and the mean of this variable is 0.00525. The number of fraudulent transactions is very low, and we should use treatments for imbalanced classes when we get to the fitting/ modeling stage.</p>
</section>
<section id="do-all-variables-have-sensible-types" class="level1">
<h1>5. Do all variables have sensible types?</h1>
<p>I will look at each variable and decide whether to keep, transform, or drop it. This is a mixture of Exploratory Data Analysis and Feature Engineering, but I find it helpful to do some simple feature engineering as I start exploring the data. In this project, we have all data to begin with, so any transformations will be performed on the entire dataset. If we had a separate test dataset, we’d need to do the transformation on that in parallel or, more ideally, do the transformations as a <code>recipe_step()</code> in the tidymodels framework. Then the transformations would be applied to any data the recipe was used on as part of the modeling workflow. There is less chance of data leakage or missing a step when you perform the feature engineering in the recipe.</p>
<p>Questions to consider:</p>
<ul>
<li>Should strings be converted to factors?</li>
<li>Is date-time data properly encoded?</li>
<li>Is financial data encoded numerically?</li>
<li>Is geographic data consistently rendered? (city/ state strings vs.&nbsp;lat/long numeric pairs)</li>
</ul>
<p>First, I grouped all my variables by type and examined each variable class by class. The dataset has the following types of variables:</p>
<ol type="1">
<li>Strings</li>
<li>Geospatial Data</li>
<li>Dates</li>
<li>Date/Times</li>
<li>Numerical</li>
</ol>
<p>As I go through the different classes of variables, I will provide information from the data dictionary about them.</p>
<section id="looking-at-the-strings" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-the-strings">5.1. Looking at the strings</h2>
<p>Strings are usually not a useful format for classification problems. The strings should be converted to factors, dropped, or otherwise transformed.</p>
<p><strong><em>5.1.1. Strings to Factors</em></strong> (Code Block 6 - 8)</p>
<ul>
<li><code>category</code>, Category of Merchant</li>
<li><code>job</code>, Job of Credit Card Holder</li>
</ul>
<p><strong><em>5.1.2. Strings as Strings</em></strong> (Code Block 9)</p>
<ul>
<li><code>merchant</code>, Merchant Name</li>
<li><code>trans_num</code>, Transaction Number</li>
</ul>
<p>I’m not going to retain these, as they are either unlikely to have predictive power (<code>trans_num</code>) or are highly correlated with other predictors (<code>merchant</code> with <code>merch_lat</code>/<code>merch_long</code>.)</p>
<p><strong><em>5.2. Strings to Geospatial Data</em></strong> (Code Block 13)</p>
<p>We have plenty of geospatial data as lat/long pairs, so I want to convert city/state to lat/long so I can compare to the other geospatial variables. This will also make it easier to compute new variables like the distance the transaction is from the home location. I will transform and explore this when I handle the other geospatial data.</p>
<ul>
<li><code>city</code>, City of Credit Card Holder</li>
<li><code>state</code>, State of Credit Card Holder</li>
</ul>
<p><strong>Things to consider as we walk through the data:</strong></p>
<ul>
<li>Do we have typos that lead to duplicate entries : VA/ Va. / Virginia?</li>
<li>Do we have excessive # of categories? Do we want to combine some?</li>
<li>Should they be ordered?</li>
</ul>
<section id="exploring-the-factors-how-is-the-compactness-of-categories" class="level3">
<h3 class="anchored" data-anchor-id="exploring-the-factors-how-is-the-compactness-of-categories">5.1.1. Exploring the factors: how is the compactness of categories?</h3>
<p>The predictors <code>category</code> and <code>job</code> are transformed into factors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Code Block 6: Converting Strings to Factors</span></span>
<span id="cb6-2">fraud<span class="sc" style="color: #5E5E5E;">$</span>category <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>category)</span>
<span id="cb6-3">fraud<span class="sc" style="color: #5E5E5E;">$</span>job <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>job)</span></code></pre></div>
</div>
<p>From the skim output, I see that <code>category</code> has 14 unique values, and <code>job</code> has 163 unique values. The dataset is quite large, with 339,607 records, so these variables don’t have an excessive number of levels at first glance. However, it is worth seeing if I can compact the levels to a smaller number.</p>
<section id="why-do-we-care-about-the-number-of-categories-and-whether-they-are-excessive" class="level4">
<h4 class="anchored" data-anchor-id="why-do-we-care-about-the-number-of-categories-and-whether-they-are-excessive">Why do we care about the number of categories and whether they are “excessive”?</h4>
<p>Consider the extreme case where a dataset had categories that only contained one record each. There is simply insufficient data to make correct predictions using category as a predictor on new data with that category label. Additionally, if your modeling uses dummy variables, having an extremely large number of categories will lead to the production of a huge number of predictors, which can slow down the fitting. This is fine if all the predictors are useful, but if they aren’t useful (as in the case of having only one record for a category), trimming them will improve the speed and quality of the data fitting.</p>
<p>If I had subject matter expertise, I could manually combine categories. For example, in this dataset, the three largest categories in <code>job</code> are surveying-related and perhaps could be combined. If you don’t have subject matter expertise, or if performing this task would be too labor intensive, then you can use cutoffs based on the amount of data in a category. If the majority of the data exists in only a few categories, then it might be reasonable to keep those categories and lump everything else in an “other” category or perhaps even drop the data points in smaller categories. As a side note, the <a href="https://forcats.tidyverse.org/">forcats package</a> has a variety of tools to handle consolidating and dropping levels based on different cutoffs if this is the approach you decide to take.</p>
<p>One way to evaluate the compactness of a factor is to group the data by category and look at a table of counts. I like the <a href="https://gt.rstudio.com/">gt package</a> for making attractive tables in R. (Uncomment the line in Code Block 7 <code>#gt:::as.tags.gt_tbl(table_3a)</code> to see the table.) The tabular data also shows that there aren’t typos leading to duplicate categories.</p>
<p>Another way to evaluate the compactness is to <a href="https://stackoverflow.com/questions/15844919/cumulative-plot-%20using-ggplot2">make a cumulative plot</a>. This looks at the proportion of data that is described as you add categories. I’m using the <a href="https://wilkelab.org/cowplot/index.html">cowplot package</a> to make multipanel figures. I want to look at both factors at once; this is fine for exploratory data analysis, but I wouldn’t recommend it for a report or presentation, since there is no connection between the two variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Code Block 7: Exploring the Compactness of the Categories</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># Exploring the jobs factor</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># bin and count the data and return sorted</span></span>
<span id="cb7-5">table_3a_data <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">count</span>(job, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) </span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># creating a table to go with this, but not displaying it</span></span>
<span id="cb7-8">table_3a <span class="ot" style="color: #003B4F;">&lt;-</span> table_3a_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-10">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Jobs of Card Holders"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">job =</span> <span class="st" style="color: #20794D;">"Jobs"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-12">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-13">              <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"green"</span>,</span>
<span id="cb7-14">              <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;">#gt:::as.tags.gt_tbl(table_3a)  #displays the table </span></span>
<span id="cb7-16"></span>
<span id="cb7-17">fig_1a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(table_3a_data, <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb7-18">  <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">nlevels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>job),</span>
<span id="cb7-19">  <span class="at" style="color: #657422;">y =</span> (<span class="fu" style="color: #4758AB;">cumsum</span>(n) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">nrow</span>(fraud))</span>
<span id="cb7-20">)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-21">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-22">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">80</span>) <span class="sc" style="color: #5E5E5E;">+</span>  <span class="co" style="color: #5E5E5E;">#marker for 80% of the data</span></span>
<span id="cb7-23">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"jobs index"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-24">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"% of Total"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-25">  <span class="fu" style="color: #4758AB;">ylim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="co" style="color: #5E5E5E;"># +</span></span>
<span id="cb7-26">  <span class="co" style="color: #5E5E5E;">#ggtitle("Jobs of Card Holder")  #use if standalone graph</span></span>
<span id="cb7-27">                       </span>
<span id="cb7-28"></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;"># same as above, but just for the category variable</span></span>
<span id="cb7-30">table_3b_data <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">count</span>(category, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-31">table_3b <span class="ot" style="color: #003B4F;">&lt;-</span> table_3b_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-32">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-33">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Transaction Category in Credit Card Fraud"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-34">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">category =</span> <span class="st" style="color: #20794D;">"Category"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-35">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-36">              <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>,</span>
<span id="cb7-37">              <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="co" style="color: #5E5E5E;">#%&gt;%</span></span>
<span id="cb7-38"><span class="co" style="color: #5E5E5E;">#gt:::as.tags.gt_tbl(table_3b)</span></span>
<span id="cb7-39"></span>
<span id="cb7-40">fig_1b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(table_3b_data, <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb7-41">  <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">nlevels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>category),</span>
<span id="cb7-42">  <span class="at" style="color: #657422;">y =</span> (<span class="fu" style="color: #4758AB;">cumsum</span>(n) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">nrow</span>(fraud))</span>
<span id="cb7-43">)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-44">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-45">  <span class="fu" style="color: #4758AB;">geom_hline</span>(<span class="at" style="color: #657422;">yintercept =</span> <span class="dv" style="color: #AD0000;">80</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-46">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"category index"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-47">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"% of Total"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-48">  <span class="fu" style="color: #4758AB;">ylim</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">100</span>) <span class="co" style="color: #5E5E5E;">#+</span></span>
<span id="cb7-49"><span class="co" style="color: #5E5E5E;">#ggtitle("Jobs of Card Holder") #use if standalone graph</span></span>
<span id="cb7-50"></span>
<span id="cb7-51"></span>
<span id="cb7-52"><span class="co" style="color: #5E5E5E;">#this makes the panel grid and labels it</span></span>
<span id="cb7-53">plot_fig_1 <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb7-54">  <span class="fu" style="color: #4758AB;">plot_grid</span>(fig_1a,</span>
<span id="cb7-55">            fig_1b,</span>
<span id="cb7-56">            <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>),</span>
<span id="cb7-57">            <span class="at" style="color: #657422;">label_size =</span> <span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb7-58"></span>
<span id="cb7-59"><span class="co" style="color: #5E5E5E;">#This creates the figure title</span></span>
<span id="cb7-60">title_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-61">  <span class="fu" style="color: #4758AB;">draw_label</span>(</span>
<span id="cb7-62">    <span class="st" style="color: #20794D;">"Figure 1: Exploring Categorical Variables"</span>,</span>
<span id="cb7-63">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span>,</span>
<span id="cb7-64">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb7-65">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb7-66">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span></span>
<span id="cb7-67">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-68">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="co" style="color: #5E5E5E;"># add margin on the left of the drawing canvas,</span></span>
<span id="cb7-69">    <span class="co" style="color: #5E5E5E;"># so title is aligned with left edge of first plot</span></span>
<span id="cb7-70">    <span class="at" style="color: #657422;">plot.margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb7-71"></span>
<span id="cb7-72"><span class="co" style="color: #5E5E5E;">#this combines the panel grid, title, and displays both</span></span>
<span id="cb7-73"><span class="fu" style="color: #4758AB;">plot_grid</span>(title_1,</span>
<span id="cb7-74">          plot_fig_1,</span>
<span id="cb7-75">          <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-76">          <span class="co" style="color: #5E5E5E;"># rel_heights values control vertical title margins</span></span>
<span id="cb7-77">          <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/compactness-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If you look at Figure 1A, roughly 75-80 categories have to be included to capture 80% of the data. For Figure 1B, roughly ten categories have to be included. Ideally, you’d like a very steep curve initially (where a “small number” of categories cover the “majority” of the data) and then a long, shallow tail approaching 100% that corresponds to the data to be binned in “other” or dropped. There aren’t hard and fast rules on making these decisions. I decided to use 80% as my threshold. Both of these curves look relatively shallow to me, so I decided not to do any binning, grouping, or dropping of levels.</p>
<p>I decided to look at all the categories of transactions just to see which ones were the most common.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Code Block 8: Exploring the Category factor</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(<span class="fu" style="color: #4758AB;">fct_infreq</span>(category))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 2: Types of Transactions"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Merchant Type"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/category-levels-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Gas/transport was the most common category, and grocery was the second most common, both of which make sense. The least common category was travel. Nothing seemed unusual in the ranking.</p>
</section>
</section>
<section id="looking-at-our-character-strings" class="level3">
<h3 class="anchored" data-anchor-id="looking-at-our-character-strings">5.1.2. Looking at our character strings</h3>
<p>Merchant name (<code>merchant</code>) and transaction number(<code>trans_num</code>) are both strings. Transaction number should not influence fraud rate as it is a number assigned to the transaction when processed. I will drop it from our dataset. Merchant name could be correlated with fraud, for example, if a company’s employee was involved. However, this data is also represented by the location and category. If a location/category is found to have higher levels of fraud, then a more detailed examination of those transactions can be performed, including the merchant name. Here, I also remove it from the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Code Block 9: Removing Character/ String Variables</span></span>
<span id="cb9-2">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>merchant,<span class="sc" style="color: #5E5E5E;">-</span>trans_num)</span></code></pre></div>
</div>
</section>
</section>
<section id="looking-at-the-geographic-data" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-the-geographic-data">5.2. Looking at the geographic data</h2>
<p>This data is coded as numeric (latitude and longitude) or character (city/state), but we can recognize it as geographic data and treat it appropriately.</p>
<p>First, there are two sets of geographic data related to the merchant. The location of the merchant and where the transaction occurred. I create scatter plots of latitude and longitude separately, because I want to check the correlation between the two sources of data (merchant and transaction). I create a shared legend following the article <a href="https://wilkelab.org/cowplot/articles/shared_legends.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Code Block 10: Comparing Merchant and Transaction Locations</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># calculate correlations</span></span>
<span id="cb10-4">cor_lat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">cor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>lat, fraud<span class="sc" style="color: #5E5E5E;">$</span>merch_lat), <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb10-5">cor_long <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">cor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>long, fraud<span class="sc" style="color: #5E5E5E;">$</span>merch_long), <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># make figure</span></span>
<span id="cb10-8">fig_3a <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(lat, merch_lat, <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(is_fraud))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-11">    <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-12">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb10-13">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb10-14">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb10-15">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Latitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-17">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Merchant Latitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-18">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Transaction Latitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-19">  <span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(</span>
<span id="cb10-20">    <span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-21">    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Not Fraud'</span>, <span class="st" style="color: #20794D;">'Fraud'</span>),</span>
<span id="cb10-22">    <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb10-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-24">  <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">slope =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">intercept =</span> <span class="dv" style="color: #AD0000;">0</span>) </span>
<span id="cb10-25"></span>
<span id="cb10-26">fig_3b <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb10-27">  <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(long, merch_long, <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(is_fraud))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-28">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb10-29">    <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-30">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb10-31">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb10-32">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb10-33">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-34">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Longitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-35">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Merchant Longitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-36">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Transaction Longitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-37">  <span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(</span>
<span id="cb10-38">    <span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-39">    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Not Fraud'</span>, <span class="st" style="color: #20794D;">'Fraud'</span>),</span>
<span id="cb10-40">    <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb10-41">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-42">  <span class="fu" style="color: #4758AB;">geom_abline</span>(<span class="at" style="color: #657422;">slope =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">intercept =</span> <span class="dv" style="color: #AD0000;">0</span>) </span>
<span id="cb10-43"></span>
<span id="cb10-44"><span class="co" style="color: #5E5E5E;"># create the plot with the two figs on a grid, no legend</span></span>
<span id="cb10-45">prow_fig_3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_grid</span>(</span>
<span id="cb10-46">  fig_3a <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>),</span>
<span id="cb10-47">  fig_3b <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>),</span>
<span id="cb10-48">  <span class="at" style="color: #657422;">align =</span> <span class="st" style="color: #20794D;">'vh'</span>,</span>
<span id="cb10-49">  <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"A"</span>, <span class="st" style="color: #20794D;">"B"</span>),</span>
<span id="cb10-50">  <span class="at" style="color: #657422;">label_size =</span> <span class="dv" style="color: #AD0000;">12</span>,</span>
<span id="cb10-51">  <span class="at" style="color: #657422;">hjust =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-52">  <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb10-53">)</span>
<span id="cb10-54"></span>
<span id="cb10-55"><span class="co" style="color: #5E5E5E;"># extract the legend from one of the figures</span></span>
<span id="cb10-56">legend <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_legend</span>(</span>
<span id="cb10-57">  fig_3a <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb10-58">    <span class="fu" style="color: #4758AB;">guides</span>(<span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">guide_legend</span>(<span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">1</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-59">    <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>)</span>
<span id="cb10-60">)</span>
<span id="cb10-61"></span>
<span id="cb10-62"><span class="co" style="color: #5E5E5E;"># add the legend to the row of figures, prow_fig_3</span></span>
<span id="cb10-63">plot_fig_3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_grid</span>(prow_fig_3, legend, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, .<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb10-64"></span>
<span id="cb10-65"><span class="co" style="color: #5E5E5E;"># title</span></span>
<span id="cb10-66">title_3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-67">  <span class="fu" style="color: #4758AB;">draw_label</span>(</span>
<span id="cb10-68">    <span class="st" style="color: #20794D;">"Figure 3. Are Merchant and Transaction Coordinates Correlated?"</span>,</span>
<span id="cb10-69">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span>,</span>
<span id="cb10-70">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">14</span>,</span>
<span id="cb10-71">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb10-72">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb10-73">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-74">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb10-75"></span>
<span id="cb10-76"><span class="co" style="color: #5E5E5E;"># graph everything</span></span>
<span id="cb10-77"><span class="fu" style="color: #4758AB;">plot_grid</span>(title_3,</span>
<span id="cb10-78">          plot_fig_3,</span>
<span id="cb10-79">          <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-80">          <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/transaction-merchant-coords-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>These two sets of data are highly correlated (for latitude = 0.994 and for longitude = 0.999) and thus are redundant. So I remove <code>merch_lat</code> and <code>merch_long</code> from the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Code Block 11: Removing merch_lat and merch_long</span></span>
<span id="cb11-2">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>merch_lat,<span class="sc" style="color: #5E5E5E;">-</span>merch_long) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">lat_trans =</span> lat, <span class="at" style="color: #657422;">long_trans =</span> long)</span></code></pre></div>
</div>
<p>Next, I will look and see if some locations are more prone to fraud.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Code Block 12: Looking at Fraud by Location</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(long_trans, lat_trans, <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(is_fraud))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb12-8">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"jitter"</span></span>
<span id="cb12-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(</span>
<span id="cb12-11">    <span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb12-12">    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Not Fraud'</span>, <span class="st" style="color: #20794D;">'Fraud'</span>),</span>
<span id="cb12-13">    <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 4: Where does fraud occur? "</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Latitude"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-17">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Longitude"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/fraud-by-location-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It looks like there are some locations which only have fraudulent transactions.</p>
<p>Next, I’m going to convert city/state into latitude and longitude using the <a href="https://jessecambon.github.io/tidygeocoder/reference/geo.html">tidygeocoder package</a>. Also included code to save this output and then re-import it. You likely do not want to be pulling the data from the internet every time you run the code, so this gives you the option to work from a local copy. For many services, it is against terms of service to repeatedly make the same calls rather than working from a local version. I did find that I could originally pull all data from ‘osm’, but while double checking this code, I found that the service is now imposing some rate limit and denies some requests, leading to some NA entries. So do check your results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Code Block 13: Converting city/state data lat/long</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># need to pass an address to geo to convert to lat/long</span></span>
<span id="cb13-4">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">address =</span> <span class="fu" style="color: #4758AB;">str_c</span>(city, state, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">" , "</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># generate a list of distinct addresses to look up</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;"># the dataset is large, so it is better to only look up unique address rather that the address</span></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;"># for every record</span></span>
<span id="cb13-10">address_list <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">distinct</span>(address)</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;"># this has one more than number in the cities, so there must be a city with the same name in more than one state.</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;">#I don't want to run this api call everytime I open the notebook, so I downloaded the data and will reimport it and load it</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;"># Below is the code to run the call.  Uncomment it.</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;"># gets coordinates for city,states</span></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;">#home_coords &lt;-</span></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;">#  geo(address_list$address,</span></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;">#      method = "osm",</span></span>
<span id="cb13-21"><span class="co" style="color: #5E5E5E;">#      full_results = FALSE)</span></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;">#write.csv("home_coords_april10.csv", home_coords)</span></span>
<span id="cb13-23"><span class="co" style="color: #5E5E5E;">#home_coords &lt;- home_coords %&gt;%</span></span>
<span id="cb13-24"><span class="co" style="color: #5E5E5E;">#  rename(lat_home = lat, long_home = long)</span></span>
<span id="cb13-25"></span>
<span id="cb13-26"> <span class="co" style="color: #5E5E5E;"># I downloaded it using the gui interface provided by datacamp when you view the object.</span></span>
<span id="cb13-27"></span>
<span id="cb13-28"></span>
<span id="cb13-29"><span class="co" style="color: #5E5E5E;"># Reimport the data and load it</span></span>
<span id="cb13-30">home_coords <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb13-31">  <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">'datacamp_workspace/downloaded_coords.csv'</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb13-32"></span>
<span id="cb13-33"></span>
<span id="cb13-34"><span class="co" style="color: #5E5E5E;"># imported home coords has an extra set of quotation marks</span></span>
<span id="cb13-35">home_coords <span class="ot" style="color: #003B4F;">&lt;-</span> home_coords <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-36">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">address =</span> <span class="fu" style="color: #4758AB;">str_replace_all</span>(address, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\"</span><span class="st" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">""</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-37">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">lat_home =</span> lat, <span class="at" style="color: #657422;">long_home =</span> long)</span>
<span id="cb13-38"></span>
<span id="cb13-39"><span class="co" style="color: #5E5E5E;"># use a left join on fraud and home_coords to assign the coord to every address in fraud</span></span>
<span id="cb13-40">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-41">  <span class="fu" style="color: #4758AB;">left_join</span>(home_coords, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"address"</span>)</span></code></pre></div>
</div>
<p>Now I’m going to calculate the distance between the card holder’s home and the location of the transaction. I think distance might be a feature that is related to fraud. I followed the tutorial <a href="https://www.geeksforgeeks.org/program-distance-two-points-earth/amp/">here</a> for calculating distance</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Code Block 14: Distance Between Home and Transaction</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;"># I believe this assuming a spherical Earth</span></span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;"># convert to radians</span></span>
<span id="cb14-6">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb14-8">    <span class="at" style="color: #657422;">lat1_radians =</span> lat_home <span class="sc" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">57.29577951</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;">lat2_radians =</span> lat_trans <span class="sc" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">57.29577951</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;">long1_radians =</span> long_home <span class="sc" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">57.29577951</span>,</span>
<span id="cb14-11">    <span class="at" style="color: #657422;">long2_radians =</span> long_trans <span class="sc" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">57.29577951</span></span>
<span id="cb14-12">  )</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;"># calculating distance</span></span>
<span id="cb14-15">fraud <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb14-16">  fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">distance_miles =</span> <span class="fl" style="color: #AD0000;">3963.0</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">acos</span>((<span class="fu" style="color: #4758AB;">sin</span>(lat1_radians) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">sin</span>(lat2_radians)) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">cos</span>(lat1_radians) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">cos</span>(lat2_radians) <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">cos</span>(long2_radians <span class="sc" style="color: #5E5E5E;">-</span> long1_radians)</span>
<span id="cb14-17">  ))</span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="co" style="color: #5E5E5E;"># calculating the correlation</span></span>
<span id="cb14-20">fraud_distance <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">cor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>distance_miles, fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud), <span class="dv" style="color: #AD0000;">3</span>) </span></code></pre></div>
</div>
<p>Despite my assumption that distance would be correlated with fraud, the correlation value is quite low, -0.003.</p>
<p>I’m going to visualize it anyway.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Code Block 15: Distance from Home and Fraud</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(distance_miles, is_fraud , <span class="at" style="color: #657422;">fill =</span> <span class="fu" style="color: #4758AB;">factor</span>(is_fraud))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb15-4">    <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb15-5">    <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">21</span>,</span>
<span id="cb15-6">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"black"</span>,</span>
<span id="cb15-7">    <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb15-8">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"jitter"</span></span>
<span id="cb15-9">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">scale_fill_viridis</span>(</span>
<span id="cb15-11">    <span class="at" style="color: #657422;">discrete =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb15-12">    <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'Not Fraud'</span>, <span class="st" style="color: #20794D;">'Fraud'</span>),</span>
<span id="cb15-13">    <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb15-14">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-15">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 5: How far from home does fraud occur?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-16">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Distance from Home (miles)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-17">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Is Fraud?"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/distance-and-fraud-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Some distances only have fraudulent transactions. This might be related to the locations that are only fraud, Figure 4.</p>
<p>This new feature <code>distances_miles</code> is retained, and the original variables (<code>city</code>, <code>state</code>) and the intermediate variables (address, variables used to calculate distance) are removed in Code Block 16.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Code Block 16: Remove Extraneous/Temp Variables</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># created to calculate distance</span></span>
<span id="cb16-4">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>lat1_radians,<span class="sc" style="color: #5E5E5E;">-</span>lat2_radians,<span class="sc" style="color: #5E5E5E;">-</span>long1_radians,<span class="sc" style="color: #5E5E5E;">-</span>long2_radians)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;">#remove city and state and address, replaced by lat/long</span></span>
<span id="cb16-8">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>city, <span class="sc" style="color: #5E5E5E;">-</span>state, <span class="sc" style="color: #5E5E5E;">-</span>address)</span></code></pre></div>
</div>
</section>
<section id="looking-at-the-dates" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-the-dates">5.3. Looking at the dates</h2>
<p><strong>Date</strong></p>
<p><code>dob</code>, Date of Birth of Credit Card Holder</p>
<p>Questions:</p>
<ul>
<li><p>What is the date range, and does it make sense?</p></li>
<li><p>Do we have improbably old or young people?</p></li>
<li><p>Do we have historic or futuristic transaction dates?</p></li>
</ul>
<p>I calculate the <code>age</code> from the <code>dob</code> and visualize them both.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Code Block 17: Looking at dob</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;">#summary(fraud$dob) #if you wanted a printed summary stats</span></span>
<span id="cb17-4"></span>
<span id="cb17-5">fig_6a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(dob)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb17-7">                 <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span> ,</span>
<span id="cb17-8">                 <span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-9">  <span class="co" style="color: #5E5E5E;">#ggtitle("How old are card Holders?") +</span></span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-11">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Date of Birth"</span>) </span>
<span id="cb17-12"></span>
<span id="cb17-13">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb17-14">  <span class="co" style="color: #5E5E5E;">#mutate (age = trunc((dob %--% today()) / years(1))) #if you wanted to calculate age relative to today</span></span>
<span id="cb17-15">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">age =</span> <span class="fu" style="color: #4758AB;">trunc</span>((</span>
<span id="cb17-16">    dob <span class="sc" style="color: #5E5E5E;">%--%</span> <span class="fu" style="color: #4758AB;">min</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>trans_date_trans_time)</span>
<span id="cb17-17">  ) <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">years</span>(<span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;">#summary(fraud$age) #if you wanted a printed summary stats</span></span>
<span id="cb17-19"></span>
<span id="cb17-20"></span>
<span id="cb17-21">fig_6b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(age)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-22">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb17-23">                 <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb17-24">                 <span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-25">  <span class="co" style="color: #5E5E5E;">#ggtitle("How old are card holders?") +</span></span>
<span id="cb17-26">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-27">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Age"</span>) </span>
<span id="cb17-28">plot_fig_6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_grid</span>(fig_6a, fig_6b, <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>))</span>
<span id="cb17-29"></span>
<span id="cb17-30">title_6 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-31">  <span class="fu" style="color: #4758AB;">draw_label</span>(</span>
<span id="cb17-32">    <span class="st" style="color: #20794D;">"Figure 6. How old are the card holders?"</span>,</span>
<span id="cb17-33">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span>,</span>
<span id="cb17-34">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb17-35">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb17-36">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb17-37">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="co" style="color: #5E5E5E;"># add margin on the left of the drawing canvas,</span></span>
<span id="cb17-38">    <span class="co" style="color: #5E5E5E;"># so title is aligned with left edge of first plot</span></span>
<span id="cb17-39">    <span class="at" style="color: #657422;">plot.margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb17-40"><span class="fu" style="color: #4758AB;">plot_grid</span>(title_6,</span>
<span id="cb17-41">          plot_fig_6,</span>
<span id="cb17-42">          <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb17-43">          <span class="co" style="color: #5E5E5E;"># rel_heights values control vertical title margins</span></span>
<span id="cb17-44">          <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/dob-viz-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">table_4_data <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">count</span>(age)</span>
<span id="cb18-2"></span>
<span id="cb18-3">table_4 <span class="ot" style="color: #003B4F;">&lt;-</span> table_4_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Ages of Card Holders"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">age =</span> <span class="st" style="color: #20794D;">"Ages"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb18-8">              <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"green"</span>,</span>
<span id="cb18-9">              <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb18-10">gt<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">as.tags.gt_tbl</span>(table_4)</span></code></pre></div>
<div class="cell-output-display">

<div id="qltvaevqnv" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#qltvaevqnv table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#qltvaevqnv thead, #qltvaevqnv tbody, #qltvaevqnv tfoot, #qltvaevqnv tr, #qltvaevqnv td, #qltvaevqnv th {
  border-style: none;
}

#qltvaevqnv p {
  margin: 0;
  padding: 0;
}

#qltvaevqnv .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #027101;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #027101;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#qltvaevqnv .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#qltvaevqnv .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#qltvaevqnv .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#qltvaevqnv .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qltvaevqnv .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#qltvaevqnv .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qltvaevqnv .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#qltvaevqnv .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#qltvaevqnv .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#qltvaevqnv .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#qltvaevqnv .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#qltvaevqnv .gt_spanner_row {
  border-bottom-style: hidden;
}

#qltvaevqnv .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#qltvaevqnv .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  vertical-align: middle;
}

#qltvaevqnv .gt_from_md > :first-child {
  margin-top: 0;
}

#qltvaevqnv .gt_from_md > :last-child {
  margin-bottom: 0;
}

#qltvaevqnv .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #CAFFAF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #CAFFAF;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #CAFFAF;
  vertical-align: middle;
  overflow-x: hidden;
}

#qltvaevqnv .gt_stub {
  color: #FFFFFF;
  background-color: #038901;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #038901;
  padding-left: 5px;
  padding-right: 5px;
}

#qltvaevqnv .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#qltvaevqnv .gt_row_group_first td {
  border-top-width: 2px;
}

#qltvaevqnv .gt_row_group_first th {
  border-top-width: 2px;
}

#qltvaevqnv .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qltvaevqnv .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #038901;
}

#qltvaevqnv .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#qltvaevqnv .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#qltvaevqnv .gt_grand_summary_row {
  color: #333333;
  background-color: #CAFFAF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qltvaevqnv .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #038901;
}

#qltvaevqnv .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #038901;
}

#qltvaevqnv .gt_striped {
  background-color: #F4F4F4;
}

#qltvaevqnv .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#qltvaevqnv .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qltvaevqnv .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#qltvaevqnv .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qltvaevqnv .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#qltvaevqnv .gt_left {
  text-align: left;
}

#qltvaevqnv .gt_center {
  text-align: center;
}

#qltvaevqnv .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#qltvaevqnv .gt_font_normal {
  font-weight: normal;
}

#qltvaevqnv .gt_font_bold {
  font-weight: bold;
}

#qltvaevqnv .gt_font_italic {
  font-style: italic;
}

#qltvaevqnv .gt_super {
  font-size: 65%;
}

#qltvaevqnv .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#qltvaevqnv .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#qltvaevqnv .gt_indent_1 {
  text-indent: 5px;
}

#qltvaevqnv .gt_indent_2 {
  text-indent: 10px;
}

#qltvaevqnv .gt_indent_3 {
  text-indent: 15px;
}

#qltvaevqnv .gt_indent_4 {
  text-indent: 20px;
}

#qltvaevqnv .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    <tr class="gt_heading">
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Ages of Card Holders</td>
    </tr>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Ages">Ages</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Count">Count</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="age" class="gt_row gt_right">17</td>
<td headers="n" class="gt_row gt_right">2190</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">18</td>
<td headers="n" class="gt_row gt_right gt_striped">2198</td></tr>
    <tr><td headers="age" class="gt_row gt_right">19</td>
<td headers="n" class="gt_row gt_right">6592</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">20</td>
<td headers="n" class="gt_row gt_right gt_striped">741</td></tr>
    <tr><td headers="age" class="gt_row gt_right">21</td>
<td headers="n" class="gt_row gt_right">2207</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">22</td>
<td headers="n" class="gt_row gt_right gt_striped">31</td></tr>
    <tr><td headers="age" class="gt_row gt_right">23</td>
<td headers="n" class="gt_row gt_right">3663</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">25</td>
<td headers="n" class="gt_row gt_right gt_striped">3659</td></tr>
    <tr><td headers="age" class="gt_row gt_right">26</td>
<td headers="n" class="gt_row gt_right">6587</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">27</td>
<td headers="n" class="gt_row gt_right gt_striped">4378</td></tr>
    <tr><td headers="age" class="gt_row gt_right">28</td>
<td headers="n" class="gt_row gt_right">2926</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">29</td>
<td headers="n" class="gt_row gt_right gt_striped">8772</td></tr>
    <tr><td headers="age" class="gt_row gt_right">30</td>
<td headers="n" class="gt_row gt_right">17525</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">31</td>
<td headers="n" class="gt_row gt_right gt_striped">16093</td></tr>
    <tr><td headers="age" class="gt_row gt_right">32</td>
<td headers="n" class="gt_row gt_right">2940</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">33</td>
<td headers="n" class="gt_row gt_right gt_striped">10220</td></tr>
    <tr><td headers="age" class="gt_row gt_right">34</td>
<td headers="n" class="gt_row gt_right">11675</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">35</td>
<td headers="n" class="gt_row gt_right gt_striped">2204</td></tr>
    <tr><td headers="age" class="gt_row gt_right">36</td>
<td headers="n" class="gt_row gt_right">10218</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">37</td>
<td headers="n" class="gt_row gt_right gt_striped">9489</td></tr>
    <tr><td headers="age" class="gt_row gt_right">38</td>
<td headers="n" class="gt_row gt_right">8049</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">39</td>
<td headers="n" class="gt_row gt_right gt_striped">5120</td></tr>
    <tr><td headers="age" class="gt_row gt_right">40</td>
<td headers="n" class="gt_row gt_right">8017</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">41</td>
<td headers="n" class="gt_row gt_right gt_striped">1467</td></tr>
    <tr><td headers="age" class="gt_row gt_right">42</td>
<td headers="n" class="gt_row gt_right">6592</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">43</td>
<td headers="n" class="gt_row gt_right gt_striped">5847</td></tr>
    <tr><td headers="age" class="gt_row gt_right">44</td>
<td headers="n" class="gt_row gt_right">14619</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">45</td>
<td headers="n" class="gt_row gt_right gt_striped">14608</td></tr>
    <tr><td headers="age" class="gt_row gt_right">46</td>
<td headers="n" class="gt_row gt_right">13888</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">47</td>
<td headers="n" class="gt_row gt_right gt_striped">8015</td></tr>
    <tr><td headers="age" class="gt_row gt_right">48</td>
<td headers="n" class="gt_row gt_right">1500</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">49</td>
<td headers="n" class="gt_row gt_right gt_striped">5135</td></tr>
    <tr><td headers="age" class="gt_row gt_right">50</td>
<td headers="n" class="gt_row gt_right">1482</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">51</td>
<td headers="n" class="gt_row gt_right gt_striped">12449</td></tr>
    <tr><td headers="age" class="gt_row gt_right">52</td>
<td headers="n" class="gt_row gt_right">7330</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">53</td>
<td headers="n" class="gt_row gt_right gt_striped">5855</td></tr>
    <tr><td headers="age" class="gt_row gt_right">54</td>
<td headers="n" class="gt_row gt_right">2922</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">55</td>
<td headers="n" class="gt_row gt_right gt_striped">3684</td></tr>
    <tr><td headers="age" class="gt_row gt_right">56</td>
<td headers="n" class="gt_row gt_right">735</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">57</td>
<td headers="n" class="gt_row gt_right gt_striped">7340</td></tr>
    <tr><td headers="age" class="gt_row gt_right">58</td>
<td headers="n" class="gt_row gt_right">2201</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">59</td>
<td headers="n" class="gt_row gt_right gt_striped">7318</td></tr>
    <tr><td headers="age" class="gt_row gt_right">60</td>
<td headers="n" class="gt_row gt_right">2194</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">61</td>
<td headers="n" class="gt_row gt_right gt_striped">2951</td></tr>
    <tr><td headers="age" class="gt_row gt_right">62</td>
<td headers="n" class="gt_row gt_right">5878</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">63</td>
<td headers="n" class="gt_row gt_right gt_striped">5143</td></tr>
    <tr><td headers="age" class="gt_row gt_right">64</td>
<td headers="n" class="gt_row gt_right">5115</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">65</td>
<td headers="n" class="gt_row gt_right gt_striped">3657</td></tr>
    <tr><td headers="age" class="gt_row gt_right">66</td>
<td headers="n" class="gt_row gt_right">737</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">67</td>
<td headers="n" class="gt_row gt_right gt_striped">4391</td></tr>
    <tr><td headers="age" class="gt_row gt_right">68</td>
<td headers="n" class="gt_row gt_right">6582</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">70</td>
<td headers="n" class="gt_row gt_right gt_striped">1461</td></tr>
    <tr><td headers="age" class="gt_row gt_right">72</td>
<td headers="n" class="gt_row gt_right">8</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">73</td>
<td headers="n" class="gt_row gt_right gt_striped">2939</td></tr>
    <tr><td headers="age" class="gt_row gt_right">75</td>
<td headers="n" class="gt_row gt_right">1463</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">76</td>
<td headers="n" class="gt_row gt_right gt_striped">1472</td></tr>
    <tr><td headers="age" class="gt_row gt_right">77</td>
<td headers="n" class="gt_row gt_right">753</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">78</td>
<td headers="n" class="gt_row gt_right gt_striped">2951</td></tr>
    <tr><td headers="age" class="gt_row gt_right">79</td>
<td headers="n" class="gt_row gt_right">5118</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">80</td>
<td headers="n" class="gt_row gt_right gt_striped">11</td></tr>
    <tr><td headers="age" class="gt_row gt_right">81</td>
<td headers="n" class="gt_row gt_right">1465</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">82</td>
<td headers="n" class="gt_row gt_right gt_striped">2926</td></tr>
    <tr><td headers="age" class="gt_row gt_right">83</td>
<td headers="n" class="gt_row gt_right">4393</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">86</td>
<td headers="n" class="gt_row gt_right gt_striped">744</td></tr>
    <tr><td headers="age" class="gt_row gt_right">89</td>
<td headers="n" class="gt_row gt_right">2929</td></tr>
    <tr><td headers="age" class="gt_row gt_right gt_striped">90</td>
<td headers="n" class="gt_row gt_right gt_striped">3652</td></tr>
    <tr><td headers="age" class="gt_row gt_right">91</td>
<td headers="n" class="gt_row gt_right">2193</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>The ages seem reasonable (calculated relative to the earliest date of transactions). There are a few thousand 17-year-olds, which is too young to have their own credit card, but it is plausible that they would be an authorized user on their parents’ card. <code>age</code> seems a more reasonable variable than <code>dob</code>, so <code>dob</code> is also dropped from the dataset. For example, scammers might be more likely to target 90-year-olds. The age is the feature that leads to them being targeted, not the birth year. The birth year is related to age through the current date- in 10 years, a new cohort of birth years would be targeted if age is the important feature. So the <code>age</code> feature is more robust to passing time than <code>dob</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Code Block 18: Removing dob</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>dob)</span></code></pre></div>
</div>
</section>
<section id="looking-at-the-date-times" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-the-date-times">5.4. Looking at the date-times</h2>
<p><strong>date-time</strong></p>
<p><code>trans_date_trans_time</code>, Transaction DateTime</p>
<p><strong>Questions</strong></p>
<p>Would processing the date-times yield more useful predictors?</p>
<p>First, I want to look at variation in the number of transactions with date-time. I chose to use a histogram with bins corresponding to one month widths.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Code Block 19: Looking at Transaction Date/ Times</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(trans_date_trans_time)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb20-5">                 <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb20-6">                 <span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">24</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="co" style="color: #5E5E5E;">#24 months in dataset</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 7: When do Transactions occur"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-8">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb20-9">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Date/ Time"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/date-times-viz-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, I will break the transaction date-time into day of the week, hour, and the date only. I’m doing this here with <a href="https://lubridate.tidyverse.org/">lubridate functions</a>, but I could also do this in the model building section, when I create recipes by using <a href="https://recipes.tidymodels.org/reference/step_date.html">step_date()</a>. I will also graph transactions by day of the week.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># |label: day-transactions</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;"># Code Block 20: </span></span>
<span id="cb21-3"></span>
<span id="cb21-4">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb21-6">    <span class="at" style="color: #657422;">date_only =</span> <span class="fu" style="color: #4758AB;">date</span>(trans_date_trans_time),</span>
<span id="cb21-7">    <span class="at" style="color: #657422;">hour =</span> <span class="fu" style="color: #4758AB;">hour</span>(trans_date_trans_time),</span>
<span id="cb21-8">    <span class="at" style="color: #657422;">weekday =</span> <span class="fu" style="color: #4758AB;">wday</span>(trans_date_trans_time)</span>
<span id="cb21-9">  )</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(weekday)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-12">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(</span>
<span id="cb21-13">    <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb21-14">    <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>,</span>
<span id="cb21-15">    <span class="at" style="color: #657422;">binwidth =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb21-16">    <span class="at" style="color: #657422;">center =</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb21-17">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-18">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 7: On what days do transactions occur?"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-19">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb21-20">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Weekday"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Monday has the highest number of transactions; this could be due to businesses processing orders that came in over the weekend. By default, lubridate codes the day of the week as a number where 1 means Monday, 7 means Sunday.</p>
<p>Now, I look at what time of day do most transactions occur?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Code Block 21: What time do transactions occur</span></span>
<span id="cb22-2">fig_8a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(hour)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-4">  <span class="co" style="color: #5E5E5E;">#ggtitle("What hour do transactions occur") +</span></span>
<span id="cb22-5">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Hour"</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8"></span>
<span id="cb22-9">fig_8b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(hour)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-10">  <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-11">  <span class="co" style="color: #5E5E5E;">#ggtitle("What hour do transactions occur") +</span></span>
<span id="cb22-12">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-13">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Hour"</span>) </span>
<span id="cb22-14"></span>
<span id="cb22-15">plot_fig_8 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">plot_grid</span>(fig_8a, fig_8b, <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>))</span>
<span id="cb22-16"></span>
<span id="cb22-17">title_8 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-18">  <span class="fu" style="color: #4758AB;">draw_label</span>(</span>
<span id="cb22-19">    <span class="st" style="color: #20794D;">"Figure 8. When do transactions occur?"</span>,</span>
<span id="cb22-20">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span>,</span>
<span id="cb22-21">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb22-22">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb22-23">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb22-24">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb22-25">    <span class="at" style="color: #657422;">plot.margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb22-26"><span class="fu" style="color: #4758AB;">plot_grid</span>(title_8,</span>
<span id="cb22-27">          plot_fig_8,</span>
<span id="cb22-28">          <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb22-29">          <span class="co" style="color: #5E5E5E;"># rel_heights values control vertical title margins</span></span>
<span id="cb22-30">          <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/hour-transactions-graph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This data honestly looks funny to me. I might expect that most transactions would occur during normal business hours (~9-5) or more occur during lunch or after work, but what we see is a lower number of transactions from midnight to ~ 2 pm and then a higher number of transactions from 2 pm until midnight. The odd pattern could be a sign that something is wrong with the data (perhaps timezones aren’t being encoded properly?), or it could be simply a lack of subject matter knowledge (for example, transactions are pre-authorized at the time of sale and processed later, and the transaction time is the processing time, not the sale time.) Of course, this is also a synthetic dataset, so this pattern may be simply the result of user input choices when the set was generated. If this were a real dataset, I’d chase this down.</p>
<p>And I made a table too, just to look at this data in another way.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Code Block 22:</span></span>
<span id="cb23-2">table_5_data <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">count</span>(hour)</span>
<span id="cb23-3"></span>
<span id="cb23-4">table_5 <span class="ot" style="color: #003B4F;">&lt;-</span> table_5_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-5">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Transactions by Time of Day"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">hour =</span> <span class="st" style="color: #20794D;">"Hour"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-8">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb23-9">              <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"green"</span>,</span>
<span id="cb23-10">              <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb23-11">gt<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">as.tags.gt_tbl</span>(table_5)</span></code></pre></div>
<div class="cell-output-display">

<div id="wilmsaxovz" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#wilmsaxovz table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#wilmsaxovz thead, #wilmsaxovz tbody, #wilmsaxovz tfoot, #wilmsaxovz tr, #wilmsaxovz td, #wilmsaxovz th {
  border-style: none;
}

#wilmsaxovz p {
  margin: 0;
  padding: 0;
}

#wilmsaxovz .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #027101;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #027101;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#wilmsaxovz .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#wilmsaxovz .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#wilmsaxovz .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#wilmsaxovz .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#wilmsaxovz .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#wilmsaxovz .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#wilmsaxovz .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#wilmsaxovz .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#wilmsaxovz .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#wilmsaxovz .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#wilmsaxovz .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#wilmsaxovz .gt_spanner_row {
  border-bottom-style: hidden;
}

#wilmsaxovz .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#wilmsaxovz .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
  vertical-align: middle;
}

#wilmsaxovz .gt_from_md > :first-child {
  margin-top: 0;
}

#wilmsaxovz .gt_from_md > :last-child {
  margin-bottom: 0;
}

#wilmsaxovz .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #CAFFAF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #CAFFAF;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #CAFFAF;
  vertical-align: middle;
  overflow-x: hidden;
}

#wilmsaxovz .gt_stub {
  color: #FFFFFF;
  background-color: #038901;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #038901;
  padding-left: 5px;
  padding-right: 5px;
}

#wilmsaxovz .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#wilmsaxovz .gt_row_group_first td {
  border-top-width: 2px;
}

#wilmsaxovz .gt_row_group_first th {
  border-top-width: 2px;
}

#wilmsaxovz .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#wilmsaxovz .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #038901;
}

#wilmsaxovz .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#wilmsaxovz .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#wilmsaxovz .gt_grand_summary_row {
  color: #333333;
  background-color: #CAFFAF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#wilmsaxovz .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #038901;
}

#wilmsaxovz .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #038901;
}

#wilmsaxovz .gt_striped {
  background-color: #F4F4F4;
}

#wilmsaxovz .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #038901;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #038901;
}

#wilmsaxovz .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#wilmsaxovz .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#wilmsaxovz .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#wilmsaxovz .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#wilmsaxovz .gt_left {
  text-align: left;
}

#wilmsaxovz .gt_center {
  text-align: center;
}

#wilmsaxovz .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#wilmsaxovz .gt_font_normal {
  font-weight: normal;
}

#wilmsaxovz .gt_font_bold {
  font-weight: bold;
}

#wilmsaxovz .gt_font_italic {
  font-style: italic;
}

#wilmsaxovz .gt_super {
  font-size: 65%;
}

#wilmsaxovz .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#wilmsaxovz .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#wilmsaxovz .gt_indent_1 {
  text-indent: 5px;
}

#wilmsaxovz .gt_indent_2 {
  text-indent: 10px;
}

#wilmsaxovz .gt_indent_3 {
  text-indent: 15px;
}

#wilmsaxovz .gt_indent_4 {
  text-indent: 20px;
}

#wilmsaxovz .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    <tr class="gt_heading">
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Transactions by Time of Day</td>
    </tr>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Hour">Hour</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Count">Count</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="hour" class="gt_row gt_right">0</td>
<td headers="n" class="gt_row gt_right">11039</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">1</td>
<td headers="n" class="gt_row gt_right gt_striped">11241</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">2</td>
<td headers="n" class="gt_row gt_right">11019</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">3</td>
<td headers="n" class="gt_row gt_right gt_striped">11227</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">4</td>
<td headers="n" class="gt_row gt_right">10904</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">5</td>
<td headers="n" class="gt_row gt_right gt_striped">11023</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">6</td>
<td headers="n" class="gt_row gt_right">11145</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">7</td>
<td headers="n" class="gt_row gt_right gt_striped">11094</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">8</td>
<td headers="n" class="gt_row gt_right">11123</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">9</td>
<td headers="n" class="gt_row gt_right gt_striped">10997</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">10</td>
<td headers="n" class="gt_row gt_right">11123</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">11</td>
<td headers="n" class="gt_row gt_right gt_striped">11016</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">12</td>
<td headers="n" class="gt_row gt_right">17168</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">13</td>
<td headers="n" class="gt_row gt_right gt_striped">17125</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">14</td>
<td headers="n" class="gt_row gt_right">16879</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">15</td>
<td headers="n" class="gt_row gt_right gt_striped">17169</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">16</td>
<td headers="n" class="gt_row gt_right">17465</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">17</td>
<td headers="n" class="gt_row gt_right gt_striped">17011</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">18</td>
<td headers="n" class="gt_row gt_right">17021</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">19</td>
<td headers="n" class="gt_row gt_right gt_striped">17277</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">20</td>
<td headers="n" class="gt_row gt_right">17298</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">21</td>
<td headers="n" class="gt_row gt_right gt_striped">17267</td></tr>
    <tr><td headers="hour" class="gt_row gt_right">22</td>
<td headers="n" class="gt_row gt_right">17460</td></tr>
    <tr><td headers="hour" class="gt_row gt_right gt_striped">23</td>
<td headers="n" class="gt_row gt_right gt_striped">17516</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>Still weird.</p>
<p>I discard the original variable and keep the new variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Code Block 23:</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;">#removing the original variable and keeping the component variables.</span></span>
<span id="cb24-3">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>trans_date_trans_time)</span></code></pre></div>
</div>
</section>
<section id="looking-at-the-numerical-variables" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-the-numerical-variables">5.5. Looking at the numerical variables</h2>
<p><strong>Numerical</strong></p>
<p><code>amt</code>, transaction amount</p>
<p><strong>Questions</strong></p>
<p>Would transforming this data produce a more normal distribution?</p>
<p>Generally, more normal or at least more symmetric data tends to be fitted better, especially when using model-fitting algorithms that arise from statistics rather than pure machine learning.</p>
<p>I compare the original data with the log-transformed data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Code Block 24:</span></span>
<span id="cb25-2">fig_9a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(amt)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>, <span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">50</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-4">  <span class="co" style="color: #5E5E5E;">#ggtitle("Amount of Transaction") +</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"purchase amount ($)"</span>)</span>
<span id="cb25-7"></span>
<span id="cb25-8">fig_9b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(fraud, <span class="fu" style="color: #4758AB;">aes</span>(<span class="fu" style="color: #4758AB;">log</span>(amt))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"darkcyan"</span>, <span class="at" style="color: #657422;">bins =</span> <span class="dv" style="color: #AD0000;">50</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-10">  <span class="co" style="color: #5E5E5E;">#ggtitle("log(Amount) of Transaction") +</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"log(purchase amount) ($)"</span>)</span>
<span id="cb25-13"></span>
<span id="cb25-14">plot_fig_9 <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;">plot_grid</span>(fig_9a, fig_9b, <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'A'</span>, <span class="st" style="color: #20794D;">'B'</span>), <span class="at" style="color: #657422;">label_size =</span> <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb25-16">title_9 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-17">  <span class="fu" style="color: #4758AB;">draw_label</span>(</span>
<span id="cb25-18">    <span class="st" style="color: #20794D;">"Figure 9. Distribution of amount and log(amount)"</span>,</span>
<span id="cb25-19">    <span class="at" style="color: #657422;">fontface =</span> <span class="st" style="color: #20794D;">'bold'</span>,</span>
<span id="cb25-20">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb25-21">    <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb25-22">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb25-23">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb25-24">    <span class="at" style="color: #657422;">plot.margin =</span> <span class="fu" style="color: #4758AB;">margin</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb25-25"><span class="fu" style="color: #4758AB;">plot_grid</span>(title_9,</span>
<span id="cb25-26">          plot_fig_9,</span>
<span id="cb25-27">          <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb25-28">          <span class="at" style="color: #657422;">rel_heights =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/amt-log-amt-graph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The transformed data is more symmetric so that the transformed variable will be retained.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Code Block 25:</span></span>
<span id="cb26-2">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">amt_log =</span> <span class="fu" style="color: #4758AB;">log</span>(amt))</span></code></pre></div>
</div>
<p>I do a final clean-up of variables next. I remove some variables that I don’t think will impact fraud- the population of the home city and the location of the home. I don’t think the home should have an impact on fraud; it is where the card is used, not where it is billed, that should matter. I suppose you could have a neighborhood where all the mail was being stolen, and cards were compromised that way, but I think most cards get compromised at the point of sale.</p>
<p>I also removed the date. The date itself is unlikely to be related to fraud. It is possible that special dates are correlated with fraud, like a holiday or a big sports match. Engineering a holiday feature could be a future improvement.</p>
<p>There is a possibility that job type could have an impact on fraud; for example, a trucker might be more likely to have his/her card stolen just because they are always on the road and visiting a wide variety of places where they would use the card. Or this could come in as an interaction term with distance; distance from home and the occupation trucker might have no correlation, but the distance from home and the occupation teacher might have because it would be a more unusual event for that <code>job</code>. However, some model fitting fails to converge when <code>job</code> is included, and it takes a long time for the models that it does work for. So I remove it too.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Code Block 26:</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;"># removed in related clusters, so easy to comment out if you want to add back a group</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;"># remove amt and keep log transformed version</span></span>
<span id="cb27-5">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-6">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>amt)</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;"># home location and home city pop shouldn't impact fraud</span></span>
<span id="cb27-9">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-10">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>city_pop,<span class="sc" style="color: #5E5E5E;">-</span>lat_home,<span class="sc" style="color: #5E5E5E;">-</span>long_home)</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;"># remove date</span></span>
<span id="cb27-13">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>date_only)</span>
<span id="cb27-14"></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;"># remove jobs</span></span>
<span id="cb27-16">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-17">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>job)  </span></code></pre></div>
</div>
</section>
</section>
<section id="final-preparation-for-modeling" class="level1">
<h1>6. Final preparation for modeling</h1>
<p>Next, I plot the correlation plot for the dataset. Highly correlated variables can cause problems for some fitting algorithms, again, especially for those coming from statistics. It also gives you a bit of a feel for what might come out of the model fitting. This is also a chance to do one last fact-check. For example, <code>category</code> and <code>amt</code> are reasonably correlated. The sign isn’t particularly important in this case since <code>category</code> is arbitrarily ordered.</p>
<p>I like the corrplot package for making correlation plots. I think this package produces very nice visualizations. I did find that the title sometimes gets cut off and I found the solution was to add some margin as explained <a href="https://stefaneng.github.io/corrplot-title-cut-off/">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">#Code Block 27: examining correlation between variables </span></span>
<span id="cb28-2"></span>
<span id="cb28-3">fraud <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;">mutate_if</span>(is.factor, as.numeric) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-5">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(is_fraud, <span class="fu" style="color: #4758AB;">everything</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-6">  cor <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-7">  {</span>
<span id="cb28-8">    .[<span class="fu" style="color: #4758AB;">order</span>(<span class="fu" style="color: #4758AB;">abs</span>(.[, <span class="dv" style="color: #AD0000;">1</span>]), <span class="at" style="color: #657422;">decreasing =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb28-9">      <span class="fu" style="color: #4758AB;">order</span>(<span class="fu" style="color: #4758AB;">abs</span>(.[, <span class="dv" style="color: #AD0000;">1</span>]), <span class="at" style="color: #657422;">decreasing =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)]</span>
<span id="cb28-10">  } <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-11">  <span class="fu" style="color: #4758AB;">corrplot</span>(</span>
<span id="cb28-12">    <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'lower'</span>,</span>
<span id="cb28-13">    <span class="at" style="color: #657422;">tl.col =</span> <span class="st" style="color: #20794D;">'black'</span>,</span>
<span id="cb28-14">    <span class="at" style="color: #657422;">addCoef.col =</span> <span class="st" style="color: #20794D;">'black'</span>,</span>
<span id="cb28-15">    <span class="at" style="color: #657422;">cl.ratio =</span> <span class="fl" style="color: #AD0000;">0.2</span>,</span>
<span id="cb28-16">    <span class="at" style="color: #657422;">tl.srt =</span> <span class="dv" style="color: #AD0000;">45</span>,</span>
<span id="cb28-17">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">COL2</span>(<span class="st" style="color: #20794D;">'PuOr'</span>, <span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb28-18">    <span class="at" style="color: #657422;">diag =</span> <span class="cn" style="color: #8f5902;">FALSE</span> ,</span>
<span id="cb28-19">    <span class="at" style="color: #657422;">mar =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb28-20">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Figure 10: Correlations between fraud and the predictors"</span></span>
<span id="cb28-21">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/correlation-graph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Tidymodels requires that the outcome be a factor and the <a href="https://community.rstudio.com/t/tidymodels-which-factor-level-is-the-default-positive-class/100428">positive class be the first level</a>. So I create the factor and relevel it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Code Block 28: </span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;"># in tidymodels, outcome should be a factor</span></span>
<span id="cb29-4">fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span>
<span id="cb29-5"><span class="fu" style="color: #4758AB;">levels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0" "1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># first level is the event in tidymodels, so we need to reorder</span></span>
<span id="cb31-2">fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">relevel</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud, <span class="at" style="color: #657422;">ref =</span> <span class="st" style="color: #20794D;">"1"</span>)</span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;">levels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "0"</code></pre>
</div>
</div>
<p>And take one last look at the data and make sure I have the variables I expect. I also export this processed data for use in <a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html">my tidymodels tutorial</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># Code Block 29: Viewing Final Fraud Dataset</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;">glimpse</span>(fraud)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 339,607
Columns: 9
$ category       &lt;fct&gt; grocery_pos, entertainment, grocery_pos, shopping_pos, …
$ lat_trans      &lt;dbl&gt; 48.8878, 42.1808, 41.6125, 32.9396, 43.0172, 20.0827, 4…
$ long_trans     &lt;dbl&gt; -118.2105, -112.2620, -122.5258, -105.8189, -111.0292, …
$ is_fraud       &lt;fct&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ distance_miles &lt;dbl&gt; 1271.5119381, 0.9433129, 2.3078189, 0.8747466, 2.499453…
$ age            &lt;dbl&gt; 40, 56, 73, 51, 51, 52, 73, 57, 31, 34, 42, 31, 63, 44,…
$ hour           &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1…
$ weekday        &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…
$ amt_log        &lt;dbl&gt; 4.6749761, 5.3941274, 4.5673645, 2.0502702, 1.9242487, …</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># save file to use in other tutorial</span></span>
<span id="cb35-2"><span class="co" style="color: #5E5E5E;">#saveRDS(fraud, file = "fraud_processed.RDS")</span></span></code></pre></div>
</div>
</section>
<section id="finding-a-high-performing-model" class="level1">
<h1>7. Finding a high performing model</h1>
<p>I’m planning to study the following models and methods of handling imbalanced class problems.</p>
<p>Explore different classification models</p>
<ol type="1">
<li><p>logistic regression</p></li>
<li><p>elastic net logistic regression</p></li>
<li><p>lightgbm</p></li>
<li><p>random forest</p></li>
</ol>
<p>Explore different method of handling imbalanced class problems</p>
<ol type="1">
<li><p>do nothing</p></li>
<li><p>SMOTE</p></li>
<li><p>ROSE</p></li>
<li><p>downsample</p></li>
</ol>
<p>This ends up being 4 x 4 different fits, and keeping track of all the combinations can become difficult. Luckily, tidymodels has a function workflow_set that will create all the combinations and workflow_map to run all the fitting procedures.</p>
<section id="splitting-the-data" class="level2">
<h2 class="anchored" data-anchor-id="splitting-the-data">7.1. Splitting the data</h2>
<p>First, preparation work. Here, I split the data into a testing and training set. I also create folds for cross-validation from the training set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Code Block 30 : Train/Test Splits &amp; CV Folds </span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;"># Split the data into a test and training set</span></span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">222</span>)</span>
<span id="cb36-5">data_split <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;">initial_split</span>(fraud, <span class="at" style="color: #657422;">prop =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #657422;">strata =</span> is_fraud)</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="co" style="color: #5E5E5E;"># Create data frames for the two sets:</span></span>
<span id="cb36-9">train_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(data_split)</span>
<span id="cb36-10">test_data  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(data_split)</span>
<span id="cb36-11"></span>
<span id="cb36-12">start_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb36-13"></span>
<span id="cb36-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb36-15">fraud_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(train_data, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">strata =</span> is_fraud)</span></code></pre></div>
</div>
</section>
<section id="creating-recipes" class="level2">
<h2 class="anchored" data-anchor-id="creating-recipes">7.2. Creating recipes</h2>
<p>Next, I create recipes that do preprocessing of the data- making dummy variables, normalizing, and removing variables that only contain one value (<code>step_zv(all_predictors())</code>). The processing will be applied to both the training and testing data as you move through the workflow.</p>
<p>I used the chart found in <a href="https://www.tmwr.org/pre-proc-table.html">Appendix A</a> of the Tidy Modeling with R by Max Kuhn and Julia Silge to choose the preprocessing of data. Some models require specific types of preprocessing, others don’t require it, but it can produce better or faster fitting, and in other cases, the preprocessing isn’t required and probably doesn’t help. The chart breaks this down for each category of preprocessing model by model. The same preprocessing steps were required or recommended for the models I chose, so I used them across the board. You can create recipes for different models and build a workflow manually to match the models to the proper recipe. This process is covered extensively in <a href="https://www.tmwr.org/workflow-sets.html">Chapter 15</a> of Tidy Modeling with R.</p>
<p>I use the selector functions (<code>all_nominal_predictors()</code>, <code>all_numerical_predictors()</code>, etc.) available in the tidymodels framework. A listing of all selector functions usable in tidymodels can be found <a href="https://recipes.tidymodels.org/reference/selections.htm">here</a>. Using selector functions when handling groups of features reduces the chance of mistakes and typos.</p>
<p>I then modify this recipe to handle the imbalanced class problem. I use SMOTE and ROSE hybrid methods to balance the classes. These methods create synthetic data for the minority class and downsample the majority class to balance the classes. I also use downsample, which throws away majority class records to balance the two classes. A good overview is <a href="https://www.r-bloggers.com/2019/04/methods-for-dealing-with-imbalanced-data/">here</a>, and it also provides a tutorial for handling this type of problem with caret, rather than tidymodels. These recipe steps require the <a href="https://cran.r-project.org/web/packages/themis/index.html">themis package</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Code Block 31: creating recipes</span></span>
<span id="cb37-2"></span>
<span id="cb37-3">recipe_plain <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb37-4">  <span class="fu" style="color: #4758AB;">recipe</span>(is_fraud <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> train_data) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-6">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-7">  <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb37-8"></span>
<span id="cb37-9">recipe_rose <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb37-10">  recipe_plain <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-11">  <span class="fu" style="color: #4758AB;">step_rose</span>(is_fraud)</span>
<span id="cb37-12"></span>
<span id="cb37-13">recipe_smote <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb37-14">  recipe_plain <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-15">  <span class="fu" style="color: #4758AB;">step_smote</span>(is_fraud)</span>
<span id="cb37-16"></span>
<span id="cb37-17">recipe_down <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb37-18">  recipe_plain <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-19">  <span class="fu" style="color: #4758AB;">step_downsample</span>(is_fraud)</span></code></pre></div>
</div>
</section>
<section id="setting-the-model-engines" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-model-engines">7.3. Setting the model engines</h2>
<p>Next, I set the engines for the models. I tune the hyperparameters of the elastic net logistic regression and the lightgbm. Random Forest also has tuning parameters, but the random forest model is pretty slow to fit, and adding tuning parameters makes it even slower. If none of the other models worked well, then tuning RF would be a good idea.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Code Block 32: Setting engines</span></span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;">#this is the standard logistic regression</span></span>
<span id="cb38-4">logreg_spec <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glm"</span>)</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;">#elastic net regularization of logistic regression</span></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;">#this has 2 hyperparameters that we will tune</span></span>
<span id="cb38-10">glmnet_spec <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;">logistic_reg</span>(<span class="at" style="color: #657422;">penalty =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-12">               <span class="at" style="color: #657422;">mixture =</span> <span class="fu" style="color: #4758AB;">tune</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-13">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb38-14"></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;">#random forest also has tunable hyperparameters, but we won't</span></span>
<span id="cb38-16">rf_spec <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb38-17">  <span class="fu" style="color: #4758AB;">rand_forest</span>(<span class="at" style="color: #657422;">trees =</span> <span class="dv" style="color: #AD0000;">100</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-18">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"ranger"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb38-20"></span>
<span id="cb38-21"><span class="co" style="color: #5E5E5E;">#This is a boosted gradient method with 6 tuning parameters</span></span>
<span id="cb38-22">lightgbm_spec <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb38-23">  <span class="fu" style="color: #4758AB;">boost_tree</span>(</span>
<span id="cb38-24">    <span class="at" style="color: #657422;">mtry =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-25">    <span class="at" style="color: #657422;">trees =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-26">    <span class="at" style="color: #657422;">tree_depth =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-27">    <span class="at" style="color: #657422;">learn_rate =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-28">    <span class="at" style="color: #657422;">min_n =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb38-29">    <span class="at" style="color: #657422;">loss_reduction =</span> <span class="fu" style="color: #4758AB;">tune</span>()</span>
<span id="cb38-30">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-31">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="at" style="color: #657422;">engine =</span> <span class="st" style="color: #20794D;">"lightgbm"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb38-32">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"classification"</span>)</span></code></pre></div>
</div>
</section>
<section id="creating-a-metrics-set" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-metrics-set">7.4. Creating a metrics set</h2>
<p>Lastly, I create a metrics set in Code Block 33. Accuracy is generally a terrible metric for highly imbalanced problems; the model can achieve high accuracy by assigning everything to the majority class. Alternate metrics like <a href="https://en.wikipedia.org/wiki/Sensitivity_and_specificity">sensitivity</a> or <a href="https://en.wikipedia.org/wiki/Youden%27s_J_statistic">j-index</a> are better choices for the imbalanced class situation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Code Block 33: Setting Metrics</span></span>
<span id="cb39-2"></span>
<span id="cb39-3">fraud_metrics <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;">metric_set</span>(roc_auc, accuracy, sensitivity, specificity, j_index)</span></code></pre></div>
</div>
</section>
<section id="creating-the-workflow_set" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-workflow_set">7.5. Creating the workflow_set</h2>
<p>Next, I create the workflow_set. This is where tidymodels shines. I feed it the 4 recipes and the 4 engines, and it makes all the permutations to fit. (As I mentioned earlier, you can manually create a workflow_set where you assign specific recipes to specific models, but here all recipes work with all models.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Code block 34:</span></span>
<span id="cb40-2">wf_set_tune <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb40-4">    <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">plain =</span> recipe_plain,</span>
<span id="cb40-5">         <span class="co" style="color: #5E5E5E;"># rose = recipe_rose,</span></span>
<span id="cb40-6">         <span class="co" style="color: #5E5E5E;"># smote = recipe_smote,</span></span>
<span id="cb40-7">         <span class="at" style="color: #657422;">down =</span> recipe_down),</span>
<span id="cb40-8">    <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">glmnet =</span> glmnet_spec,</span>
<span id="cb40-9">      <span class="at" style="color: #657422;">lightgmb =</span> lightgbm_spec,</span>
<span id="cb40-10">      <span class="co" style="color: #5E5E5E;">#rf = rf_spec,</span></span>
<span id="cb40-11">      <span class="at" style="color: #657422;">logreg =</span> logreg_spec</span>
<span id="cb40-12">     )</span>
<span id="cb40-13">  )</span></code></pre></div>
</div>
</section>
<section id="fitting-all-the-models" class="level2">
<h2 class="anchored" data-anchor-id="fitting-all-the-models">7.6. Fitting all the models</h2>
<p>I now run these 16 models. I pass <code>workflow_map()</code> the workflow_set from Code Block 34. The next parameter is what type of fitting you want to do. Here, I used <code>tune_grid</code> and had it generate 6 grid points. For the models that don’t require hyperparameter tuning, the function defaults to <code>fit_resamples</code> instead. The acceptable types of fitting functions are found <a href="https://workflowsets.tidymodels.org/reference/workflow_map.html">here</a>. It is important to note that you can only use fitting methods that operate on folds; you cannot pass <code>workflow_map()</code> the entire train or test set and have it work.</p>
<p>I’m using the verbose option when fitting. This shows how long each model takes. When I first started, I had no idea how long various models would take. I’m running this on an older, low-end laptop (Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz 2.71 GHz, 32 GB RAM).</p>
<p>I would recommend 10 folds rather than 3 if you have the time. Similarly, 6 grids points is a very low number.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># Code block 35: </span></span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">345</span>)</span>
<span id="cb41-3">tune_results <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb41-4">  <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb41-5">    wf_set_tune,</span>
<span id="cb41-6">    <span class="st" style="color: #20794D;">"tune_grid"</span>,</span>
<span id="cb41-7">    <span class="at" style="color: #657422;">resamples =</span> fraud_folds,</span>
<span id="cb41-8">    <span class="at" style="color: #657422;">grid =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb41-9">    <span class="at" style="color: #657422;">metrics =</span> fraud_metrics,</span>
<span id="cb41-10">    <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb41-11">    )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>i 1 of 6 tuning:     plain_glmnet</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 1 of 6 tuning:     plain_glmnet (1m 14.9s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 2 of 6 tuning:     plain_lightgmb</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i Creating pre-processing data to finalize unknown parameter: mtry</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 2 of 6 tuning:     plain_lightgmb (2m 24.5s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i   No tuning parameters. `fit_resamples()` will be attempted</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 3 of 6 resampling: plain_logreg</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 3 of 6 resampling: plain_logreg (10.6s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 4 of 6 tuning:     down_glmnet</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 4 of 6 tuning:     down_glmnet (6.4s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 5 of 6 tuning:     down_lightgmb</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i Creating pre-processing data to finalize unknown parameter: mtry</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 5 of 6 tuning:     down_lightgmb (1m 48.9s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i   No tuning parameters. `fit_resamples()` will be attempted</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 6 of 6 resampling: down_logreg</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 6 of 6 resampling: down_logreg (2.8s)</code></pre>
</div>
</div>
</section>
<section id="evaluating-the-models" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-the-models">7.7. Evaluating the models</h2>
<p>I viewed the results of the fitting as both a table (Code Block 36) and graphically using <code>autoplot()</code>. The default autoplot legend is unclear, so you’ll want to do both, as I did. The legend doesn’t label by recipe (only that a recipe was used for preprocessing) and folds related categories into one. Here you see that elastic net logistic regression and logistic regression are both labeled log_reg.</p>
<p>The object we have now, <code>tune_results</code>, is incredibly large and complicated. Using View() on it has crashed RStudio for me. This object should be interacted with through helper functions. For more information about this, please see my <a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html">other tutorial on tidymodels</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;">#|label: rank-results-table</span></span>
<span id="cb58-2"><span class="co" style="color: #5E5E5E;"># Code Block 35</span></span>
<span id="cb58-3"><span class="fu" style="color: #4758AB;">rank_results</span>(tune_results, <span class="at" style="color: #657422;">rank_metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 70 × 9
   wflow_id      .config    .metric  mean std_err     n preprocessor model  rank
   &lt;chr&gt;         &lt;chr&gt;      &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;
 1 down_lightgmb Preproces… accura… 0.951 0.00267     3 recipe       boos…     1
 2 down_lightgmb Preproces… j_index 0.903 0.00558     3 recipe       boos…     1
 3 down_lightgmb Preproces… roc_auc 0.989 0.00211     3 recipe       boos…     1
 4 down_lightgmb Preproces… sensit… 0.952 0.00614     3 recipe       boos…     1
 5 down_lightgmb Preproces… specif… 0.951 0.00269     3 recipe       boos…     1
 6 down_lightgmb Preproces… accura… 0.937 0.00383     3 recipe       boos…     2
 7 down_lightgmb Preproces… j_index 0.860 0.0132      3 recipe       boos…     2
 8 down_lightgmb Preproces… roc_auc 0.982 0.00259     3 recipe       boos…     2
 9 down_lightgmb Preproces… sensit… 0.923 0.00947     3 recipe       boos…     2
10 down_lightgmb Preproces… specif… 0.937 0.00381     3 recipe       boos…     2
# ℹ 60 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># Code Block 36</span></span>
<span id="cb60-2"><span class="fu" style="color: #4758AB;">autoplot</span>(tune_results, <span class="at" style="color: #657422;">rank_metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>, <span class="at" style="color: #657422;">select_best =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 11: Performance of various models"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/rank-results-table-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The best performing model / recipe pair by j-index is the downsampled lightgmb (<code>down_lightgmb</code>).</p>
<p>To see how this model/recipe performs across tuning parameters, we can use <code>extract_workflow_set_result</code> and <code>autoplot</code>. If you wanted to refine the hyperparameters more, you could use these results to narrow the search parameters to areas with the best performance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Code block 37: </span></span>
<span id="cb61-2"></span>
<span id="cb61-3">results_down_gmb <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb61-4">  <span class="fu" style="color: #4758AB;">extract_workflow_set_result</span>(<span class="st" style="color: #20794D;">"down_lightgmb"</span>)</span>
<span id="cb61-5"><span class="fu" style="color: #4758AB;">autoplot</span>(results_down_gmb) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb61-6">  <span class="fu" style="color: #4758AB;">theme_pander</span>(<span class="dv" style="color: #AD0000;">8</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb61-7">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 12: Perfomance of different hyperparameters"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/gmb-hyperparameters-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this case, I’m just going to extract the best set of hyperparameters and move on. This is done using the <code>extract_workflow_set_result</code> and <code>select_best(metric = "j_index")</code>. There are other ways to select the best hyperparameters. The list of selectors is found <a href="https://tune.tidymodels.org/reference/show_best.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># Code block 38: </span></span>
<span id="cb62-2">best_hyperparameters <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb62-3">  <span class="fu" style="color: #4758AB;">extract_workflow_set_result</span>(<span class="st" style="color: #20794D;">"down_lightgmb"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb62-4">  <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>)</span></code></pre></div>
</div>
<p>And here I look at the selected hyperparameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># Code block 39: </span></span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;">print</span>(best_hyperparameters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 7
   mtry trees min_n tree_depth  learn_rate loss_reduction .config             
  &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;int&gt;       &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;               
1     9  1255     3          7 0.000000608  0.00000000404 Preprocessor1_Model2</code></pre>
</div>
</div>
<p>Now, I am going to use the convenience functions finalize_workflow() and last_fit() to add <a href="https://tune.tidymodels.org/reference/finalize_model.html">the best hyperparameters to the workflow</a>, <a href="https://tune.tidymodels.org/reference/last_fit.html">train the model/recipe on the entire training set, and then predict on the entire test set</a>. There is a lot of stuff going on here at once (Code Block 40)!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># Code Block 40: Validating the model with the test data</span></span>
<span id="cb65-2">validation_results <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-3">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">"down_lightgmb"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-4">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyperparameters) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb65-5">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span>  data_split, <span class="at" style="color: #657422;">metrics =</span> fraud_metrics)</span></code></pre></div>
</div>
<p>Lastly, I look at the metrics and ROC curve for the test data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># Code Block 41: Looking at the validation metrics from the test data.</span></span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;">collect_metrics</span>(validation_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 4
  .metric     .estimator .estimate .config             
  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy    binary         0.959 Preprocessor1_Model1
2 sensitivity binary         0.934 Preprocessor1_Model1
3 specificity binary         0.959 Preprocessor1_Model1
4 j_index     binary         0.893 Preprocessor1_Model1
5 roc_auc     binary         0.984 Preprocessor1_Model1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">validation_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb68-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb68-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(is_fraud, .pred_1) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb68-4">  <span class="fu" style="color: #4758AB;">autoplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb68-5">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Figure 13: ROC Curve"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial_files/figure-html/model-performance-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Just for fun, let’s see how much money this model would have save our credit card company. I’m going to assume the cost of fraud is the cost of the transaction. I calculate the total cost of all the fraudulent transactions in the test dataset. I then calculate the cost based on the model predictions. Any truly fraudulent transactions that were not caught, cost the value of the transaction. Legitimate transactions that were marked as fraud were assigned $0 cost. This likely isn’t true. There is the cost of having to deal with customers calling because the transaction was declined or the cost sending out texts for suspicious transactions, but this cost is very small relative to the cost of a fraudulent transaction. I got the idea from this paper: Zhang, D. , Bhandari, B. and Black, D. (2020) Credit Card Fraud Detection Using Weighted Support Vector Machine. <em>Applied Mathematics</em>, <strong>11</strong>, 1275-1291. doi: <a href="https://doi.org/10.4236/am.2020.1112087">10.4236/am.2020.1112087</a>.</p>
<p>I’m using the list method to access predictions, but you could also use <code>collect_predictions()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="co" style="color: #5E5E5E;">#code block 42: Calculating how much fraud cost the company</span></span>
<span id="cb69-2"></span>
<span id="cb69-3">val <span class="ot" style="color: #003B4F;">&lt;-</span> validation_results[[<span class="dv" style="color: #AD0000;">5</span>]][[<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb69-4"></span>
<span id="cb69-5">val <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">conf_mat</span>(<span class="at" style="color: #657422;">truth =</span> is_fraud, <span class="at" style="color: #657422;">estimate =</span> .pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Truth
Prediction     1     0
         1   428  3467
         0    30 80977</code></pre>
</div>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">val <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb71-2">  <span class="co" style="color: #5E5E5E;">#I'm going to bind this to the test data and I want unique names</span></span>
<span id="cb71-3">  val <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">is_fraud2  =</span> is_fraud) </span>
<span id="cb71-4"></span>
<span id="cb71-5">cost <span class="ot" style="color: #003B4F;">&lt;-</span> test_data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb71-6">  <span class="fu" style="color: #4758AB;">cbind</span>(val)</span>
<span id="cb71-7"></span>
<span id="cb71-8">cost <span class="ot" style="color: #003B4F;">&lt;-</span> cost <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb71-9">  <span class="fu" style="color: #4758AB;">select</span>(is_fraud, amt_log, <span class="at" style="color: #657422;">pred =</span> .pred_class, is_fraud2) </span>
<span id="cb71-10"></span>
<span id="cb71-11">cost <span class="ot" style="color: #003B4F;">&lt;-</span> cost <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb71-12">  <span class="co" style="color: #5E5E5E;">#cost for missing fraud in prediction</span></span>
<span id="cb71-13">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cost_act =</span> <span class="fu" style="color: #4758AB;">ifelse</span>((is_fraud <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb71-14">                              pred <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>), amt_log, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb71-15">  <span class="co" style="color: #5E5E5E;">#cost of all fraud</span></span>
<span id="cb71-16">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">cost_potential =</span> <span class="fu" style="color: #4758AB;">ifelse</span>((is_fraud <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>), amt_log, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb71-17"></span>
<span id="cb71-18">missed_fraud_cost <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">exp</span>(cost<span class="sc" style="color: #5E5E5E;">$</span>cost_act)), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb71-19">all_fraud_cost <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">exp</span>(cost<span class="sc" style="color: #5E5E5E;">$</span>cost_potential)), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb71-20"></span>
<span id="cb71-21">savings <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">round</span>((<span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">exp</span>(cost<span class="sc" style="color: #5E5E5E;">$</span>cost_act)) <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">exp</span>(cost<span class="sc" style="color: #5E5E5E;">$</span>cost_potential))), <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<p>My model had dramatic costs savings for the imaginary credit card company! The total dollar cost of all the fraudulent transactions is 3.207071^{5}, while the value of the missed fraud cases was 8.58126^{4}. The losses from the model were 27 % of the potential losses.</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Credit {Card} {Fraud:} {A} {Tidymodels} {Tutorial}},
  date = {2023-04-11},
  url = {https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Credit Card Fraud: A Tidymodels
Tutorial.”</span> April 11, 2023. <a href="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial">https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>tidymodels</category>
  <category>Machine Learning</category>
  <category>classifiers</category>
  <guid>https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/fraud_tutorial.html</guid>
  <pubDate>Tue, 11 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-11-credit-card-fraud/thumbnail.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>A Tidymodels Tutorial</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html</link>
  <description><![CDATA[ 



<p>As I’ve started working on more complicated machine learning projects, I’ve leaned into the tidymodels approach. Tidymodels is a highly modular approach, and I felt it reduced the number of errors, especially when evaluating many machine models and different preprocessing steps. (This is, in fact, a stated goal of the tidymodels ecosystem.)</p>
<p>Throughout this tutorial, I will use the word “procedure” to describe a set of steps to go from data to final predictions. I’m doing this because tidymodels uses the word workflow for specific types of objects and functions. It would be too confusing to use workflow to also describe the process/procedure.</p>
<p>But the tidymodels ecosystem can also be very confusing. There are several component packages in tidymodels. While it is easy to explain what a recipe object (from the recipe package) does, it became increasingly difficult for me to name and describe the objects I was creating as I started building more sophisticated machine-learning procedures. And I found it even more confusing that simple and complex procedures, while going through the same basic steps (preprocess, train, evaluate, predict), created objects with different structures and data within them. I found it confusing that <code>fit</code>, <code>last_fit</code>, <code>fit_resamples</code>, etc., did not all produce objects that contained the same information and could be acted on by the same functions. In my first attempt at using <code>last_fit()</code>, I ended up scrapping the entire ML section and redoing it with <code>fit()</code>/<code>predict()</code> because I couldn’t figure out how to get the predictions out of the object created by <code>last_fit()</code>.</p>
<p>Adding to my woes was the fact that attempting to view/print/ examine these objects, especially in notebook environments, often caused the entire project to time out. RStudio generally handles these objects more gracefully, but I’ve also crashed it hard. It also isn’t consistent whether an object will lock-up RStudio or not. Once RStudio has locked up, restarting the program leads to an increasing number of freezes/locking up, until the computer is restarted.</p>
<p>I’ve also manually numbered my code blocks and used that for referencing. I believe it is possible to hyperlink code chunks in Quarto, but I plan to replicate this project in an online notebook environment where that isn’t possible. The manual numbering will make it easier to cross-reference the two. I found online notebooks really did not like displaying many tidymodels objects. That’s also why there are timers around many of the display calls.</p>
<p>So here I’m going to go through three different procedures for modeling. I will compare and contrast the objects created as we move through the different procedures.</p>
<section id="loading-libraries-and-data" class="level1">
<h1>Loading libraries and Data</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Code Block 1: Loading Libraries</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># loading tidyverse/ tidymodels packages</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;">#core tidyverse</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidymodels) <span class="co" style="color: #5E5E5E;"># tidymodels framework</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Modeling</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(glmnet) <span class="co" style="color: #5E5E5E;"># elastic net logistic regression</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">library</span>(themis) <span class="co" style="color: #5E5E5E;"># provides up/down-sampling methods for the data</span></span></code></pre></div>
</div>
<p>Details about how the data was processed can be found at my Credit Card fraud tutorial.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Code Block 2- loading the processed data</span></span>
<span id="cb2-2">fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_rds</span>(<span class="st" style="color: #20794D;">"fraud_processed.rds"</span>)</span>
<span id="cb2-3">fraud<span class="sc" style="color: #5E5E5E;">$</span>category <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>category)</span></code></pre></div>
</div>
<p>Tidymodels expects the outcome to be a factor. It also treats <a href="https://community.rstudio.com/t/tidymodels-which-factor-level-is-the-default-positive-class/100428">the first level as the event</a>. So, Code Block 3 handles these details.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Code Block 3: outcome to factor and relevel</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># in tidymodels, outcome should be a factor</span></span>
<span id="cb3-3">fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">levels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0" "1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#first level is the event in tidymodels, so we need to reorder</span></span>
<span id="cb5-2">fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">relevel</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud, <span class="at" style="color: #657422;">ref =</span> <span class="st" style="color: #20794D;">"1"</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">levels</span>(fraud<span class="sc" style="color: #5E5E5E;">$</span>is_fraud)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "0"</code></pre>
</div>
</div>
</section>
<section id="resampling-via-rsample" class="level1">
<h1>Resampling via rsample</h1>
<p>The rsample package is used to <a href="https://rsample.tidymodels.org/reference/index.html">create splits and folds</a> from your data. Here I use <a href="https://rsample.tidymodels.org/reference/initial_split.html"><code>initial_split()</code></a> to create a testing and training dataset. The resulting object is called an <code>rsplit</code> object and contains the original data and information about whether a record goes to testing or training. This object is not a flat dataframe but rather a nested list. The functions <code>testing()</code> and <code>training()</code> are used to create the appropriate tibbles for fitting. Other functions are available to <a href="https://rsample.tidymodels.org/reference/tidy.rsplit.html">visualize</a> or <a href="https://rsample.tidymodels.org/articles/rsample.html">manipulate</a> the <code>rsplit</code> object. Typing <code>data_split</code> in RStudio produces a high-level overview of the object:</p>
<p><code>&lt;Training/Testing/Total&gt;</code></p>
<p><code>&lt;254705/84902/339607&gt;</code></p>
<p>I will also create some cross-validation folds using <code>vfold_cv()</code>. The resulting object is an <code>rset</code> object, which is a collection of <code>rsplit</code> objects (which <a href="https://rsample.tidymodels.org/reference/get_rsplit.html">can be retrieved</a> from the <code>rset</code> object), The same methods to view or manipulate the <code>rsplit</code> object work on the rset object.</p>
<p>Both functions let you sample based on strata. This is highly recommended, especially for classification problems with imbalanced classes. The sample is performed separately on each class, which assures your testing/training/folds contain representative data.</p>
<p>I did notice that the typo “stata” didn’t kick up any sort of error. In fact, you can include any number of named parameters that don’t exist, and you won’t get an error. Positional matching shouldn’t apply if you are using named parameters, but for what it is worth, <code>initial_split(fraud, prop = 0.75, mouse = is_fraud)</code> and <code>initial_split(fraud, mouse = is_fraud, prop = 0.75 )</code> both execute without complaint. And they both produce stratified samples, which is weird. Don’t rely on this and do check that your splits and folds are properly stratified.</p>
<p>Setting the random seed before running these functions is highly recommended for reproducibility.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Code Block 4 : Train/Test Splits &amp; CV Folds </span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># Split the data into a test and training set</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># following https://www.tidymodels.org/start/recipes/#recipe</span></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">222</span>)</span>
<span id="cb7-5">data_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">initial_split</span>(fraud, <span class="at" style="color: #657422;">prop =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #657422;">strata =</span> is_fraud)     </span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># Create data frames for the two sets:</span></span>
<span id="cb7-8">train_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">training</span>(data_split)</span>
<span id="cb7-9">test_data  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">testing</span>(data_split)</span>
<span id="cb7-10"></span>
<span id="cb7-11">start_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb7-12"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb7-13">fraud_folds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vfold_cv</span>(train_data, <span class="at" style="color: #657422;">v =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">strata =</span> is_fraud)</span>
<span id="cb7-14">end_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb7-15"></span>
<span id="cb7-16">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb7-17">fraud_folds </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#  3-fold cross-validation using stratification 
# A tibble: 3 × 2
  splits                 id   
  &lt;list&gt;                 &lt;chr&gt;
1 &lt;split [169803/84902]&gt; Fold1
2 &lt;split [169803/84902]&gt; Fold2
3 &lt;split [169804/84901]&gt; Fold3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Making folds: "</span>, end_time <span class="sc" style="color: #5E5E5E;">-</span> start_time))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Making folds:  0.325064182281494"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Printing fraud_folds: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Printing fraud_folds:  0.0566380023956299"</code></pre>
</div>
</div>
</section>
<section id="preprocessing-with-recipes" class="level1">
<h1>Preprocessing with recipes</h1>
<p>The <a href="https://recipes.tidymodels.org/">recipes package</a> bundles the formula, data, and feature engineering steps into a recipe object.</p>
<p>I set the formula and training data here and then performed preprocessing/ feature engineering steps. All the feature engineering steps have the form <code>step_*()</code>. I chose the feature engineering steps based on the <a href="https://www.tmwr.org/pre-proc-table.html">Appendix</a> from the <a href="https://www.tmwr.org/">Tidy Modeling with R</a> book, which lists models and which feature engineering steps are required or recommended.</p>
<p>I want to compare using the full dataset with a downsampled dataset with balanced classes, so I also created a downsample recipe. This section is where the strengths of the modularity of tidymodels start to shine. You can create several related recipes off of a base recipe. For complex projects where many preprocessing steps or different formulas are tested, decoupling the recipe step from the fitting reduces the errors that might arise from creating multiple combinations.</p>
<p>The recipe is built with the training dataset. This data is used to estimate some of the values of the recipe steps, such as the number of dummy variables created, but the recipe isn’t “trained” yet. The recipe will be applied to the training data in later steps, and the necessary values for feature engineering will be calculated and stored. These values will be used on subsequent datasets, such as the testing set. This eliminates a possible source of data leakage. For example, using an imputation step based on the mean should use the mean of the training data and not the entire dataset (which would have information about the testing set within).</p>
<p>There are a variety of functions, <a href="https://recipes.tidymodels.org/reference/index.html">such as <code>prep()</code>, <code>bake()</code>, and <code>juice()</code></a> which can be used to apply the recipe object to datasets. These can be used in the machine learning procedures, but here we will use the workflow procedure, which handles these steps automatically. These functions are found in some tutorials online, so it is important to be aware of them. You can also use these functions to preprocess data for reasons other than modeling.</p>
<p>The recipe object is another <a href="https://recipes.tidymodels.org/reference/recipe.html">complicated object and contains a variety of objects</a>. RStudio provides a high-level summary when you view this object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Code Block 5: recipes</span></span>
<span id="cb13-2">recipe_plain <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">recipe</span>(is_fraud <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> train_data) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) </span>
<span id="cb13-7"></span>
<span id="cb13-8">recipe_down <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb13-9">recipe_plain <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">step_downsample</span>(is_fraud)</span>
<span id="cb13-11"></span>
<span id="cb13-12">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb13-13">recipe_down</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Recipe ──────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:   1
predictor: 8</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Operations </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Dummy variables from: all_nominal_predictors()</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Centering and scaling for: all_numeric_predictors()</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Zero variance filter on: all_predictors()</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>• Down-sampling based on: is_fraud</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Printing recipe_down: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Printing recipe_down:  0.300902128219604"</code></pre>
</div>
</div>
</section>
<section id="defining-the-model-with-parsnip" class="level1">
<h1>Defining the model with parsnip</h1>
<p>The <a href="https://parsnip.tidymodels.org/">parsnip package</a> handles the modeling. However, many modeling functions and objects arise from other tidymodels packages, not parsnip, as I will discuss later. This confusion can lead to difficulties in handling fit and predictions.</p>
<p>The type of problem being solved and the method to solve the problem are often bundled together in parsnip, as I’ve done here. I set the type of problem with <a href="https://parsnip.tidymodels.org/reference/logistic_reg.html"><code>logistic_reg()</code></a>. A list of types and engines can be found <a href="https://www.tidymodels.org/find/parsnip/">here</a>. Parameters can be set here to pass to the underlying engine later. The parsnip package is designed to create a harmonized interface to the various independent engines/packages that have been created in R, so you can set the parameters even without choosing an engine/package. <a href="https://parsnip.tidymodels.org/">For example</a>, all tree-based models will use “trees” for the number of trees. I wanted to tune the hyperparameters of the elastic net logistic regression. This can be done by setting the parameter equal to tune(). I’m not going to get into the <a href="https://tune.tidymodels.org/index.html">tune package</a> in detail, but it contains a variety of functions related to tuning hyperparameters. (This is pretty much the <a href="https://tune.tidymodels.org/">overview statement on the package page</a>, which we will see later is deceptively incomplete.) These are passed to functions of other packages in Tidymodels (e.g., parsnip) and are not really stand-alone functions.</p>
<p>You use <code>set_engine()</code> to specify the particular package you want to use to solve the problem (e.g., glm).</p>
<p>The objects created by these functions don’t have a simple name like the objects created by rsample and recipe do. The function that sets the type of problem creates “A model specification object,” and the <a href="https://parsnip.tidymodels.org/reference/set_engine.html"><code>set_engine()</code></a> creates “An updated model specification.”</p>
<p>RStudio will again create a high-level summary of these objects, but using <code>View()</code> reveals that they are a complicated nested list. I don’t think there should be a need to extract components of this object as there might be for some of the earlier objects.</p>
<p>At this point, you can complete your machine learning procedure entirely within parsnip. Various fitting and predicting functions are available. However, I’m going to continue to the workflows package, which will allow us to create bundles of models and fits.</p>
<p>I should note that these are not necessarily the best choices for this problem. I chose logistic regression and downsampling because they were fast, not because they were optimal.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># Code Block 6: Setting engines</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;"># this is the standard logistic regression</span></span>
<span id="cb28-4">logreg_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glm"</span>)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;"># elastic net regularization of logistic regression</span></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;"># this has 2 hyperparameters that we will tune</span></span>
<span id="cb28-10">glmnet_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb28-11">  <span class="fu" style="color: #4758AB;">logistic_reg</span>(<span class="at" style="color: #657422;">penalty =</span> <span class="fu" style="color: #4758AB;">tune</span>(),</span>
<span id="cb28-12">               <span class="at" style="color: #657422;">mixture =</span> <span class="fu" style="color: #4758AB;">tune</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb28-13">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb28-14"></span>
<span id="cb28-15">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb28-16">glmnet_spec </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Logistic Regression Model Specification (classification)

Main Arguments:
  penalty = tune()
  mixture = tune()

Computational engine: glmnet </code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Printing glmnet_spec: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Printing glmnet_spec:  0.00784516334533691"</code></pre>
</div>
</div>
</section>
<section id="creating-a-metrics-set-with-yardstick" class="level1">
<h1>Creating a metrics set with yardstick</h1>
<p>The <a href="https://yardstick.tidymodels.org/">yardstick package</a> contains the functions to calculate a variety of metrics such as sensitivity, specificity, etc. I bundled a couple of metrics together as a metrics set, which I will pass to other functions later. The metrics set fraud_metrics contains some metrics that require probabilities, while fraud_metrics_hard only includes accuracy, which uses the hard classifications. These two metric sets will produce different results from fitting and predicting operations, which I will show you later.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Code Block 7: Setting Metrics</span></span>
<span id="cb32-2">fraud_metrics <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">metric_set</span>(roc_auc,</span>
<span id="cb32-3">                            accuracy, sensitivity, specificity, j_index)</span>
<span id="cb32-4"></span>
<span id="cb32-5">fraud_metrics_hard <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">metric_set</span>(accuracy)</span>
<span id="cb32-6"></span>
<span id="cb32-7">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb32-8">fraud_metrics </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 3
  metric      class        direction
  &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;    
1 roc_auc     prob_metric  maximize 
2 accuracy    class_metric maximize 
3 sensitivity class_metric maximize 
4 specificity class_metric maximize 
5 j_index     class_metric maximize </code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb34-2"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Printing fraud_metrics: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Printing fraud_metrics:  0.0229921340942383"</code></pre>
</div>
</div>
</section>
<section id="bundling-everything-together-with-workflows" class="level1">
<h1>Bundling everything together with workflows</h1>
<p>In my opinion, the <a href="https://workflows.tidymodels.org/">workflows</a> and <a href="https://workflowsets.tidymodels.org/index.html">workflowset</a> packages are the most powerful part of the tidymodels system. As I’ve worked through the procedure, I’ve created many objects: datasets with rsample, recipes, and models. I’ve said that modularity is an advantage, but it might be challenging to keep track of which pieces go together when faced with so many different objects. Workflows allow you to bundle your preprocessing and modeling objects together. (In theory, you can also bundle postprocessing objects, but this functionality is not available yet.)</p>
<p>Workflowsets allow you to bundle many workflows into a single object and pass them to fitting or predicting functions as a group. I wanted to evaluate 16 different model/preprocessing pairs in the credit card fraud tutorial. Constructing that many workflows leads to many opportunities for typos or copy/paste errors. But with <code>workflow_set()</code> you can pass the four recipes and the four model specification objects, and the function will create all 16 combinations. If you don’t want all combinations, you can <a href="https://www.tmwr.org/workflow-sets.html">manually construct a workflow_set where you set the combinations you need</a>.</p>
<p>Here I created a simple workflow that contains a single recipe and model specification and a simple workflow_set that contains four workflows.</p>
<p>When called, the RStudio again displays high-level information for the workflow and the workflow_set. Using <code>View()</code> simple workflow shows a nested list structure. Using <code>View()</code> on the workflow_set, even the small one here, crashes RStudio for me.</p>
<p>It is important to keep track of whether you are using workflows or workflowsets because they have different helper functions to extract the final information from the fits.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Code block 8: Create simple workflow to Compare Fit/Predict and last_fit</span></span>
<span id="cb36-2">wf_simple <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;">add_recipe</span>(recipe_plain) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;">add_model</span>(logreg_spec)</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;"># showing high-level info</span></span>
<span id="cb36-8">wf_simple</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: logistic_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_dummy()
• step_normalize()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────
Logistic Regression Model Specification (classification)

Computational engine: glm </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Code block 9: creating a workflow set</span></span>
<span id="cb38-2">wf_set_tune <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">workflow_set</span>(</span>
<span id="cb38-4">    <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">plain =</span> recipe_plain, <span class="at" style="color: #657422;">down =</span> recipe_down),</span>
<span id="cb38-5">    <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">glmnet =</span> glmnet_spec, <span class="at" style="color: #657422;">logreg =</span> logreg_spec)</span>
<span id="cb38-6">  )</span>
<span id="cb38-7"></span>
<span id="cb38-8">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb38-9">wf_set_tune <span class="co" style="color: #5E5E5E;">#don't call View()!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A workflow set/tibble: 4 × 4
  wflow_id     info             option    result    
  &lt;chr&gt;        &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    
1 plain_glmnet &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;
2 plain_logreg &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;
3 down_glmnet  &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;
4 down_logreg  &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Printing wf_set_tune: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Printing wf_set_tune:  0.0644128322601318"</code></pre>
</div>
</div>
</section>
<section id="fitting-fitpredict-vs.-last_fit" class="level1">
<h1>Fitting: <code>fit()</code>/<code>predict()</code> vs.&nbsp;<code>last_fit()</code></h1>
<p>I’m going to show you the difference between fit()/ predict() and last_fit() using the simple workflow. These are two different procedures that should contain the same results (a fitted model on the training data and the predictions from that model for the test data).</p>
<section id="fitpredict" class="level2">
<h2 class="anchored" data-anchor-id="fitpredict"><code>fit()</code>/<code>predict()</code></h2>
<p>First, I fit the model on the training data to get the fit and then I pass that fit and the test data to <code>predict()</code> to get the predictions for test.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Code block 10: Run fit/ predict on workflow</span></span>
<span id="cb42-2">wflow_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fit</span>(wf_simple, <span class="at" style="color: #657422;">data =</span> train_data)</span>
<span id="cb42-3">wflow_predict <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(wflow_fit, <span class="at" style="color: #657422;">new_data =</span> test_data)</span>
<span id="cb42-4">wflow_predict2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(wflow_fit, <span class="at" style="color: #657422;">new_data =</span> test_data, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span> )</span></code></pre></div>
</div>
<p>What comes out of predict is super simple to understand. It is a list of predictions. No complicated nested list objects here. If I want probabilities instead of hard classification, I pass <code>predict()</code> the argument <code>type = "prob"</code> to get the probabilities instead.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># Code block 11:  Examine the output of predict</span></span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;">head</span>(wflow_predict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 1
  .pred_class
  &lt;fct&gt;      
1 0          
2 0          
3 0          
4 0          
5 0          
6 0          </code></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">head</span>(wflow_predict2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
    .pred_1 .pred_0
      &lt;dbl&gt;   &lt;dbl&gt;
1 0.00367     0.996
2 0.00144     0.999
3 0.0000262   1.00 
4 0.00461     0.995
5 0.0000279   1.00 
6 0.00138     0.999</code></pre>
</div>
</div>
<p>What about our model? Maybe I want model coefficients or to see which features are most important. There is a lot of information here, but it isn’t very well structured. Again, this is a nested list. RStudio is displaying this nicely and the details can be seen using <code>View()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># Code block 12: Examine the outcome of fit </span></span>
<span id="cb47-2">wflow_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: logistic_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
3 Recipe Steps

• step_dummy()
• step_normalize()
• step_zv()

── Model ───────────────────────────────────────────────────────────────────────

Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)

Coefficients:
            (Intercept)                lat_trans               long_trans  
                7.06537                 -0.10230                 -0.01413  
         distance_miles                      age                     hour  
                0.06526                 -0.26818                 -0.82812  
                weekday                  amt_log     category_food_dining  
               -0.12721                 -1.87149                 -0.00929  
 category_gas_transport     category_grocery_net     category_grocery_pos  
               -0.62772                 -0.29571                 -0.67063  
category_health_fitness            category_home       category_kids_pets  
                0.06286                  0.10517                  0.01683  
      category_misc_net        category_misc_pos   category_personal_care  
               -0.42138                 -0.13380                 -0.05152  
  category_shopping_net    category_shopping_pos          category_travel  
               -0.38932                 -0.16399                  0.18122  

Degrees of Freedom: 254704 Total (i.e. Null);  254684 Residual
Null Deviance:      16570 
Residual Deviance: 11910    AIC: 11950</code></pre>
</div>
</div>
<p>While you can use standard R operations for interacting with lists and nested data to extract the desired information from <code>wflow_fit</code>, it is much easier to use the&nbsp;<a href="https://broom.tidymodels.org/">broom package</a>. Broom is part of the core tidymodels installation, so it does not need to be installed separately. To get the model coefficients and p-values in tibble form, use <code>tidy()</code>. For high-level statistics about the model, use <code>glance()</code>. Just remember that the information you extract from the output of <code>fit()</code> relates to the model as applied to the training data. For information about the model performance as applied to the test data, you need to use the output of <code>predict()</code>. Since this output is only a vector of predictions, you need to bind it to the test dataframe and then perform analysis on the new object.</p>
<p>So it is pretty straightforward to get our model coefficients:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># Code block 13: Summarize wflow_fit with tidy</span></span>
<span id="cb49-2">wflow_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">tidy</span>() <span class="co" style="color: #5E5E5E;">#summarizes information about model components</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 21 × 5
   term                   estimate std.error statistic   p.value
   &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)             7.07       0.0703   101.    0        
 2 lat_trans              -0.102      0.0305    -3.36  7.94e-  4
 3 long_trans             -0.0141     0.0306    -0.462 6.44e-  1
 4 distance_miles          0.0653     0.0318     2.05  4.02e-  2
 5 age                    -0.268      0.0289    -9.27  1.87e- 20
 6 hour                   -0.828      0.0397   -20.9   1.27e- 96
 7 weekday                -0.127      0.0288    -4.41  1.03e-  5
 8 amt_log                -1.87       0.0510   -36.7   2.76e-294
 9 category_food_dining   -0.00929    0.0599    -0.155 8.77e-  1
10 category_gas_transport -0.628      0.0593   -10.6   3.62e- 26
# ℹ 11 more rows</code></pre>
</div>
</div>
<p>Or to get details of the model performance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># Code block 14: model info from wflow_fit with glance</span></span>
<span id="cb51-2">wflow_fit <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">glance</span>() <span class="co" style="color: #5E5E5E;">#reports information about the entire model</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 8
  null.deviance df.null logLik    AIC    BIC deviance df.residual   nobs
          &lt;dbl&gt;   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;       &lt;int&gt;  &lt;int&gt;
1        16568.  254704 -5956. 11953. 12173.   11911.      254684 254705</code></pre>
</div>
</div>
</section>
<section id="last_fit" class="level2">
<h2 class="anchored" data-anchor-id="last_fit"><code>last_fit()</code></h2>
<p>So, from the <a href="https://tune.tidymodels.org/reference/last_fit.html">tidymodels webpage</a>, <code>last_fit()</code> is described as “<code>last_fit()</code> emulates the process where, after determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set.” (Actually this is from the <code>tune</code> subpage, which is important, though I didn’t realize it.)</p>
<p>I pass the workflow to <code>last_fit()</code> along with the data split object (with the info about testing and training) and the metrics set. In theory, the result should be the same as from <code>fit()</code>/<code>predict()</code> above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># Code block 15: Using lastfit() in hard classifier mode</span></span>
<span id="cb53-2">last_fit_results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">last_fit</span>(wflow_fit, data_split, <span class="at" style="color: #657422;">metrics =</span> fraud_metrics_hard)</span></code></pre></div>
</div>
<p>So, I look at the results just as I did with predict in Code Block 11. And RStudio sometimes locks up. Other times, it produces a high-level overview as expected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># Code block 16: creating a workflow set</span></span>
<span id="cb54-2">start_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb54-3"><span class="fu" style="color: #4758AB;">head</span>(last_fit_results) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Resampling results
# Manual resampling 
# A tibble: 1 × 6
  splits                 id            .metrics .notes   .predictions .workflow 
  &lt;list&gt;                 &lt;chr&gt;         &lt;list&gt;   &lt;list&gt;   &lt;list&gt;       &lt;list&gt;    
1 &lt;split [254705/84902]&gt; train/test s… &lt;tibble&gt; &lt;tibble&gt; &lt;tibble&gt;     &lt;workflow&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">end_time_display <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"last_fit_results: "</span>, end_time_display <span class="sc" style="color: #5E5E5E;">-</span> start_time_display))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "last_fit_results:  0.0769269466400146"</code></pre>
</div>
</div>
<p>So how to get the predictions out? According to the <a href="https://tune.tidymodels.org/reference/last_fit.html">manual page for <code>last_fit()</code></a>, the output is “A single row tibble that emulates the structure of <a href="https://tune.tidymodels.org/reference/fit_resamples.html">fit_resamples()</a>. However, a list column called .workflow is also attached with the fitted model (and recipe, if any) that used the training set.” I also see that <code>last_fit()</code> is actually from the tune package and not from parsnip as I expected. Nothing I’m doing here involves tuning hyperparameters at all. I expected that is was a parsnip object both thematically and because you interact with <code>last_fit()</code> using <code>extract_fit_parsnip()</code>, see Code Block 23.</p>
<p>Looking <code>fit_resamples()</code> isn’t very helpful for answering this question. (Oh, but it is. It just took me another few paragraphs of writing to realize it.)</p>
<p>I did find a Stackoverflow discussion that provided the answer in their code: <code>last_fit1_pred &lt;- last_fit1[[5]][[1]]</code></p>
<p>That’s not very straightforward!</p>
<p>Pull out the predictions from last_fit_pred.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># Code block 17: extracting predictions from last_fit</span></span>
<span id="cb58-2">last_fit_pred <span class="ot" style="color: #003B4F;">&lt;-</span> last_fit_results[[<span class="dv" style="color: #AD0000;">5</span>]][[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
</div>
<p>Look at the head() of this object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># Code block 18: Examine the outcome of lastfit by head</span></span>
<span id="cb59-2"><span class="fu" style="color: #4758AB;">head</span>(last_fit_pred)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  .pred_class  .row is_fraud .config             
  &lt;fct&gt;       &lt;int&gt; &lt;fct&gt;    &lt;chr&gt;               
1 0               1 0        Preprocessor1_Model1
2 0               2 0        Preprocessor1_Model1
3 0               8 0        Preprocessor1_Model1
4 0              12 0        Preprocessor1_Model1
5 0              13 0        Preprocessor1_Model1
6 0              14 0        Preprocessor1_Model1</code></pre>
</div>
</div>
<p>Look at the head() of the object from predict().</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># Code block 19: Examine the outcome of predict by head</span></span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;">head</span>(wflow_predict)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 1
  .pred_class
  &lt;fct&gt;      
1 0          
2 0          
3 0          
4 0          
5 0          
6 0          </code></pre>
</div>
</div>
<p>Use <code>identical()</code> to compare the two hard predictions and verify they are the same.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># Code block 20: showing that predict and the predictions in last_fit are the same</span></span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;">identical</span>(last_fit_pred<span class="sc" style="color: #5E5E5E;">$</span>.pred_class, wflow_predict<span class="sc" style="color: #5E5E5E;">$</span>.pred_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Now, let the realization of what all the stuff about the <code>tune</code> package means hit you. We now know the full secrets of <code>last_fit()</code>. It turns out that any of the helper functions for tuning functions from the tune package work on <code>last_fit()</code> because it is a tune function. I don’t find the documentation for either the helper functions or <code>last_fit()</code> make that connection clear. I think that is what the reference to <code>fit_resamples()</code> on the <code>last_fit()</code> page is getting at.</p>
<p><a href="https://www.tmwr.org/">Tidy Modeling with R</a> also contains <a href="https://www.tmwr.org/workflows.html#evaluating-the-test-set">an example of using collect_predictions</a> with <code>last_fit(</code>), but most examples are with tuning functions, so obviously from the tune family. <a href="https://www.tidymodels.org/start/tuning/#final-model">One of the tutorials</a> on the main tidymodels webpage does as well. But in general, extracting predictions from the test data is not demonstrated, just collecting metrics and analyzing model performance. So it is hard to google your way to the answer. This is the kind of situation I’ve struggled with throughout learning tidymodels and part of what motivated me to write this tutorial.</p>
<p>So now I get the predictions the easy way.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># Code block 21: Examine the outcome of lastfit by head</span></span>
<span id="cb65-2"><span class="fu" style="color: #4758AB;">head</span>(last_fit_pred)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  .pred_class  .row is_fraud .config             
  &lt;fct&gt;       &lt;int&gt; &lt;fct&gt;    &lt;chr&gt;               
1 0               1 0        Preprocessor1_Model1
2 0               2 0        Preprocessor1_Model1
3 0               8 0        Preprocessor1_Model1
4 0              12 0        Preprocessor1_Model1
5 0              13 0        Preprocessor1_Model1
6 0              14 0        Preprocessor1_Model1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">last_fit_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_predictions</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 84,902 × 5
   id               .pred_class  .row is_fraud .config             
   &lt;chr&gt;            &lt;fct&gt;       &lt;int&gt; &lt;fct&gt;    &lt;chr&gt;               
 1 train/test split 0               1 0        Preprocessor1_Model1
 2 train/test split 0               2 0        Preprocessor1_Model1
 3 train/test split 0               8 0        Preprocessor1_Model1
 4 train/test split 0              12 0        Preprocessor1_Model1
 5 train/test split 0              13 0        Preprocessor1_Model1
 6 train/test split 0              14 0        Preprocessor1_Model1
 7 train/test split 0              16 0        Preprocessor1_Model1
 8 train/test split 0              17 0        Preprocessor1_Model1
 9 train/test split 0              19 0        Preprocessor1_Model1
10 train/test split 0              25 0        Preprocessor1_Model1
# ℹ 84,892 more rows</code></pre>
</div>
</div>
<p>And can evaluate the model performance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># Code block 22: collecting metrics from lastfit collect_metrics()</span></span>
<span id="cb69-2">last_fit_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">collect_metrics</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 4
  .metric  .estimator .estimate .config             
  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               
1 accuracy binary         0.995 Preprocessor1_Model1</code></pre>
</div>
</div>
<p>And extract the fit. This <code>extract_fit_parsnip()</code> result is an identical parsnip object as the workflow_fit object we got from <code>fit()</code> and can be handled the same way (i.e.&nbsp;via broom). You can refer back to Code Block 13 to see the results are the same. This is perhaps the key takeaway; these larger, more complex objects contain the simpler objects (workflows, parsnip objects) and they should be extracted and handled normally. Understanding this will make understanding how to handle a <code>workflow_set()</code> much easier.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="co" style="color: #5E5E5E;"># Code block 23: extract model coefficients from last_fit() </span></span>
<span id="cb71-2">last_fit_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">extract_fit_parsnip</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">tidy</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 21 × 5
   term                   estimate std.error statistic   p.value
   &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;
 1 (Intercept)             7.07       0.0703   101.    0        
 2 lat_trans              -0.102      0.0305    -3.36  7.94e-  4
 3 long_trans             -0.0141     0.0306    -0.462 6.44e-  1
 4 distance_miles          0.0653     0.0318     2.05  4.02e-  2
 5 age                    -0.268      0.0289    -9.27  1.87e- 20
 6 hour                   -0.828      0.0397   -20.9   1.27e- 96
 7 weekday                -0.127      0.0288    -4.41  1.03e-  5
 8 amt_log                -1.87       0.0510   -36.7   2.76e-294
 9 category_food_dining   -0.00929    0.0599    -0.155 8.77e-  1
10 category_gas_transport -0.628      0.0593   -10.6   3.62e- 26
# ℹ 11 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="fitting-multiple-models-at-once-with-workflowsets" class="level1">
<h1>Fitting multiple models at once with workflowsets</h1>
<p>I created a workflow_set back in Code Block 9. I pass <code>workflow_map()</code> this workflow_set. The next parameter is what type of fitting you want to do. Here, I used <code>tune_grid</code> and had it generate 6 grid points. For the models that don’t require hyperparameter tuning, the function defaults to <code>fit_resamples</code> instead. The acceptable types of fitting functions are found <code>here</code>. It is important to note that you can only use fitting methods that operate on folds; you cannot pass <code>workflow_map()</code> the entire train or test set and have it work. This caused me a bit of frustration when I was learning this because I wanted to compare the results I got from <code>workflow_map()</code> to process all the models simultaneously to what I got when I ran each model/recipe separately. It is implemented this way to encourage proper methodology and avoid data leakage. When evaluating multiple models, you should not be evaluating with the entire dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># Code block 24: fitting the workflow_set </span></span>
<span id="cb73-2">start_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb73-3"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">345</span>)</span>
<span id="cb73-4">tune_results <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb73-5">  <span class="fu" style="color: #4758AB;">workflow_map</span>(</span>
<span id="cb73-6">    wf_set_tune,</span>
<span id="cb73-7">    <span class="st" style="color: #20794D;">"tune_grid"</span>,</span>
<span id="cb73-8">    <span class="at" style="color: #657422;">resamples =</span> fraud_folds,</span>
<span id="cb73-9">    <span class="at" style="color: #657422;">grid =</span> <span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb73-10">    <span class="at" style="color: #657422;">metrics =</span> fraud_metrics,</span>
<span id="cb73-11">    <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,  <span class="co" style="color: #5E5E5E;">#this gives details about how long each model/recipe takes</span></span>
<span id="cb73-12">    <span class="co" style="color: #5E5E5E;">#control = control_grid(save_pred = TRUE) #save pred for each fold or not</span></span>
<span id="cb73-13">  )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>i 1 of 4 tuning:     plain_glmnet</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 1 of 4 tuning:     plain_glmnet (2m 29.8s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i   No tuning parameters. `fit_resamples()` will be attempted</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 2 of 4 resampling: plain_logreg</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 2 of 4 resampling: plain_logreg (10.3s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 3 of 4 tuning:     down_glmnet</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 3 of 4 tuning:     down_glmnet (11s)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i   No tuning parameters. `fit_resamples()` will be attempted</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>i 4 of 4 resampling: down_logreg</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ 4 of 4 resampling: down_logreg (2.7s)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">end_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb84-2">      <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"Total Time for this Set: "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Total Time for this Set: "</code></pre>
</div>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">end_time <span class="sc" style="color: #5E5E5E;">-</span> start_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 2.914408 mins</code></pre>
</div>
</div>
<p>Now we have another complex object. Displaying this object may or may not work. It has never worked for me and I lost a lot of time figuring that out. I followed a <a href="https://juliasilge.com/blog/project-feederwatch/">tutorial from Julia Silge</a> did call that object, and it took me a long time to figure out my code was not timing out/locking up from the fitting, but rather from displaying that object.</p>
<p>So we are going to interact via helper functions. I’m using the other metric set I created back in Code Block 7 . Accuracy is generally a terrible metric for highly imbalanced problems; the model can achieve high accuracy by assigning everything to the majority class. Alternate metrics like <a href="https://en.wikipedia.org/wiki/Sensitivity_and_specificity">sensitivity</a> or <a href="https://en.wikipedia.org/wiki/Youden%27s_J_statistic">j-index</a> are better choices for the imbalanced class situation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># Code Block 25: table of ranked results</span></span>
<span id="cb88-2"><span class="fu" style="color: #4758AB;">rank_results</span>(tune_results, <span class="at" style="color: #657422;">rank_metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 70 × 9
   wflow_id    .config      .metric  mean std_err     n preprocessor model  rank
   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;
 1 down_logreg Preprocesso… accura… 0.749 0.0112      3 recipe       logi…     1
 2 down_logreg Preprocesso… j_index 0.503 0.0102      3 recipe       logi…     1
 3 down_logreg Preprocesso… roc_auc 0.852 0.00742     3 recipe       logi…     1
 4 down_logreg Preprocesso… sensit… 0.754 0.0207      3 recipe       logi…     1
 5 down_logreg Preprocesso… specif… 0.749 0.0114      3 recipe       logi…     1
 6 down_glmnet Preprocesso… accura… 0.750 0.0113      3 recipe       logi…     2
 7 down_glmnet Preprocesso… j_index 0.502 0.00986     3 recipe       logi…     2
 8 down_glmnet Preprocesso… roc_auc 0.852 0.00771     3 recipe       logi…     2
 9 down_glmnet Preprocesso… sensit… 0.753 0.0207      3 recipe       logi…     2
10 down_glmnet Preprocesso… specif… 0.750 0.0115      3 recipe       logi…     2
# ℹ 60 more rows</code></pre>
</div>
</div>
<p>I can visualize this too with the <code>autoplot()</code> function. This is a ggplot type object, so I’m going to throw on a ggtitle. The legend is pretty useless- both the elastic net and regular regression are labeled log_reg (which they are) and the preprocessor is just labeled recipe and not which recipe. This could be cleaned up, but that isn’t really the point of this tutorial.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># Code Block 26: autoplot of best results</span></span>
<span id="cb90-2"><span class="fu" style="color: #4758AB;">autoplot</span>(tune_results, <span class="at" style="color: #657422;">rank_metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>, <span class="at" style="color: #657422;">select_best =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb90-3">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Performance of Different Models"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial_files/figure-html/autoplot-results-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="handling-a-model-with-no-hyperparameters" class="level2">
<h2 class="anchored" data-anchor-id="handling-a-model-with-no-hyperparameters">Handling a model with no hyperparameters</h2>
<p>Normally, we’d want to extract the best recipe/model combination from this set. I’ll do that here. Again, I’m using j-index as my metric and from the output of Code Block 25, we see <code>down_logreg</code> is the best performing model. I extract that workflow from the set of results, and pass it to <code>last_fit(</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># Code Block 27: Validating the best model with the test data</span></span>
<span id="cb91-2">validation_results <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb91-3">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">"down_logreg"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb91-4">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span>  data_split, <span class="at" style="color: #657422;">metrics =</span> fraud_metrics)</span></code></pre></div>
</div>
<p>Now we can use the same helper functions we did when we used <code>last_fit()</code> on the simple workflow, because we are working with a simple workflow! We pulled just the one workflow we wanted out.</p>
<p>You can see now that in addition to the hard classification we got from <code>last_fit()</code> before we also get the probabilities. This is driven by the metrics that make up the metrics set (see the yardstick section for more information). I use these predictions to create the ROC curve as well.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1"><span class="co" style="color: #5E5E5E;"># Code Block 28: Metric for best model with the test data</span></span>
<span id="cb92-2"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">collect_predictions</span>(validation_results))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 7
  id               .pred_1 .pred_0  .row .pred_class is_fraud .config           
  &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;chr&gt;             
1 train/test split  0.552    0.448     1 1           0        Preprocessor1_Mod…
2 train/test split  0.197    0.803     2 0           0        Preprocessor1_Mod…
3 train/test split  0.0329   0.967     8 0           0        Preprocessor1_Mod…
4 train/test split  0.472    0.528    12 0           0        Preprocessor1_Mod…
5 train/test split  0.0254   0.975    13 0           0        Preprocessor1_Mod…
6 train/test split  0.312    0.688    14 0           0        Preprocessor1_Mod…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">validation_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb94-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb94-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(is_fraud, .pred_1) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb94-4">  <span class="fu" style="color: #4758AB;">autoplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb94-5">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"ROC Curve"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial_files/figure-html/best-model-metrics-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="handling-a-model-with-hyperparameters" class="level2">
<h2 class="anchored" data-anchor-id="handling-a-model-with-hyperparameters">Handling a model with hyperparameters</h2>
<p>Suppose the best model was the elastic net. I tuned the hyperparameters when I did the fitting in workflow_map(). How do I deal with that?</p>
<p>First, I need to extract the best set of hyperparameters. Here we aren’t extracting the workflow, we are <a href="https://workflowsets.tidymodels.org/reference/extract_workflow_set_result.html">extracting the workflow set result</a>, which is our set of hyperparameters. This is a really simple object, so you can view it without fear.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="co" style="color: #5E5E5E;"># Code Block 29: getting-hyperparameters</span></span>
<span id="cb95-2">best_hyperparam <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb95-3">    <span class="fu" style="color: #4758AB;">extract_workflow_set_result</span>(<span class="st" style="color: #20794D;">"down_glmnet"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb95-4">    <span class="fu" style="color: #4758AB;">select_best</span>(<span class="at" style="color: #657422;">metric =</span> <span class="st" style="color: #20794D;">"j_index"</span>)</span>
<span id="cb95-5"></span>
<span id="cb95-6">best_hyperparam</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
      penalty mixture .config             
        &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;               
1 0.000000137   0.570 Preprocessor1_Model4</code></pre>
</div>
</div>
<p>Our workflow for the glmnet is incomplete because it has tune() for the two hyperparameters, instead of the values. We know the best values (at least from the limited parameter space we explored.) I first extract_workflow() just as I did for the no hyperparameter case and then call finalize_workflow(best_hyperparam). This <a href="https://tune.tidymodels.org/reference/finalize_model.html">updates the workflow hyperparameters with the values we found</a>. Everything is identical to the no hyperparameter case or the simple workflow/ last-fit() case. Realizing how/when to extract or reduce the more complex objects to the simpler objects is key to using tidymodels effectively.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="co" style="color: #5E5E5E;"># Code Block 30: last_fit for a workflow with hyperparameter</span></span>
<span id="cb97-2">validation_results <span class="ot" style="color: #003B4F;">&lt;-</span> tune_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb97-3">  <span class="fu" style="color: #4758AB;">extract_workflow</span>(<span class="st" style="color: #20794D;">"down_glmnet"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb97-4">  <span class="fu" style="color: #4758AB;">finalize_workflow</span>(best_hyperparam) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb97-5">  <span class="fu" style="color: #4758AB;">last_fit</span>(<span class="at" style="color: #657422;">split =</span>  data_split, <span class="at" style="color: #657422;">metrics =</span> fraud_metrics)</span></code></pre></div>
</div>
<p>Now we can handle this object exactly as before.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1"><span class="co" style="color: #5E5E5E;"># Code Block 31: Metric for best model with the test data</span></span>
<span id="cb98-2"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">collect_predictions</span>(validation_results))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 7
  id               .pred_1 .pred_0  .row .pred_class is_fraud .config           
  &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;       &lt;fct&gt;    &lt;chr&gt;             
1 train/test split  0.551    0.449     1 1           0        Preprocessor1_Mod…
2 train/test split  0.217    0.783     2 0           0        Preprocessor1_Mod…
3 train/test split  0.0342   0.966     8 0           0        Preprocessor1_Mod…
4 train/test split  0.474    0.526    12 0           0        Preprocessor1_Mod…
5 train/test split  0.0263   0.974    13 0           0        Preprocessor1_Mod…
6 train/test split  0.316    0.684    14 0           0        Preprocessor1_Mod…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">validation_results <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb100-2">  <span class="fu" style="color: #4758AB;">collect_predictions</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb100-3">  <span class="fu" style="color: #4758AB;">roc_curve</span>(is_fraud, .pred_1) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb100-4">  <span class="fu" style="color: #4758AB;">autoplot</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb100-5">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"ROC Curve"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial_files/figure-html/glm-model-metrics-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So that’s it. I hope this clarifies some of the different procedures you can use to fit models in the tidymodels framework.</p>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {A {Tidymodels} {Tutorial}},
  date = {2023-04-10},
  url = {https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“A Tidymodels Tutorial.”</span> April 10,
2023. <a href="https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial">https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>tidymodels</category>
  <category>Machine Learning</category>
  <guid>https://lsinks.github.io/posts/2023-04-10-tidymodels/tidymodels_tutorial.html</guid>
  <pubDate>Mon, 10 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-10-tidymodels/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>30 Day Chart Challenge- Endangered Species</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4.html</link>
  <description><![CDATA[ 



<p>It is Day 4 of the #30DayChartChallenge. More info can be found at the <a href="https://github.com/30DayChartChallenge/Edition2023">challenge’s Github page</a>. Today’s theme is history. But this is a subtheme of “comparisions”, so I’d like to avoid doing a simple time series.</p>
<p>I decided to look at the <a href="https://ecos.fws.gov/ecp/report/species">endangered species list</a> the US Fish and Wildlife Service maintains. They have a bunch of data spread over multiple tables. I decided to look at the 5 year review data. A 5 year review is the assessment to decide if a species remains list or delisted. The dataset also contains the year the species was first listed. So I’d like to compare how many species have been listed vs.&nbsp;delisted.</p>
<p>The key to the different listing types is found <a href="https://ecos.fws.gov/ecp0/html/db-status.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(gt)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(waffle)</span></code></pre></div>
</div>
<p>Today, I’m was going to load the data directly from the website. I’ve been downloading it and reading it in from a local folder, but I thought it would be nice to download directly. However, the data uses a “blob:” url, which is <a href="https://stackoverflow.com/questions/66609070/is-there-a-way-to-download-file-in-r-from-a-blob-url">not donwloadable directly</a>. There is a <a href="https://stackoverflow.com/questions/72922306/how-to-download-csv-from-url-starting-with-blobhttps">way around this</a> but then you have to process some JSON data. I”ll come back to this later, but for now, I’m just going to use a csv.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">endangered_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"five_year.csv"</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Common Name</span><span class="st" style="color: #20794D;">`</span>, </span>
<span id="cb3-3">         <span class="at" style="color: #657422;">status =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">ESA Listing Status</span><span class="st" style="color: #20794D;">`</span>, </span>
<span id="cb3-4">         <span class="at" style="color: #657422;">date =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Listing Date</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb3-5">         <span class="at" style="color: #657422;">rec =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">5YSR Recommendation</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
</div>
<p>Let’s see what kind of categories we have.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">factor</span>(status), <span class="at" style="color: #657422;">rec =</span> <span class="fu" style="color: #4758AB;">factor</span>(rec))</span></code></pre></div>
</div>
<p>Skim this bad boy.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">skim</span>(endangered_df_sub) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">gt</span>()</span></code></pre></div>
<div class="cell-output-display">

<div id="dfabyuwzbw" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#dfabyuwzbw table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#dfabyuwzbw thead, #dfabyuwzbw tbody, #dfabyuwzbw tfoot, #dfabyuwzbw tr, #dfabyuwzbw td, #dfabyuwzbw th {
  border-style: none;
}

#dfabyuwzbw p {
  margin: 0;
  padding: 0;
}

#dfabyuwzbw .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#dfabyuwzbw .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#dfabyuwzbw .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#dfabyuwzbw .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#dfabyuwzbw .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dfabyuwzbw .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dfabyuwzbw .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#dfabyuwzbw .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#dfabyuwzbw .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#dfabyuwzbw .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#dfabyuwzbw .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#dfabyuwzbw .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#dfabyuwzbw .gt_spanner_row {
  border-bottom-style: hidden;
}

#dfabyuwzbw .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#dfabyuwzbw .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#dfabyuwzbw .gt_from_md > :first-child {
  margin-top: 0;
}

#dfabyuwzbw .gt_from_md > :last-child {
  margin-bottom: 0;
}

#dfabyuwzbw .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#dfabyuwzbw .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#dfabyuwzbw .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#dfabyuwzbw .gt_row_group_first td {
  border-top-width: 2px;
}

#dfabyuwzbw .gt_row_group_first th {
  border-top-width: 2px;
}

#dfabyuwzbw .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dfabyuwzbw .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#dfabyuwzbw .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#dfabyuwzbw .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dfabyuwzbw .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#dfabyuwzbw .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#dfabyuwzbw .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#dfabyuwzbw .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#dfabyuwzbw .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#dfabyuwzbw .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dfabyuwzbw .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#dfabyuwzbw .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#dfabyuwzbw .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#dfabyuwzbw .gt_left {
  text-align: left;
}

#dfabyuwzbw .gt_center {
  text-align: center;
}

#dfabyuwzbw .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#dfabyuwzbw .gt_font_normal {
  font-weight: normal;
}

#dfabyuwzbw .gt_font_bold {
  font-weight: bold;
}

#dfabyuwzbw .gt_font_italic {
  font-style: italic;
}

#dfabyuwzbw .gt_super {
  font-size: 65%;
}

#dfabyuwzbw .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#dfabyuwzbw .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#dfabyuwzbw .gt_indent_1 {
  text-indent: 5px;
}

#dfabyuwzbw .gt_indent_2 {
  text-indent: 10px;
}

#dfabyuwzbw .gt_indent_3 {
  text-indent: 15px;
}

#dfabyuwzbw .gt_indent_4 {
  text-indent: 20px;
}

#dfabyuwzbw .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="skim_type">skim_type</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="skim_variable">skim_variable</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="n_missing">n_missing</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="complete_rate">complete_rate</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="character.min">character.min</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="character.max">character.max</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="character.empty">character.empty</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="character.n_unique">character.n_unique</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="character.whitespace">character.whitespace</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="factor.ordered">factor.ordered</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="factor.n_unique">factor.n_unique</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="factor.top_counts">factor.top_counts</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.mean">numeric.mean</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.sd">numeric.sd</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.p0">numeric.p0</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.p25">numeric.p25</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.p50">numeric.p50</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.p75">numeric.p75</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="numeric.p100">numeric.p100</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="numeric.hist">numeric.hist</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="skim_type" class="gt_row gt_left">character</td>
<td headers="skim_variable" class="gt_row gt_left">name</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="character.min" class="gt_row gt_right">3</td>
<td headers="character.max" class="gt_row gt_right">51</td>
<td headers="character.empty" class="gt_row gt_right">0</td>
<td headers="character.n_unique" class="gt_row gt_right">1159</td>
<td headers="character.whitespace" class="gt_row gt_right">0</td>
<td headers="factor.ordered" class="gt_row gt_center">NA</td>
<td headers="factor.n_unique" class="gt_row gt_right">NA</td>
<td headers="factor.top_counts" class="gt_row gt_left">NA</td>
<td headers="numeric.mean" class="gt_row gt_right">NA</td>
<td headers="numeric.sd" class="gt_row gt_right">NA</td>
<td headers="numeric.p0" class="gt_row gt_right">NA</td>
<td headers="numeric.p25" class="gt_row gt_right">NA</td>
<td headers="numeric.p50" class="gt_row gt_right">NA</td>
<td headers="numeric.p75" class="gt_row gt_right">NA</td>
<td headers="numeric.p100" class="gt_row gt_right">NA</td>
<td headers="numeric.hist" class="gt_row gt_left">NA</td></tr>
    <tr><td headers="skim_type" class="gt_row gt_left">factor</td>
<td headers="skim_variable" class="gt_row gt_left">status</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="character.min" class="gt_row gt_right">NA</td>
<td headers="character.max" class="gt_row gt_right">NA</td>
<td headers="character.empty" class="gt_row gt_right">NA</td>
<td headers="character.n_unique" class="gt_row gt_right">NA</td>
<td headers="character.whitespace" class="gt_row gt_right">NA</td>
<td headers="factor.ordered" class="gt_row gt_center">FALSE</td>
<td headers="factor.n_unique" class="gt_row gt_right">8</td>
<td headers="factor.top_counts" class="gt_row gt_left">E: 1173, T: 316, DM: 35, DNS: 3</td>
<td headers="numeric.mean" class="gt_row gt_right">NA</td>
<td headers="numeric.sd" class="gt_row gt_right">NA</td>
<td headers="numeric.p0" class="gt_row gt_right">NA</td>
<td headers="numeric.p25" class="gt_row gt_right">NA</td>
<td headers="numeric.p50" class="gt_row gt_right">NA</td>
<td headers="numeric.p75" class="gt_row gt_right">NA</td>
<td headers="numeric.p100" class="gt_row gt_right">NA</td>
<td headers="numeric.hist" class="gt_row gt_left">NA</td></tr>
    <tr><td headers="skim_type" class="gt_row gt_left">factor</td>
<td headers="skim_variable" class="gt_row gt_left">rec</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="character.min" class="gt_row gt_right">NA</td>
<td headers="character.max" class="gt_row gt_right">NA</td>
<td headers="character.empty" class="gt_row gt_right">NA</td>
<td headers="character.n_unique" class="gt_row gt_right">NA</td>
<td headers="character.whitespace" class="gt_row gt_right">NA</td>
<td headers="factor.ordered" class="gt_row gt_center">FALSE</td>
<td headers="factor.n_unique" class="gt_row gt_right">7</td>
<td headers="factor.top_counts" class="gt_row gt_left">No : 1389, Del: 49, Dow: 40, Del: 27</td>
<td headers="numeric.mean" class="gt_row gt_right">NA</td>
<td headers="numeric.sd" class="gt_row gt_right">NA</td>
<td headers="numeric.p0" class="gt_row gt_right">NA</td>
<td headers="numeric.p25" class="gt_row gt_right">NA</td>
<td headers="numeric.p50" class="gt_row gt_right">NA</td>
<td headers="numeric.p75" class="gt_row gt_right">NA</td>
<td headers="numeric.p100" class="gt_row gt_right">NA</td>
<td headers="numeric.hist" class="gt_row gt_left">NA</td></tr>
    <tr><td headers="skim_type" class="gt_row gt_left">numeric</td>
<td headers="skim_variable" class="gt_row gt_left">date</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="character.min" class="gt_row gt_right">NA</td>
<td headers="character.max" class="gt_row gt_right">NA</td>
<td headers="character.empty" class="gt_row gt_right">NA</td>
<td headers="character.n_unique" class="gt_row gt_right">NA</td>
<td headers="character.whitespace" class="gt_row gt_right">NA</td>
<td headers="factor.ordered" class="gt_row gt_center">NA</td>
<td headers="factor.n_unique" class="gt_row gt_right">NA</td>
<td headers="factor.top_counts" class="gt_row gt_left">NA</td>
<td headers="numeric.mean" class="gt_row gt_right">1993.5</td>
<td headers="numeric.sd" class="gt_row gt_right">12.4735</td>
<td headers="numeric.p0" class="gt_row gt_right">1967</td>
<td headers="numeric.p25" class="gt_row gt_right">1987</td>
<td headers="numeric.p50" class="gt_row gt_right">1993</td>
<td headers="numeric.p75" class="gt_row gt_right">1999</td>
<td headers="numeric.p100" class="gt_row gt_right">2017</td>
<td headers="numeric.hist" class="gt_row gt_left">▂▃▇▂▃</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>rec</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">summary</span>(endangered_df_sub<span class="sc" style="color: #5E5E5E;">$</span>rec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    Delist: The listed entity does not meet the statutory definition of a species 
                                                                                                8 
Delist: The species does not meet the definition of an endangered species or a threatened species 
                                                                                               49 
                                                                   Delist: The species is extinct 
                                                                                               27 
                                                                                    Downlist to T 
                                                                                               40 
                                                                              No change in Status 
                                                                                             1389 
                                                                        Revision of listed entity 
                                                                                                2 
                                                                                      Uplist to E 
                                                                                               18 </code></pre>
</div>
</div>
<p>The recommendations don’t always match the current status. I’m assuming the recommendations will be enacted/adopted eventually, so I am using them as the correct current status.</p>
<p>We have 7 levels in recommendations. We need to consolidate them. I’m going to combine “Delist: The listed entity does not meet the statutory definition of a species” and “Delist: The species does not meet the definition of an endangered species or a threatened species” into a level called delisted. The delisting because the species is extinct will be made into a level called extinct later.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">condensed =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(rec, <span class="at" style="color: #657422;">delisted =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Delist: The listed entity does not meet the statutory definition of a species"</span>,</span>
<span id="cb8-3">    <span class="st" style="color: #20794D;">"Delist: The species does not meet the definition of an endangered species or a threatened species"</span>)</span>
<span id="cb8-4">  ))</span></code></pre></div>
</div>
<p>I’m going to count both “Downlist to threatened” and “uplist to Endangered” as endangered. I don’t know the original listing level, so it doesn’t make too much difference to me.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">condensed =</span> <span class="fu" style="color: #4758AB;">fct_collapse</span>(condensed, <span class="at" style="color: #657422;">endangered =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Downlist to T"</span>,</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;">"Uplist to E"</span>)  ))</span></code></pre></div>
</div>
<p>Now, I’m pulling in the status for the entries that have “No change in Status” as the recommendation. I’m using a case_when and listing every combination. I could get this done if fewer lines if I used or statements (E or T is endangered), but I left it more granular in case I wanted to come back and change the levels. Maybe later I do care about the different between threatened and endangered and want to break them out separately.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">condensed =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb10-3">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"E"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"endangered"</span>,</span>
<span id="cb10-4">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"T"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"endangered"</span>,</span>
<span id="cb10-5">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"RT"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"delisted"</span>,</span>
<span id="cb10-6">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"D3A"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"extinct"</span>,</span>
<span id="cb10-7">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DM"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"delisted"</span>,</span>
<span id="cb10-8">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DP"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"delisted"</span>,</span>
<span id="cb10-9">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DR"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"delisted"</span>,</span>
<span id="cb10-10">    condensed <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span> status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DNS"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"delisted"</span>,</span>
<span id="cb10-11">    condensed <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"No change in Status"</span> <span class="sc" style="color: #5E5E5E;">~</span> condensed)</span>
<span id="cb10-12">    )</span></code></pre></div>
</div>
<p>Now I’m going to group my extincts.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">endangered_df_sub <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">condensed =</span> </span>
<span id="cb11-3">           <span class="fu" style="color: #4758AB;">fct_collapse</span>(condensed, <span class="at" style="color: #657422;">extinct =</span> </span>
<span id="cb11-4">                          <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Delist: The species is extinct"</span>, <span class="st" style="color: #20794D;">"extinct"</span>)))</span></code></pre></div>
</div>
<p>I’m not sure what : Revision of listed entity means. I’m going to see if there are comments back in the full dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">endangered_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">5YSR Recommendation</span><span class="st" style="color: #20794D;">`</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Revision of listed entity"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">gt</span>()</span></code></pre></div>
<div class="cell-output-display">

<div id="skxonqgmku" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#skxonqgmku table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#skxonqgmku thead, #skxonqgmku tbody, #skxonqgmku tfoot, #skxonqgmku tr, #skxonqgmku td, #skxonqgmku th {
  border-style: none;
}

#skxonqgmku p {
  margin: 0;
  padding: 0;
}

#skxonqgmku .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#skxonqgmku .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#skxonqgmku .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#skxonqgmku .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#skxonqgmku .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#skxonqgmku .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#skxonqgmku .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#skxonqgmku .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#skxonqgmku .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#skxonqgmku .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#skxonqgmku .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#skxonqgmku .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#skxonqgmku .gt_spanner_row {
  border-bottom-style: hidden;
}

#skxonqgmku .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#skxonqgmku .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#skxonqgmku .gt_from_md > :first-child {
  margin-top: 0;
}

#skxonqgmku .gt_from_md > :last-child {
  margin-bottom: 0;
}

#skxonqgmku .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#skxonqgmku .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#skxonqgmku .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#skxonqgmku .gt_row_group_first td {
  border-top-width: 2px;
}

#skxonqgmku .gt_row_group_first th {
  border-top-width: 2px;
}

#skxonqgmku .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#skxonqgmku .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#skxonqgmku .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#skxonqgmku .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#skxonqgmku .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#skxonqgmku .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#skxonqgmku .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#skxonqgmku .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#skxonqgmku .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#skxonqgmku .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#skxonqgmku .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#skxonqgmku .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#skxonqgmku .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#skxonqgmku .gt_left {
  text-align: left;
}

#skxonqgmku .gt_center {
  text-align: center;
}

#skxonqgmku .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#skxonqgmku .gt_font_normal {
  font-weight: normal;
}

#skxonqgmku .gt_font_bold {
  font-weight: bold;
}

#skxonqgmku .gt_font_italic {
  font-style: italic;
}

#skxonqgmku .gt_super {
  font-size: 65%;
}

#skxonqgmku .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#skxonqgmku .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#skxonqgmku .gt_indent_1 {
  text-indent: 5px;
}

#skxonqgmku .gt_indent_2 {
  text-indent: 10px;
}

#skxonqgmku .gt_indent_3 {
  text-indent: 15px;
}

#skxonqgmku .gt_indent_4 {
  text-indent: 20px;
}

#skxonqgmku .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Scientific Name">Scientific Name</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Common Name">Common Name</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Where Listed">Where Listed</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="ESA Listing Status">ESA Listing Status</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Lead Region">Lead Region</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Listing Date">Listing Date</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Most Recently Completed 5YSR">Most Recently Completed 5YSR</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="5YSR Recommendation">5YSR Recommendation</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Notice of In Progress 5YSR">Notice of In Progress 5YSR</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Notice Date of In Progress 5YSR">Notice Date of In Progress 5YSR</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Group">Group</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="Scientific Name" class="gt_row gt_left">Rangifer tarandus ssp. caribou</td>
<td headers="Common Name" class="gt_row gt_left">Caribou DPS, Southern Mountain</td>
<td headers="Where Listed" class="gt_row gt_left">&lt;div&gt;Southern Mountain DPS&lt;/div&gt;</td>
<td headers="ESA Listing Status" class="gt_row gt_left">E</td>
<td headers="Lead Region" class="gt_row gt_right">1</td>
<td headers="Listing Date" class="gt_row gt_right">1983</td>
<td headers="Most Recently Completed 5YSR" class="gt_row gt_right">2019-10-02</td>
<td headers="5YSR Recommendation" class="gt_row gt_left">Revision of listed entity</td>
<td headers="Notice of In Progress 5YSR" class="gt_row gt_left">No Five Year Review In Progress</td>
<td headers="Notice Date of In Progress 5YSR" class="gt_row gt_right">NA</td>
<td headers="Group" class="gt_row gt_left">Mammals</td></tr>
    <tr><td headers="Scientific Name" class="gt_row gt_left">Cereus eriophorus var. fragrans</td>
<td headers="Common Name" class="gt_row gt_left">Prickly-apple, fragrant</td>
<td headers="Where Listed" class="gt_row gt_left">&lt;div&gt;&lt;/div&gt;</td>
<td headers="ESA Listing Status" class="gt_row gt_left">E</td>
<td headers="Lead Region" class="gt_row gt_right">4</td>
<td headers="Listing Date" class="gt_row gt_right">1985</td>
<td headers="Most Recently Completed 5YSR" class="gt_row gt_right">2021-10-19</td>
<td headers="5YSR Recommendation" class="gt_row gt_left">Revision of listed entity</td>
<td headers="Notice of In Progress 5YSR" class="gt_row gt_left">No Five Year Review In Progress</td>
<td headers="Notice Date of In Progress 5YSR" class="gt_row gt_right">NA</td>
<td headers="Group" class="gt_row gt_left">Flowering Plants</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>I’m not seeing any explanation. There is not an entry in the code key either.</p>
<p>Okay, now for a visualization. This actually seems perfect for a waffle. I’ve had <a href="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks.html">bad luck with the waffle package</a>, but know how to make it output something now. So, I will try waffling again. I did try a different package (ggwaffle) that also doesn’t work. It does let you use a dataframe, but it also doesn’t handle large numbers well. It soes let you downsample the data if the numbers are too large, but I’d rather just process the data myself to make it waffle.</p>
<p>So, first I need to summarize the data to get the counts per class.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">progress <span class="ot" style="color: #003B4F;">&lt;-</span> endangered_df_sub <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">count</span>(condensed)</span>
<span id="cb13-3"></span>
<span id="cb13-4">progress <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">condensed =</span> <span class="st" style="color: #20794D;">"Status"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Number of species"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Progess of Endangered/Threatened species"</span>)</span></code></pre></div>
<div class="cell-output-display">

<div id="wsldtwanqo" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#wsldtwanqo table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#wsldtwanqo thead, #wsldtwanqo tbody, #wsldtwanqo tfoot, #wsldtwanqo tr, #wsldtwanqo td, #wsldtwanqo th {
  border-style: none;
}

#wsldtwanqo p {
  margin: 0;
  padding: 0;
}

#wsldtwanqo .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#wsldtwanqo .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#wsldtwanqo .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#wsldtwanqo .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#wsldtwanqo .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#wsldtwanqo .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#wsldtwanqo .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#wsldtwanqo .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#wsldtwanqo .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#wsldtwanqo .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#wsldtwanqo .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#wsldtwanqo .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#wsldtwanqo .gt_spanner_row {
  border-bottom-style: hidden;
}

#wsldtwanqo .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#wsldtwanqo .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

#wsldtwanqo .gt_from_md > :first-child {
  margin-top: 0;
}

#wsldtwanqo .gt_from_md > :last-child {
  margin-bottom: 0;
}

#wsldtwanqo .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

#wsldtwanqo .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

#wsldtwanqo .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#wsldtwanqo .gt_row_group_first td {
  border-top-width: 2px;
}

#wsldtwanqo .gt_row_group_first th {
  border-top-width: 2px;
}

#wsldtwanqo .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#wsldtwanqo .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

#wsldtwanqo .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#wsldtwanqo .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#wsldtwanqo .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#wsldtwanqo .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

#wsldtwanqo .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #5F5F5F;
}

#wsldtwanqo .gt_striped {
  background-color: #EDF7FC;
}

#wsldtwanqo .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#wsldtwanqo .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#wsldtwanqo .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#wsldtwanqo .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#wsldtwanqo .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#wsldtwanqo .gt_left {
  text-align: left;
}

#wsldtwanqo .gt_center {
  text-align: center;
}

#wsldtwanqo .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#wsldtwanqo .gt_font_normal {
  font-weight: normal;
}

#wsldtwanqo .gt_font_bold {
  font-weight: bold;
}

#wsldtwanqo .gt_font_italic {
  font-style: italic;
}

#wsldtwanqo .gt_super {
  font-size: 65%;
}

#wsldtwanqo .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#wsldtwanqo .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#wsldtwanqo .gt_indent_1 {
  text-indent: 5px;
}

#wsldtwanqo .gt_indent_2 {
  text-indent: 10px;
}

#wsldtwanqo .gt_indent_3 {
  text-indent: 15px;
}

#wsldtwanqo .gt_indent_4 {
  text-indent: 20px;
}

#wsldtwanqo .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    <tr class="gt_heading">
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Progess of Endangered/Threatened species</td>
    </tr>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="Status">Status</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Number of species">Number of species</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="condensed" class="gt_row gt_center">extinct</td>
<td headers="n" class="gt_row gt_right">27</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center gt_striped">delisted</td>
<td headers="n" class="gt_row gt_right gt_striped">64</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center">endangered</td>
<td headers="n" class="gt_row gt_right">1440</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center gt_striped">Revision of listed entity</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>Now let’s change to percentages for optimal waffling</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">num_species <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(endangered_df_sub)</span>
<span id="cb14-2">progress_percent <span class="ot" style="color: #003B4F;">&lt;-</span> progress <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">n =</span> ( n<span class="sc" style="color: #5E5E5E;">/</span>num_species) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb14-4"></span>
<span id="cb14-5">progress_percent <span class="ot" style="color: #003B4F;">&lt;-</span> progress_percent <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">round</span>(n,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;">gt</span>(progress_percent) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-9"><span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">condensed =</span> <span class="st" style="color: #20794D;">"Status"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"% of species"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Progess of Endangered/Threatened species"</span>) </span></code></pre></div>
<div class="cell-output-display">

<div id="shmthiccmz" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#shmthiccmz table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#shmthiccmz thead, #shmthiccmz tbody, #shmthiccmz tfoot, #shmthiccmz tr, #shmthiccmz td, #shmthiccmz th {
  border-style: none;
}

#shmthiccmz p {
  margin: 0;
  padding: 0;
}

#shmthiccmz .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#shmthiccmz .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#shmthiccmz .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#shmthiccmz .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#shmthiccmz .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#shmthiccmz .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#shmthiccmz .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#shmthiccmz .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#shmthiccmz .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#shmthiccmz .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#shmthiccmz .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#shmthiccmz .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#shmthiccmz .gt_spanner_row {
  border-bottom-style: hidden;
}

#shmthiccmz .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#shmthiccmz .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

#shmthiccmz .gt_from_md > :first-child {
  margin-top: 0;
}

#shmthiccmz .gt_from_md > :last-child {
  margin-bottom: 0;
}

#shmthiccmz .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

#shmthiccmz .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

#shmthiccmz .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#shmthiccmz .gt_row_group_first td {
  border-top-width: 2px;
}

#shmthiccmz .gt_row_group_first th {
  border-top-width: 2px;
}

#shmthiccmz .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#shmthiccmz .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

#shmthiccmz .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#shmthiccmz .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#shmthiccmz .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#shmthiccmz .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

#shmthiccmz .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #5F5F5F;
}

#shmthiccmz .gt_striped {
  background-color: #EDF7FC;
}

#shmthiccmz .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

#shmthiccmz .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#shmthiccmz .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#shmthiccmz .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#shmthiccmz .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#shmthiccmz .gt_left {
  text-align: left;
}

#shmthiccmz .gt_center {
  text-align: center;
}

#shmthiccmz .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#shmthiccmz .gt_font_normal {
  font-weight: normal;
}

#shmthiccmz .gt_font_bold {
  font-weight: bold;
}

#shmthiccmz .gt_font_italic {
  font-style: italic;
}

#shmthiccmz .gt_super {
  font-size: 65%;
}

#shmthiccmz .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#shmthiccmz .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#shmthiccmz .gt_indent_1 {
  text-indent: 5px;
}

#shmthiccmz .gt_indent_2 {
  text-indent: 10px;
}

#shmthiccmz .gt_indent_3 {
  text-indent: 15px;
}

#shmthiccmz .gt_indent_4 {
  text-indent: 20px;
}

#shmthiccmz .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    <tr class="gt_heading">
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Progess of Endangered/Threatened species</td>
    </tr>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="Status">Status</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="% of species">% of species</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="condensed" class="gt_row gt_center">extinct</td>
<td headers="n" class="gt_row gt_right">1.8</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center gt_striped">delisted</td>
<td headers="n" class="gt_row gt_right gt_striped">4.2</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center">endangered</td>
<td headers="n" class="gt_row gt_right">93.9</td></tr>
    <tr><td headers="condensed" class="gt_row gt_center gt_striped">Revision of listed entity</td>
<td headers="n" class="gt_row gt_right gt_striped">0.1</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;">#Values below 1 won't show in a waffle graph anyway, so remove them.</span></span>
<span id="cb15-2">progress_percent <span class="ot" style="color: #003B4F;">&lt;-</span> progress_percent <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">filter</span>(n <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>The waffle package won’t work with dataframes for me, so make it a vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">progress_vec <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">deframe</span>(progress_percent)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">waffle<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">waffle</span>(progress_vec, <span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"black"</span>, <span class="st" style="color: #20794D;">"darkgreen"</span>, <span class="st" style="color: #20794D;">"darkred"</span>),</span>
<span id="cb17-2">               <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"How has the US done with our Endangered species?"</span>,</span>
<span id="cb17-3">               <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"1 square = 1%"</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4_files/figure-html/waffle_chart-1.png" class="img-fluid" width="672"></p>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {30 {Day} {Chart} {Challenge-} {Endangered} {Species}},
  date = {2023-04-04},
  url = {https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“30 Day Chart Challenge- Endangered
Species.”</span> April 4, 2023. <a href="https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4">https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>30DayChartChallenge</category>
  <category>waffle</category>
  <guid>https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4.html</guid>
  <pubDate>Tue, 04 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>30 Day Chart Challenge- Flora and Fauna</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3.html</link>
  <description><![CDATA[ 



<p>It is Day 3 of the #30DayChartChallenge. More info can be found at the <a href="https://github.com/30DayChartChallenge/Edition2023">challenge’s Github page</a>. Today’s theme is flora and fauna. I found a trove of fascinating data at <a href="http://www.gardinitiative.org/data.html">Global Assessment of Reptile Distributions</a>. I chose the dataset on body size/ mass from the paper: <a href="https://doi.org/10.1186/s40709-021-00134-9">“Different solutions lead to similar life history traits across the great divides of the amniote tree of life.” by Shai&nbsp;Meiri, Gopal Murali, Anna Zimin, Lior Shak, Yuval Itescu, Gabriel Caetano, and Uri Roll (Journal of Biological Research-Thessaloniki), 202128: 3</a>.</p>
<p>Okay, let’s go. I’m going to keep the libraries to a minimum. That’s always my goal, but yet I ended up with 6!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(gt)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggthemes)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(cowplot)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(magick)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">fauna <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"animals.csv"</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>I’m going to change the class, clade, order, family and bionomial_2020 to factors. I’m keeping those columns and the mass and discarding the rest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">fauna_cleaned <span class="ot" style="color: #003B4F;">&lt;-</span> fauna <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">select</span>(Class<span class="sc" style="color: #5E5E5E;">:</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">body mass (g)</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">binomial_(original files)</span><span class="st" style="color: #20794D;">`</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">mass_g =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">body mass (g)</span><span class="st" style="color: #20794D;">`</span>, <span class="at" style="color: #657422;">name =</span> binomial_2020) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">Class =</span> <span class="fu" style="color: #4758AB;">factor</span>(Class),</span>
<span id="cb3-6">         <span class="at" style="color: #657422;">Clade =</span> <span class="fu" style="color: #4758AB;">factor</span>(Clade),</span>
<span id="cb3-7">         <span class="at" style="color: #657422;">order =</span> <span class="fu" style="color: #4758AB;">factor</span>(order),</span>
<span id="cb3-8">         <span class="at" style="color: #657422;">family =</span> <span class="fu" style="color: #4758AB;">factor</span>(family),</span>
<span id="cb3-9">         <span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">factor</span>(name))</span></code></pre></div>
</div>
<p>So, let’s see what kind of data we have.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">table1 <span class="ot" style="color: #003B4F;">&lt;-</span> fauna_cleaned <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">count</span>(Class)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">gt</span>(table1)</span></code></pre></div>
<div class="cell-output-display">

<div id="qficwodanr" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#qficwodanr table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#qficwodanr thead, #qficwodanr tbody, #qficwodanr tfoot, #qficwodanr tr, #qficwodanr td, #qficwodanr th {
  border-style: none;
}

#qficwodanr p {
  margin: 0;
  padding: 0;
}

#qficwodanr .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#qficwodanr .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#qficwodanr .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#qficwodanr .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#qficwodanr .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qficwodanr .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#qficwodanr .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#qficwodanr .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#qficwodanr .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#qficwodanr .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#qficwodanr .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#qficwodanr .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#qficwodanr .gt_spanner_row {
  border-bottom-style: hidden;
}

#qficwodanr .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#qficwodanr .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#qficwodanr .gt_from_md > :first-child {
  margin-top: 0;
}

#qficwodanr .gt_from_md > :last-child {
  margin-bottom: 0;
}

#qficwodanr .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#qficwodanr .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#qficwodanr .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#qficwodanr .gt_row_group_first td {
  border-top-width: 2px;
}

#qficwodanr .gt_row_group_first th {
  border-top-width: 2px;
}

#qficwodanr .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qficwodanr .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#qficwodanr .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#qficwodanr .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#qficwodanr .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#qficwodanr .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#qficwodanr .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#qficwodanr .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#qficwodanr .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#qficwodanr .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qficwodanr .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#qficwodanr .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#qficwodanr .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#qficwodanr .gt_left {
  text-align: left;
}

#qficwodanr .gt_center {
  text-align: center;
}

#qficwodanr .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#qficwodanr .gt_font_normal {
  font-weight: normal;
}

#qficwodanr .gt_font_bold {
  font-weight: bold;
}

#qficwodanr .gt_font_italic {
  font-style: italic;
}

#qficwodanr .gt_super {
  font-size: 65%;
}

#qficwodanr .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#qficwodanr .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#qficwodanr .gt_indent_1 {
  text-indent: 5px;
}

#qficwodanr .gt_indent_2 {
  text-indent: 10px;
}

#qficwodanr .gt_indent_3 {
  text-indent: 15px;
}

#qficwodanr .gt_indent_4 {
  text-indent: 20px;
}

#qficwodanr .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="Class">Class</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="n">n</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="Class" class="gt_row gt_center">Aves</td>
<td headers="n" class="gt_row gt_right">9534</td></tr>
    <tr><td headers="Class" class="gt_row gt_center">Mammalia</td>
<td headers="n" class="gt_row gt_right">5840</td></tr>
    <tr><td headers="Class" class="gt_row gt_center">Reptilia</td>
<td headers="n" class="gt_row gt_right">11240</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>We have data on more than just reptiles, the dataset includes information about birds and mammals as well. But I’m only interested in reptiles.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">reptiles <span class="ot" style="color: #003B4F;">&lt;-</span> fauna_cleaned <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">filter</span>(Class <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Reptilia"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">table2 <span class="ot" style="color: #003B4F;">&lt;-</span> reptiles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">count</span>(Clade, order)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">gt</span>(table2)</span></code></pre></div>
<div class="cell-output-display">

<div id="pxyiiwfmjh" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#pxyiiwfmjh table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#pxyiiwfmjh thead, #pxyiiwfmjh tbody, #pxyiiwfmjh tfoot, #pxyiiwfmjh tr, #pxyiiwfmjh td, #pxyiiwfmjh th {
  border-style: none;
}

#pxyiiwfmjh p {
  margin: 0;
  padding: 0;
}

#pxyiiwfmjh .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#pxyiiwfmjh .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#pxyiiwfmjh .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#pxyiiwfmjh .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#pxyiiwfmjh .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pxyiiwfmjh .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pxyiiwfmjh .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#pxyiiwfmjh .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#pxyiiwfmjh .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#pxyiiwfmjh .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#pxyiiwfmjh .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#pxyiiwfmjh .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#pxyiiwfmjh .gt_spanner_row {
  border-bottom-style: hidden;
}

#pxyiiwfmjh .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#pxyiiwfmjh .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#pxyiiwfmjh .gt_from_md > :first-child {
  margin-top: 0;
}

#pxyiiwfmjh .gt_from_md > :last-child {
  margin-bottom: 0;
}

#pxyiiwfmjh .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#pxyiiwfmjh .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#pxyiiwfmjh .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#pxyiiwfmjh .gt_row_group_first td {
  border-top-width: 2px;
}

#pxyiiwfmjh .gt_row_group_first th {
  border-top-width: 2px;
}

#pxyiiwfmjh .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxyiiwfmjh .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#pxyiiwfmjh .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#pxyiiwfmjh .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pxyiiwfmjh .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxyiiwfmjh .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#pxyiiwfmjh .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#pxyiiwfmjh .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#pxyiiwfmjh .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#pxyiiwfmjh .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pxyiiwfmjh .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxyiiwfmjh .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#pxyiiwfmjh .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#pxyiiwfmjh .gt_left {
  text-align: left;
}

#pxyiiwfmjh .gt_center {
  text-align: center;
}

#pxyiiwfmjh .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#pxyiiwfmjh .gt_font_normal {
  font-weight: normal;
}

#pxyiiwfmjh .gt_font_bold {
  font-weight: bold;
}

#pxyiiwfmjh .gt_font_italic {
  font-style: italic;
}

#pxyiiwfmjh .gt_super {
  font-size: 65%;
}

#pxyiiwfmjh .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#pxyiiwfmjh .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#pxyiiwfmjh .gt_indent_1 {
  text-indent: 5px;
}

#pxyiiwfmjh .gt_indent_2 {
  text-indent: 10px;
}

#pxyiiwfmjh .gt_indent_3 {
  text-indent: 15px;
}

#pxyiiwfmjh .gt_indent_4 {
  text-indent: 20px;
}

#pxyiiwfmjh .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="Clade">Clade</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="order">order</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="n">n</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="Clade" class="gt_row gt_center">Crocodylia</td>
<td headers="order" class="gt_row gt_center">Crocodylia</td>
<td headers="n" class="gt_row gt_right">24</td></tr>
    <tr><td headers="Clade" class="gt_row gt_center">Rhynchocephalia</td>
<td headers="order" class="gt_row gt_center">Rhynchocephalia</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="Clade" class="gt_row gt_center">Squamata</td>
<td headers="order" class="gt_row gt_center">Squamata (Amphisbaenia)</td>
<td headers="n" class="gt_row gt_right">195</td></tr>
    <tr><td headers="Clade" class="gt_row gt_center">Squamata</td>
<td headers="order" class="gt_row gt_center">Squamata (Sauria)</td>
<td headers="n" class="gt_row gt_right">6868</td></tr>
    <tr><td headers="Clade" class="gt_row gt_center">Squamata</td>
<td headers="order" class="gt_row gt_center">Squamata (Serpentes)</td>
<td headers="n" class="gt_row gt_right">3837</td></tr>
    <tr><td headers="Clade" class="gt_row gt_center">Testudines</td>
<td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="n" class="gt_row gt_right">315</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>Everyone knows that turtles are the best type of reptile, so let’s filter even further.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">turtles <span class="ot" style="color: #003B4F;">&lt;-</span> reptiles <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">filter</span>(Clade <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Testudines"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4">table3 <span class="ot" style="color: #003B4F;">&lt;-</span> turtles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">count</span>(order, family)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;">gt</span>(table3)</span></code></pre></div>
<div class="cell-output-display">

<div id="ogbkiydtgo" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>#ogbkiydtgo table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#ogbkiydtgo thead, #ogbkiydtgo tbody, #ogbkiydtgo tfoot, #ogbkiydtgo tr, #ogbkiydtgo td, #ogbkiydtgo th {
  border-style: none;
}

#ogbkiydtgo p {
  margin: 0;
  padding: 0;
}

#ogbkiydtgo .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#ogbkiydtgo .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#ogbkiydtgo .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#ogbkiydtgo .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#ogbkiydtgo .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ogbkiydtgo .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ogbkiydtgo .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ogbkiydtgo .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#ogbkiydtgo .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#ogbkiydtgo .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#ogbkiydtgo .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#ogbkiydtgo .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#ogbkiydtgo .gt_spanner_row {
  border-bottom-style: hidden;
}

#ogbkiydtgo .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#ogbkiydtgo .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#ogbkiydtgo .gt_from_md > :first-child {
  margin-top: 0;
}

#ogbkiydtgo .gt_from_md > :last-child {
  margin-bottom: 0;
}

#ogbkiydtgo .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#ogbkiydtgo .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#ogbkiydtgo .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#ogbkiydtgo .gt_row_group_first td {
  border-top-width: 2px;
}

#ogbkiydtgo .gt_row_group_first th {
  border-top-width: 2px;
}

#ogbkiydtgo .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ogbkiydtgo .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#ogbkiydtgo .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#ogbkiydtgo .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ogbkiydtgo .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ogbkiydtgo .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#ogbkiydtgo .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#ogbkiydtgo .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#ogbkiydtgo .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ogbkiydtgo .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ogbkiydtgo .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ogbkiydtgo .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ogbkiydtgo .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ogbkiydtgo .gt_left {
  text-align: left;
}

#ogbkiydtgo .gt_center {
  text-align: center;
}

#ogbkiydtgo .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#ogbkiydtgo .gt_font_normal {
  font-weight: normal;
}

#ogbkiydtgo .gt_font_bold {
  font-weight: bold;
}

#ogbkiydtgo .gt_font_italic {
  font-style: italic;
}

#ogbkiydtgo .gt_super {
  font-size: 65%;
}

#ogbkiydtgo .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#ogbkiydtgo .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#ogbkiydtgo .gt_indent_1 {
  text-indent: 5px;
}

#ogbkiydtgo .gt_indent_2 {
  text-indent: 10px;
}

#ogbkiydtgo .gt_indent_3 {
  text-indent: 15px;
}

#ogbkiydtgo .gt_indent_4 {
  text-indent: 20px;
}

#ogbkiydtgo .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
  <thead>
    
    <tr class="gt_col_headings">
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="order">order</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_center" rowspan="1" colspan="1" scope="col" id="family">family</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="n">n</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Carettochelyidae</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Chelidae</td>
<td headers="n" class="gt_row gt_right">53</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Cheloniidae</td>
<td headers="n" class="gt_row gt_right">6</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Chelydridae</td>
<td headers="n" class="gt_row gt_right">3</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Dermatemydidae</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Dermochelyidae</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Emydidae</td>
<td headers="n" class="gt_row gt_right">47</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Geoemydidae</td>
<td headers="n" class="gt_row gt_right">69</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Kinosternidae</td>
<td headers="n" class="gt_row gt_right">24</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Pelomedusidae</td>
<td headers="n" class="gt_row gt_right">18</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Podocnemididae</td>
<td headers="n" class="gt_row gt_right">8</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Testudinidae</td>
<td headers="n" class="gt_row gt_right">54</td></tr>
    <tr><td headers="order" class="gt_row gt_center">Testudines</td>
<td headers="family" class="gt_row gt_center">Trionychidae</td>
<td headers="n" class="gt_row gt_right">30</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>Let’s take a look at how big (or mighty, as some might say) the different families of turtles are. There is a very large range of masses so I’m using a log scale.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggplot</span>(turtles, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> family, <span class="at" style="color: #657422;">y =</span> mass_g, <span class="at" style="color: #657422;">color =</span> family)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Mightiness of Different Families of Turtle and Tortoise"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"mass (g)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span> , </span>
<span id="cb8-7">        <span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The heaviest turtles are the giantic leatherback turtles, a species of SEA TURTLE that weigh hundred of kg (around 1,000 lbs). The smallest turtle is the African dwarf mud turtle (Pelusios nanus), family Pelomedusidae, which full grown weighs under 100 grams.</p>
<p>Now let’s look at everyone’s favorite family of turtles, <a href="https://en.wikipedia.org/wiki/Emydidae">Emydidae</a>. This family is often known as pond or marsh turtles. Filter them out, and add a category for <a href="https://www.nwf.org/Educational-Resources/Wildlife-Guide/Reptiles/Eastern-Box-Turtle">Eastern Box Turtles</a>. I called the variable box_turtle, but I’m only marking Eastern. There are other types of box turtles though not all of them are in Emydidae. Asian box turtle species were reassigned to the family Geoemydidae.</p>
<p>The common name box turtle, arises from the fact that these species have a hinge on the bottom shell, and can close up/ box up completely. Other turtles and tortoises can only pull their bits within their shell.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/mac-closed.jpg" class="img-fluid figure-img" alt="A closed up eastern box turtle held in a woman's hand." width="600"></p>
<p></p><figcaption class="figure-caption">A closed Eastern Box Turtle</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">pond_turtles <span class="ot" style="color: #003B4F;">&lt;-</span> turtles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">filter</span>(family <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Emydidae'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">box_turtle =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Terrapene carolina"</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>)) </span></code></pre></div>
</div>
<p>Okay, let’s look at mightiness of the turtles in this family.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">turtle_plot <span class="ot" style="color: #003B4F;">&lt;-</span> pond_turtles <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(name, mass_g), <span class="at" style="color: #657422;">y =</span> mass_g, <span class="at" style="color: #657422;">fill =</span> box_turtle)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">scale_fill_manual</span>(<span class="at" style="color: #657422;">values=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#999999"</span>, <span class="st" style="color: #20794D;">"#E69F00"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">0.7</span>, <span class="at" style="color: #657422;">position =</span> <span class="fu" style="color: #4758AB;">position_dodge</span>(<span class="dv" style="color: #AD0000;">10</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"mass (g)"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-7">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Mightiness of Different Turtles in family Emydidae"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Data from https://doi.org/10.1186/s40709-021-00134-9"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-10">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-11">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;">#found how to add an image to my graph on stack overflow</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;">#https://stackoverflow.com/questions/63442933/how-can-i-add-a-logo-to-a-ggplot-visualisation</span></span>
<span id="cb10-17"></span>
<span id="cb10-18">img <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">image_read</span>(<span class="st" style="color: #20794D;">"pqtk5r.jpg"</span>)</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;"># Set the canvas where you are going to draw the plot and the image</span></span>
<span id="cb10-21"><span class="fu" style="color: #4758AB;">ggdraw</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;"># Draw the plot in the canvas setting the x and y positions, which go from 0,0</span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;"># (lower left corner) to 1,1 (upper right corner) and set the width and height of</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;"># the plot. It's advisable that x + width = 1 and y + height = 1, to avoid clipping # the plot</span></span>
<span id="cb10-25"><span class="fu" style="color: #4758AB;">draw_plot</span>(turtle_plot,<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.15</span>, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">height =</span> <span class="fl" style="color: #AD0000;">0.85</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;"># Draw image in the canvas using the same concept as for the plot. Might need to </span></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;"># play with the x, y, width and height values to obtain the desired result</span></span>
<span id="cb10-28"><span class="fu" style="color: #4758AB;">draw_image</span>(img, <span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.6</span>, <span class="at" style="color: #657422;">y =</span> <span class="fl" style="color: #AD0000;">0.35</span>, <span class="at" style="color: #657422;">width =</span> <span class="fl" style="color: #AD0000;">0.45</span>, <span class="at" style="color: #657422;">height =</span> <span class="fl" style="color: #AD0000;">0.45</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {30 {Day} {Chart} {Challenge-} {Flora} and {Fauna}},
  date = {2023-04-03},
  url = {https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“30 Day Chart Challenge- Flora and
Fauna.”</span> April 3, 2023. <a href="https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3">https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>turtle</category>
  <category>30DayChartChallenge</category>
  <guid>https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3.html</guid>
  <pubDate>Mon, 03 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>30 Day Chart Challenge -Arlington Parks</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks.html</link>
  <description><![CDATA[ 



<p>When I looked at Twitter this morning, my feed was filled with amazing charts. Apparently, April is month for the #30DayChartChallenge. More info can be found at the <a href="https://github.com/30DayChartChallenge/Edition2023">challenge’s Github page</a>. Each day, the challenge specifies a type of chart, but not a dataset. Today’s challenge is to create a waffle chart. I’d never heard of a waffle chart, but luckily, R has a <a href="https://cran.r-project.org/web/packages/waffle/">package</a> for that!</p>
<p>Keeping it simple and just using tidyverse and waffle packages today. (Spoiler, I had incredible difficulties with this package.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(waffle)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
</div>
<p>A waffle chart is similar to a pie chart, but since it is constructed from squares, instead of wedges, it is a bit easier to correctly judge the relative areas.</p>
<p>I discovered that Arlington County has a website with a bunch of <a href="https://data.arlingtonva.us/">open source data</a>, so I poked around there to find a dataset for today’s challenge. I decided to use the dataset on <a href="https://data.arlingtonva.us/dataset/213">parks and acreage</a>. In addition to having local and federally owned parks, Arlington is park of a consortium of Northern Virginia jurisdictions that also operate <a href="https://www.novaparks.com/">regional parks</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">parks <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"parks.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 10 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (6): Profile Year, County Owned Parkland (Acreage), NOVA Parks (Acreage)...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>The dataset contains 3 years worth of data (2019-2021) and the total number of acres owned by the county, NOVA parks, and the National Park Service. It also includes the number of parks own by NOVA parks and the county, but not the number of NPS parks. I did try to find the number of NPS parks and the answer isn’t easily obtainable. The NPS owns one park in Arlington (Arlington House), but there are a couple of multi-state trails that might go through the county, but I wasn’t interested in pulling up maps to check.</p>
<p>The dataset comes as an excel sheet and the column names aren’t nice. I’ve been working with so many datasets designed for R or SQL that it was a shock to see long column names with spaces and punctuation. I had to look up how to handle that! The answer is backticks, as below.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">parks_2021 <span class="ot" style="color: #003B4F;">&lt;-</span> parks <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Profile Year</span><span class="st" style="color: #20794D;">`</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2021</span>)</span></code></pre></div>
</div>
<p>I’m going to rename the columns and in this filtered dataset. There isn’t much year to year change in this dataset (there is one extra park in 2020), so I’m not going to do anything with the entire dataset. If I were, I’d rename the parent dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">parks_2021 <span class="ot" style="color: #003B4F;">&lt;-</span> parks_2021 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">year =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Profile Year</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb5-3">         <span class="at" style="color: #657422;">county_acres =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">County Owned Parkland (Acreage)</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb5-4">         <span class="at" style="color: #657422;">NOVA_acres =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">NOVA Parks (Acreage)</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb5-5">         <span class="at" style="color: #657422;">NPS_acres =</span> <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">National Parks Service (Acreage)</span><span class="st" style="color: #20794D;">`</span>) </span>
<span id="cb5-6"></span>
<span id="cb5-7">parks_2021 <span class="ot" style="color: #003B4F;">&lt;-</span> parks_2021 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>year)</span></code></pre></div>
</div>
<p>Now let’s get waffling!</p>
<p>Allegedly, you can both <a href="https://rud.is/rpubs/building-waffle-charts.html">pass waffle dataframes or use the provided geom_waffle</a>, but neither was successful for me. With respect to the geom_waffle, I found a suggestion to <a href="https://github.com/hrbrmstr/waffle/issues/76">install waffle from the github repo and restart R Studio</a>, but that didn’t work for me. Others stated that re-installing R Studio fixed the problem, but my commitment to waffle charts is not that great.</p>
<p>As to passing it dataframes, waffle constantly complained about <code>'list' object cannot be coerced to type 'double'</code> even when using code from other folk’s tutorial. Passing waffle a simple vector did work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Vector</span></span>
<span id="cb6-2">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;"># Waffle chart</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;">waffle</span>(x, <span class="at" style="color: #657422;">rows =</span> <span class="dv" style="color: #AD0000;">8</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/test-vector-waffle-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So, I converted my dataframe to a vector. First, I reshaped it to long rather than wide. (Neither the long nor the wide df waffled.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">parks_2021_long <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pivot_longer</span>(parks_2021, <span class="at" style="color: #657422;">cols =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"owner"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"acreage"</span>)</span></code></pre></div>
</div>
<p>Then I converted it to a vector. This should be a named vector of numbers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">parks_2021_vec <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">deframe</span>(parks_2021_long)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">class</span>(parks_2021_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">print</span>(parks_2021_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>county_acres   NOVA_acres    NPS_acres 
         924          136          417 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">str</span>(parks_2021_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Named num [1:3] 924 136 417
 - attr(*, "names")= chr [1:3] "county_acres" "NOVA_acres" "NPS_acres"</code></pre>
</div>
</div>
<p>Let’s waffle it. When I first waffled it, I got 4 categories instead of 3. I found an example that said you needed to <a href="https://imuhovic.com/posts/waffle-plots-square-pies-ggplot/">explicitly pass it 3 colors</a> or else it would fill in the blank space with a 4th color. Then you get the correct labels, but no chart!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#This waffles, it seems like nonsense to me</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;">waffle</span>(parks_2021_vec, <span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#FFC0CB"</span>, <span class="st" style="color: #20794D;">"#FFC0AB"</span>, <span class="st" style="color: #20794D;">"green"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/nonsense-waffle-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So now we reached the sad state of affairs where I type in the values to make this work. And that also does not work.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">county =</span> <span class="dv" style="color: #AD0000;">924</span>, <span class="at" style="color: #657422;">nova =</span> <span class="dv" style="color: #AD0000;">136</span>, <span class="at" style="color: #657422;">nps =</span> <span class="dv" style="color: #AD0000;">417</span>)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># Waffle chart</span></span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;">waffle</span>(x , <span class="at" style="color: #657422;">rows =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/typing_vector-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Small numbers work</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">county =</span> <span class="fl" style="color: #AD0000;">9.24</span>, <span class="at" style="color: #657422;">nova =</span> <span class="fl" style="color: #AD0000;">1.36</span>, <span class="at" style="color: #657422;">nps =</span> <span class="fl" style="color: #AD0000;">4.17</span>)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># Waffle chart</span></span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;">waffle</span>(y ,  <span class="at" style="color: #657422;">rows =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/trying-random-things-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If I convert everything to percentages…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">total <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">924</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">136</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">417</span></span>
<span id="cb17-2">y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">county =</span> (<span class="dv" style="color: #AD0000;">924</span><span class="sc" style="color: #5E5E5E;">/</span>total)<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">nova =</span> (<span class="dv" style="color: #AD0000;">136</span><span class="sc" style="color: #5E5E5E;">/</span>total)<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">nps =</span> (<span class="dv" style="color: #AD0000;">417</span><span class="sc" style="color: #5E5E5E;">/</span>total)<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># Waffle chart</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;">waffle</span>(y ,  <span class="at" style="color: #657422;">rows =</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/trying-percents-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I don’t find any documentation about the size of the numbers. It is not a requirement that the totals must add up to 100 (100%); small numbers adding up to anything works. Waffle charts are not only for proportional data, but can also be used to track progress. There is nothing in the documentation on CRAN that gives a clue about this, nor did I see anything in the tutorials I looked at.</p>
<p>I’m going to pretty up the chart and call it a day. I thought this would take me about 20 minutes to make a nice chart and instead I’ve spent several hours and I don’t even understand what went wrong. Also, the named vector does work when I adjust the size of the numbers to “smaller” values. I picked nice forest colors since we are talking about parks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">parks_2021_percent <span class="ot" style="color: #003B4F;">=</span> (parks_2021_vec <span class="sc" style="color: #5E5E5E;">/</span> total) <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="fu" style="color: #4758AB;">waffle</span>(parks_2021_percent, <span class="at" style="color: #657422;">colors =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkgreen"</span>, <span class="st" style="color: #20794D;">"darkseagreen"</span>, <span class="st" style="color: #20794D;">"darkolivegreen"</span>), <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Who owns the parks in Arlington, Virginia?"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks_files/figure-html/final-waffle-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I don’t really understand the waffle package. I don’t find the graphic particularly understandable. I’d like there to be some sort of indication about what each square represents. And I find it very annoying that there are not 100 squares. I know this is a rounding issue, but given that the dataset, by the nature of how it was created, should equal 100%, the chart is just confusing. And for what it is worth, I had to repeatedly restart RStudio, because code chunks would just fail to do anything. They’d run, but there would be no output, not even warnings or errors.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {30 {Day} {Chart} {Challenge} {-Arlington} {Parks}},
  date = {2023-04-02},
  url = {https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“30 Day Chart Challenge -Arlington
Parks.”</span> April 2, 2023. <a href="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks">https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>Waffle</category>
  <category>30DayChartChallenge</category>
  <guid>https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks.html</guid>
  <pubDate>Sun, 02 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/thumbnail.png" medium="image" type="image/png" height="131" width="144"/>
</item>
<item>
  <title>Self-Guided Learning through a Wordle Guess Generator: Part 1</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html</link>
  <description><![CDATA[ 



<section id="self-guided-learning-the-ever-evolving-wordle-guess-generator" class="level2">
<h2 class="anchored" data-anchor-id="self-guided-learning-the-ever-evolving-wordle-guess-generator">Self-Guided Learning: The Ever Evolving Wordle Guess Generator</h2>
<p>The best way to learn a programming language is to code. Obvious, but sometimes it can be daunting to start a project when you are a novice. Influenced by my time at a start-up, I’ve found the best approach is to create a minimum viable product. This is the smallest working part of the project. By continuing to revise and iterate the code, you can rapidly detect weaknesses in your knowledge and take active steps to fix them.</p>
<p>My learning project was a Wordle Guess Generator. I will show you how I used this project to create a self-guided learning plan. Motivated partly by my desire to have good guesses for Septle (a seven-letter guessing game), this project has been a crucial part of my journey to learn R. Practicing and learning coding skills were more important to me than devising the optimal strategy; if you are interested in “the best” Wordle strategy, then you will probably find much better answers by Googling.</p>
<p>For those who don’t know, Wordle is a word-guessing gamer that gives you five guesses to identify a 5-letter word. Correct letters are shown in green or yellow with each guess, depending on whether they are appropriately placed or not. Incorrect letters are shown in gray.</p>
<p>I wasn’t interested in coming up with the global “best” answer. I wanted to come up with some guesses that fit my gameplay style. I guess three words in a row without trying to solve the game. Then, with a fair number of letters known, I attempt to solve the word.</p>
<p>The code has undergone several significant overhauls as I’ve needed to learn new things and used this project as the test bed. And here it is again, as a vehicle to learn quarto/ markdown. Here I will show you the very first ugly code and how I critiqued and revised it over several months. I’ve put it all on <a href="https://github.com/lsinks/wordle">GitHub</a>. The project is unstructured, the code is ugly, and all the versioning was by filename.</p>
</section>
<section id="brainstorming-the-project." class="level2">
<h2 class="anchored" data-anchor-id="brainstorming-the-project.">1. Brainstorming the project.</h2>
<p>Brainstorm what you want this project to do. Try to have a very clear statement about the project’s goal at the top. If you can think of self-contained modules, mark that. If you can sketch out the scaffold of the code- great! If you have some ideas about the results, even better. Put everything you can think of down. I had been thinking about this project for a while, so this brainstorming sheet is neat. Neatness and organization are not important at this point; getting stuff written down is.</p>
<p>My goal was “I want 3 initial guesses for Septle. Ideally, I’ll maximize the number of unique letters, and I want to preferentially pick from the most frequently used letters.”</p>
<p>I decided my scoring would be based on the frequency letters occur in English; more common letters get a higher score than uncommon letters. To generate the score for the word, I proposed the following process:</p>
<ol type="1">
<li>Read in letter frequencies</li>
<li>Scoring [the letters, originally I thought it would be based on rank, with the most common letter getting a 26 and the least common getting a 1. That is what the confusing little sketch is attempting to convey. A is not the most common letter, nor is Z the least common.]</li>
<li>Read in the list of words</li>
<li>Calculate the scores [of the words]</li>
<li>Pick the best word as a first guess [best meaning highest scoring]</li>
</ol>
<p>I also talk about how the frequency distribution of letters will likely differ between five and seven-letter words. I suggested looking at the frequency of letters in modern text instead of just frequency lists from linguists. I noted that certain letters are more likely to be in a specific position, and it could be valuable to constrain the guess to typical positions. An example is that “y” is almost always at the end of a word in English, so “sadly” might be a better guess than “yacht” for that reason. You are likelier to lock down a letter with a positionally accurate guess. I also said that I wanted a 4th Wordle guess. There are a lot of ideas here! That’s okay because I winnow them down in the next step.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/images/brainstorming_both.jpg" class="img-fluid figure-img" alt="Two handwritten pages entitled &quot;Programming Project 1&quot;"></p>
<p></p><figcaption class="figure-caption">The initial brainstorming session</figcaption><p></p>
</figure>
</div>
</section>
<section id="minimum-viable-product-what-is-the-smallest-program-that-works" class="level2">
<h2 class="anchored" data-anchor-id="minimum-viable-product-what-is-the-smallest-program-that-works">2. Minimum Viable Product: What is the smallest program that works?</h2>
<p>Pull out the minimum viable product from your brainstorming. What is the smallest result that would satisfy your goals? Is there a way to make things a bit smaller? I would size it so you can get working code to accomplish the goal in a few hours.</p>
<p>I chose to generate four guesses for Wordle. I also decided to generate my frequency table from the word list itself. I found a five-letter word list that I could download and read in, but all the letter frequency tables I found were on blogs or in articles, and the only way I could see to get them into my program was to type them in and I was too lazy to do that. I decided to implement the process I outlined in the brainstorming session and calculate four guesses.</p>
</section>
<section id="write-some-bad-code." class="level2">
<h2 class="anchored" data-anchor-id="write-some-bad-code.">3. Write some bad code.</h2>
<p>Write some code that does that thing. It will be ugly. If you can’t figure something out, do it the wrong way. Just get something running.</p>
<p>This first attempt took me 3-4 hours to write.</p>
<p>I googled how to calculate the frequency of letters in words (in R) and found this <a href="https://www.r-bloggers.com/2018/12/rrrrs-in-r-letter-frequency-in-r-package-names/">helpful tutorial</a>.</p>
<section id="the-minimal-viable-product-running-code" class="level3">
<h3 class="anchored" data-anchor-id="the-minimal-viable-product-running-code">The Minimal Viable Product: Running Code</h3>
<p>I cleaned up the commenting/formatting of the initial code just for this post. I also added library(tidyverse)- apparently, I was just loading libraries through the gui back then. If you want to see the true initial version, it is on <a href="https://github.com/lsinks/wordle/blob/main/frequency_072222.R">GitHub</a>.</p>
<p>Here’s what my MVP does:</p>
<ol type="1">
<li><p>I found a <a href="https://www-cs-faculty.stanford.edu/~knuth/sgb-words.txt">list of five letter words</a> online and imported it.</p></li>
<li><p>I calculated how often each letter occurred over the word list.<br>
(This, or the scaled version, was the score assigned to each letter.)</p></li>
<li><p>I looped through the word list and calculated two scores for each word, one using all letters and one using only the unique letters.</p></li>
<li><p>I picked the highest-scoring word as my first guess.</p></li>
<li><p>I then went through the word list and calculated a second score for the words minus the letters already guessed in the first guess (and ignoring duplicated letters).</p></li>
<li><p>I picked the highest-scoring word as my second guess.</p></li>
<li><p>I repeated steps 5 &amp; 6 to pick a third guess.</p></li>
</ol>
<p>Okay, so let’s look at some bad code. I will flag a few things as we go through, but I’m certain you can find much more that is not optimal.</p>
<p>Here’s loading the data and writing two scoring functions. I first wrote these in the code but had time to convert them to functions in this initial work session. It was an opportunity to practice function writing, but it was not critical to the minimum viable product.</p>
<p>I have lots of print statements commented out; this is a very simple way to debug and see how you are proceeding through the code. There are more sophisticated tools in R Studio, but I didn’t want to figure out how to use them at this moment. I use the global variable char_frequencies for the value of each letter. I create this variable in the next code chunk.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"></span>
<span id="cb1-3">sgb.words <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">read.delim</span>(<span class="st" style="color: #20794D;">"C:/Users/drsin/OneDrive/Documents/R Projects/wordle/sgb-words.txt"</span>,</span>
<span id="cb1-5">             <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#probably want this instead because it assumes no headers</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#test6 &lt;- read.table(file.choose())</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">Scoring_Word <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word){</span>
<span id="cb1-11">  <span class="co" style="color: #5E5E5E;">#i'm not handling duplicate letters at all right now</span></span>
<span id="cb1-12">  letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb1-13">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-14">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>) {</span>
<span id="cb1-15">    position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb1-16">    value[i] <span class="ot" style="color: #003B4F;">&lt;-</span> y[position]</span>
<span id="cb1-17">   <span class="co" style="color: #5E5E5E;"># print(i)</span></span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;">if</span> (i <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">5</span>) {</span>
<span id="cb1-19">     <span class="co" style="color: #5E5E5E;"># print("I am here")</span></span>
<span id="cb1-20">     <span class="co" style="color: #5E5E5E;"># print(sum(value))</span></span>
<span id="cb1-21">      <span class="fu" style="color: #4758AB;">return</span>(total <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-22">      }</span>
<span id="cb1-23">    </span>
<span id="cb1-24">  }</span>
<span id="cb1-25">} </span>
<span id="cb1-26"></span>
<span id="cb1-27"></span>
<span id="cb1-28">Scoring_Word_Unique <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word){</span>
<span id="cb1-29"></span>
<span id="cb1-30"> <span class="co" style="color: #5E5E5E;"># print(word)</span></span>
<span id="cb1-31">  letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb1-32">  unique_letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(letter_vec)</span>
<span id="cb1-33">  <span class="co" style="color: #5E5E5E;">#print(unique_letter_vec)</span></span>
<span id="cb1-34">  <span class="co" style="color: #5E5E5E;">#print(length(unique_letter_vec))</span></span>
<span id="cb1-35">  </span>
<span id="cb1-36">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-37">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;">return</span>(value)</span>
<span id="cb1-39">  } <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb1-40">      <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec)) {</span>
<span id="cb1-41">      position <span class="ot" style="color: #003B4F;">&lt;-</span> unique_letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb1-42">      value[i] <span class="ot" style="color: #003B4F;">&lt;-</span> y[position]</span>
<span id="cb1-43">    <span class="co" style="color: #5E5E5E;"># print(i)</span></span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;"># print(value)</span></span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;">if</span> (i <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec)) {</span>
<span id="cb1-46">      <span class="co" style="color: #5E5E5E;"># print("I am here")</span></span>
<span id="cb1-47">      <span class="co" style="color: #5E5E5E;"># print(sum(value))</span></span>
<span id="cb1-48">      <span class="fu" style="color: #4758AB;">return</span>(total <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-49">    }</span>
<span id="cb1-50">    </span>
<span id="cb1-51">  }</span>
<span id="cb1-52">  }</span>
<span id="cb1-53">}</span></code></pre></div>
</div>
<p>I did run through most of the code with five words initially, and then later the whole word list, when I was more confident that things worked.</p>
<p>I calculate how often each letter appears in the list and create the scaled version. I created two incredibly ugly graphs: one of the raw counts for each letter and one of the scaled frequencies. This is also a moment to do a quick reality check on the results- are the most and least common letters what you’d expect?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">start_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb2-2"></span>
<span id="cb2-3">letters <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(sgb.words[,<span class="dv" style="color: #AD0000;">1</span>], <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb2-4">char_frequencies <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(<span class="fu" style="color: #4758AB;">table</span>(letters))</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">#char_frequencies</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">ggplot</span>(char_frequencies, </span>
<span id="cb2-8">        <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">fct_reorder</span>(char_frequencies[,<span class="dv" style="color: #AD0000;">1</span>], char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb2-9">                              , char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>] )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-10">   <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-11">   <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle_files/figure-html/letter_frequency-calc-graphs-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">common <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">max</span>(char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb3-2">y <span class="ot" style="color: #003B4F;">=</span> (char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>]<span class="sc" style="color: #5E5E5E;">/</span>common)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">ggplot</span>(char_frequencies, </span>
<span id="cb3-5">       <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span>  <span class="fu" style="color: #4758AB;">fct_reorder</span>(char_frequencies[,<span class="dv" style="color: #AD0000;">1</span>], char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>]), y )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle_files/figure-html/letter_frequency-calc-graphs-2.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now I calculate the scores for the (hand-picked) words I’ve been playing with. I also hand-calculated these scores using the values from char_frequencies to ensure my scoring functions did what I thought they were.</p>
<p>I initialized an object to store the words, scores, and guesses. You can also tell that I had no idea what data types my objects were since I called them a list. small_list is a matrix/array of characters, and none of my zeros are numbers. I wanted a dataframe, but I didn’t know how to do that. I didn’t have a strong reason to prefer a dataframe other than it was widely used in the courses I was taking at Datacamp.</p>
<p>This chunk also pulls out a single word and sends it to score to check that it works before I loop through the entire object and calculate all the scores.</p>
<p>You can also see I hard-coded the number of words (again… I did this in the prior code chunk too.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">#calculate the score for crone</span></span>
<span id="cb4-2">crone_score <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Scoring_Word</span>(<span class="st" style="color: #20794D;">"crone"</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">#might_score &lt;- Scoring_Word ("might")</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#sadly_score &lt;- Scoring_Word ("sadly")</span></span>
<span id="cb4-5">num_words <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5756</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">#num_words &lt;- 5</span></span>
<span id="cb4-7">small_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(<span class="at" style="color: #657422;">word_name =</span> sgb.words[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words,<span class="dv" style="color: #AD0000;">1</span>], </span>
<span id="cb4-8">                    <span class="at" style="color: #657422;">score =</span><span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words), </span>
<span id="cb4-9">                    <span class="at" style="color: #657422;">unique_score =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb4-10">                    <span class="at" style="color: #657422;">post_word_one_unique =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb4-11">                    <span class="at" style="color: #657422;">post_word_two_unique =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb4-12">                    <span class="at" style="color: #657422;">post_word_three_unique =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words)</span>
<span id="cb4-13">                                                )</span>
<span id="cb4-14">word <span class="ot" style="color: #003B4F;">&lt;-</span> small_list[[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;">Scoring_Word</span>(word)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.40422</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ind2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;">for</span> (ind2 <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words){</span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;">#print(small_list[[ind2,1]])</span></span>
<span id="cb6-5">  score_ind2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Scoring_Word</span>(small_list[[ind2,<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb6-6">  small_list[[ind2,<span class="dv" style="color: #AD0000;">2</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> score_ind2</span>
<span id="cb6-7">}</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">#u_crone_score &lt;- Scoring_Word_Unique("crone")</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">#u_there_core &lt;- Scoring_Word_Unique ("there")</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;">#sadly_score &lt;- Scoring_Word ("sadly")</span></span>
<span id="cb6-12"></span>
<span id="cb6-13">ind2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-14"><span class="cf" style="color: #003B4F;">for</span> (ind2 <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words){</span>
<span id="cb6-15"> <span class="co" style="color: #5E5E5E;"># print(small_list[[ind2,1]])</span></span>
<span id="cb6-16">  score_ind2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(small_list[[ind2,<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb6-17"> <span class="co" style="color: #5E5E5E;"># print(score_ind2)</span></span>
<span id="cb6-18">  small_list[[ind2,<span class="dv" style="color: #AD0000;">3</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> score_ind2</span>
<span id="cb6-19">}</span></code></pre></div>
</div>
<p>In my attempt to sort the word scores and pick out the highest-scoring works, I created an unnecessary number of temporary variables. I forced one of these objects to be a dataframe, but I didn’t check the types of the individual components. Note that all my numbers are still characters. It is funny that things worked even though they were the wrong type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">small_list1 <span class="ot" style="color: #003B4F;">&lt;-</span> small_list</span>
<span id="cb7-2">small_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(small_list1)</span>
<span id="cb7-3">top_words <span class="ot" style="color: #003B4F;">&lt;-</span> small_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4"> <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(unique_score))</span>
<span id="cb7-5"></span>
<span id="cb7-6">word_1 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<p>Now I calculate the second and third guesses. I wanted to penalize duplicate letters, so I used the unique letter scoring function and removed the letters from the first guess. I couldn’t figure out how to do that automatically, so I hardcoded to remove the letters “a”, “r”, “o”, “s”, and “e” from the words before I sent them to be scored. This is precisely the kind of situation where you can get bogged down doing things “properly” and end up stuck. I quickly attempted to figure it out and then did it incorrectly. You can also see that I have a bunch of stuff commented out that didn’t work and a bunch of print statements for debugging. This is not pretty code.</p>
<p>Then I loop through the list again and repeat for the last guess. Again, hardcoded in the letters to remove from the first and second guesses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">#now we need a function that sees if a word has the letters of the word_1</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">#and removes them and then calculates the word score</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">#top word is arose</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Word 1= arose -----</span></span>
<span id="cb8-5">ind3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-6"><span class="cf" style="color: #003B4F;">for</span> (ind3 <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words) {</span>
<span id="cb8-7"> <span class="co" style="color: #5E5E5E;"># print(top_words$word_name[ind3])</span></span>
<span id="cb8-8">  test <span class="ot" style="color: #003B4F;">&lt;-</span> small_list[[ind3,<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb8-9">  lvec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"[a r o s e]"</span>, <span class="st" style="color: #20794D;">""</span>, test)  <span class="co" style="color: #5E5E5E;">#this actually works.  How do I use the string?</span></span>
<span id="cb8-10">  <span class="co" style="color: #5E5E5E;">#lvec &lt;-  unlist(strsplit(word_1, split = ""))</span></span>
<span id="cb8-11">  <span class="co" style="color: #5E5E5E;">#lvec&lt;- "t|h|e|i|r" #how do I contruct this automatically</span></span>
<span id="cb8-12"></span>
<span id="cb8-13">  <span class="co" style="color: #5E5E5E;">#new_let &lt;- str_remove_all(pattern= lvec, string= test)</span></span>
<span id="cb8-14"> <span class="co" style="color: #5E5E5E;"># print(lvec)</span></span>
<span id="cb8-15">  score_ind3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(lvec)</span>
<span id="cb8-16"> <span class="co" style="color: #5E5E5E;"># print("writing score")</span></span>
<span id="cb8-17"> <span class="co" style="color: #5E5E5E;"># print(c(ind3, " ", score_ind3, "for the word ", test, "sent as ", lvec))</span></span>
<span id="cb8-18">  </span>
<span id="cb8-19">  small_list[[ind3,<span class="dv" style="color: #AD0000;">4</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> score_ind3</span>
<span id="cb8-20">  <span class="co" style="color: #5E5E5E;">#print (c("output of small list ", top_words[[ind3,4]]))</span></span>
<span id="cb8-21">}</span>
<span id="cb8-22"></span>
<span id="cb8-23">small_df2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(small_list)</span>
<span id="cb8-24">top_words2 <span class="ot" style="color: #003B4F;">&lt;-</span> small_df2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-25">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(post_word_one_unique))</span>
<span id="cb8-26"></span>
<span id="cb8-27"></span>
<span id="cb8-28">word_2 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words2<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-29"></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;"># top word 2 is until</span></span>
<span id="cb8-31"></span>
<span id="cb8-32">ind4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-33"><span class="cf" style="color: #003B4F;">for</span> (ind4 <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words) {</span>
<span id="cb8-34">  <span class="co" style="color: #5E5E5E;"># print(top_words$word_name[ind3])</span></span>
<span id="cb8-35">  test <span class="ot" style="color: #003B4F;">&lt;-</span> small_list[[ind4,<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb8-36">  lvec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"[u n t i l a r o s e]"</span>, <span class="st" style="color: #20794D;">""</span>, test)  <span class="co" style="color: #5E5E5E;">#this actually works.  How do I use the string?</span></span>
<span id="cb8-37">  <span class="co" style="color: #5E5E5E;">#lvec &lt;-  unlist(strsplit(word_1, split = ""))</span></span>
<span id="cb8-38">  <span class="co" style="color: #5E5E5E;">#lvec&lt;- "t|h|e|i|r" #how do I contruct this automatically</span></span>
<span id="cb8-39">  </span>
<span id="cb8-40">  <span class="co" style="color: #5E5E5E;">#new_let &lt;- str_remove_all(pattern= lvec, string= test)</span></span>
<span id="cb8-41">  <span class="co" style="color: #5E5E5E;"># print(lvec)</span></span>
<span id="cb8-42">  score_ind4 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(lvec)</span>
<span id="cb8-43">  <span class="co" style="color: #5E5E5E;"># print("writing score")</span></span>
<span id="cb8-44">  <span class="co" style="color: #5E5E5E;"># print(c(ind3, " ", score_ind3, "for the word ", test, "sent as ", lvec))</span></span>
<span id="cb8-45">  </span>
<span id="cb8-46">  end_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb8-47">  end_time <span class="sc" style="color: #5E5E5E;">-</span> start_time</span>
<span id="cb8-48">  </span>
<span id="cb8-49">  small_list[[ind4,<span class="dv" style="color: #AD0000;">5</span>]] <span class="ot" style="color: #003B4F;">&lt;-</span> score_ind4</span>
<span id="cb8-50">  <span class="co" style="color: #5E5E5E;">#print (c("output of small list ", top_words[[ind3,4]]))</span></span>
<span id="cb8-51">}</span>
<span id="cb8-52"></span>
<span id="cb8-53">small_df3<span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(small_list)</span>
<span id="cb8-54">top_words2 <span class="ot" style="color: #003B4F;">&lt;-</span> small_df3 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-55">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(post_word_two_unique))</span>
<span id="cb8-56"></span>
<span id="cb8-57"></span>
<span id="cb8-58">word_3 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words2<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<p>Lastly, I calculated the total score of these three words compared to my hand-picked words.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">a <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"arose"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"until"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"dumpy"</span>)</span>
<span id="cb9-4">a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8.013518</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">b <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"crone"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"mighty"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"sadly"</span>)</span>
<span id="cb11-4">b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8.081767</code></pre>
</div>
</div>
<p>Note that there is an error here too. By calling Scoring_Words_Unique on individual words, I did not penalize duplicate letters. Thus “u” appears in two words. The correct scoring call should have been:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">c <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">Scoring_Word_Unique</span>(<span class="st" style="color: #20794D;">"aroseuntildumpy"</span>)</span>
<span id="cb13-2">c</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7.654468</code></pre>
</div>
</div>
<p>But the program works! It generated three reasonable guesses for Wordle that use common letters. (Note that by my scoring rules, the manually chosen set of words is a better choice.)</p>
</section>
</section>
<section id="critique-the-code" class="level2">
<h2 class="anchored" data-anchor-id="critique-the-code">4. Critique the code</h2>
<p>This step is the critical step to accelerate your learning. You need to review your code and list everything you know is not done properly and everything confusing you. This should be done at the end of every session or at the start of the next. Be honest with yourself. If you don’t understand something, put it on your list, even if your code works. The point of this exercise is to increase your coding proficiency.</p>
<p>This is my list from that code we just reviewed. I created this the next day before I started work. Note my versioning by file name.</p>
<ol type="1">
<li>Save current code as frequency_072222 and work on a new copy. This was functional code last night, so I want to keep it.</li>
<li>Import is wrong because it takes the first word as a header.</li>
<li>I need more concise variable names. Also, I create a bunch of temp variables that aren’t needed.</li>
<li>I manually subtract out (hard-coded) words picked in previous cycles. I need that done on the fly.</li>
<li>Once 4 is done, I’d like to write a function to generate however many guesses you ask for.</li>
<li>I’d like to look at the histogram of the scores as you cycle through the guesses.</li>
<li>I’m very unclear on when I need lists, dataframes, tibbles, etc., for the different functions.</li>
<li>Give credit to the website where I took the string split code from.</li>
<li>Some functions from the other code are out of date, so I should update them. [I got warnings in R Studio about this, which I didn’t understand.]</li>
<li>Update scoring_word to have flexible word length.</li>
</ol>
<p>Again, there is a lot more wrong with this code, but this is the list of things I could identify with the knowledge I had at the time.</p>
<p>The next day, I created a chart of all my variables, their sizes, and their types. I also proposed new, clearer names for them, though this wasn’t implemented until a few days later. I mostly played around with how long it took to calculate the initial score and unique score using separate or combined loops. I used sys.time() to benchmark, which didn’t seem terribly consistent in its output. However, there didn’t seem to be a huge difference between the methods, so I returned it to two loops for clarity. At the end of this day, I had four items on my task list after critiquing and reviewing. The last one was, “I need to figure out git_hub or come up with a better way of versioning than the date.”</p>
<p>Proving that point, I put the wrong date in all the file names the next time I worked on the code. In that session, I devoted most of the time to figuring out item 4 on my task list. I wrote a function called remove_letters, which could be used instead of hard coding. I also played around with reshaping the data using pivot_longer from tidyr. I created a histogram of word scores as letters are removed from consideration, which required the reshaped data. Reshaping data can be tricky, so this was a good opportunity to work through that process. (Again, versioning by name, this was called “frequency_072422_tidyr”, in case I really messed up.)</p>
</section>
<section id="current-status" class="level1">
<h1>Current Status</h1>
<p>When I set-up git/ GitHub, I created a new project using the structure for folders and subfolders that I learned in a class at Datacamp. This project is also a work in progress, so it is also messy. I’ve run through it <a href="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle.html">here</a> as a blog post and the code is available on <a href="https://github.com/lsinks/Word-Games">GitHub</a>.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Self-Guided {Learning} Through a {Wordle} {Guess}
    {Generator:} {Part} 1},
  date = {2023-04-01},
  url = {https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Self-Guided Learning Through a Wordle
Guess Generator: Part 1.”</span> April 1, 2023. <a href="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1">https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <guid>https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/thumbnail.png" medium="image" type="image/png" height="155" width="144"/>
</item>
<item>
  <title>Self-Guided Learning through a Wordle Guess Generator: Part 2</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle.html</link>
  <description><![CDATA[ 



<p>This is the current version of the word game guesser. I discussed how I used this project to hone my coding skills in the <a href="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html">companion blog post</a> to this one.</p>
<p>I’m not going to walk through this in much detail, but I’m going to point out some of the major lessons I learned as I revised the code. Again, both the <a href="https://github.com/lsinks/wordle">initial version</a> and <a href="https://github.com/lsinks/Word-Games">this version</a> are on GitHub in all their messiness.</p>
<p>I learned how to put functions in a separate file and call them from my many script. This can make long code much easier to read. Here, I’ve included the helper functions in-line and commented out the <code>source("code/helper-functions.R")</code> in the main code. I’ve also set up switchable troubleshooting help with <code>verbose</code> and <code>debug_detail</code> parameters in my functions. Setting them to <code>TRUE</code> provide more info as the functions are executed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">#|label: helper-functions</span></span>
<span id="cb1-2">Construct_Freq_Table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word_list) {</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#scoring code uses the counting code from</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">#https://www.r-bloggers.com/2018/12/rrrrs-in-r-letter-frequency-in-r-package-names/  </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># making the frequency table ----</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">letters <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word_list[,<span class="dv" style="color: #AD0000;">1</span>], <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb1-10">char_frequencies <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>(<span class="fu" style="color: #4758AB;">table</span>(letters))</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;">#normalized</span></span>
<span id="cb1-13">common <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">max</span>(char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb1-14">y <span class="ot" style="color: #003B4F;">=</span> (char_frequencies[,<span class="dv" style="color: #AD0000;">2</span>]<span class="sc" style="color: #5E5E5E;">/</span>common)</span>
<span id="cb1-15">char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>normalized <span class="ot" style="color: #003B4F;">&lt;-</span> y</span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;">return</span>(char_frequencies)</span>
<span id="cb1-17">}</span>
<span id="cb1-18"></span>
<span id="cb1-19">Scoring_Word <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word, <span class="at" style="color: #657422;">freqs =</span> char_frequencies,</span>
<span id="cb1-20">                         <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">debug_detail =</span> <span class="cn" style="color: #8f5902;">FALSE</span>){</span>
<span id="cb1-21">  letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;">if</span> (verbose <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-23">    {<span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"I'm in Scoring_words message and scoring: "</span>, word)}</span>
<span id="cb1-24">  </span>
<span id="cb1-25">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-26">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb1-27">    position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i]<span class="sc" style="color: #5E5E5E;">==</span> freqs<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb1-28">    value[i] <span class="ot" style="color: #003B4F;">&lt;-</span> freqs<span class="sc" style="color: #5E5E5E;">$</span>normalized[position]</span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;">if</span> (debug_detail <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-30">    {</span>
<span id="cb1-31">      <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"I am in the scoring loop calculating value: "</span>)</span>
<span id="cb1-32">      <span class="fu" style="color: #4758AB;">print</span>(i)</span>
<span id="cb1-33">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-34">      </span>
<span id="cb1-35">    }</span>
<span id="cb1-36">    </span>
<span id="cb1-37">    <span class="cf" style="color: #003B4F;">if</span> (i <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb1-38">      </span>
<span id="cb1-39">      <span class="fu" style="color: #4758AB;">return</span>(total <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-40">    }</span>
<span id="cb1-41">    </span>
<span id="cb1-42">  }</span>
<span id="cb1-43">  }</span>
<span id="cb1-44">  </span>
<span id="cb1-45"></span>
<span id="cb1-46">Scoring_Word_Unique <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word, <span class="at" style="color: #657422;">freqs =</span> char_frequencies, </span>
<span id="cb1-47">                                <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">debug_detail =</span> <span class="cn" style="color: #8f5902;">FALSE</span>){</span>
<span id="cb1-48">  <span class="co" style="color: #5E5E5E;"># This does only score on unique letters</span></span>
<span id="cb1-49">  letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb1-50">  unique_letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(letter_vec)</span>
<span id="cb1-51">  <span class="co" style="color: #5E5E5E;">#unique_letter_vec &lt;- letter_vec</span></span>
<span id="cb1-52">  <span class="cf" style="color: #003B4F;">if</span> (verbose <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-53">  {<span class="fu" style="color: #4758AB;">message</span>(<span class="st" style="color: #20794D;">"I'm in Scoring_words_Unique and scoring: "</span>, word)}</span>
<span id="cb1-54">  </span>
<span id="cb1-55">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-56">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-57">    <span class="fu" style="color: #4758AB;">return</span>(value)</span>
<span id="cb1-58">  } <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb1-59">    <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec)) {</span>
<span id="cb1-60">           position <span class="ot" style="color: #003B4F;">&lt;-</span> unique_letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> freqs<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb1-61">          value[i] <span class="ot" style="color: #003B4F;">&lt;-</span> freqs<span class="sc" style="color: #5E5E5E;">$</span>normalized[position]</span>
<span id="cb1-62">      <span class="cf" style="color: #003B4F;">if</span> (debug_detail <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-63">      {</span>
<span id="cb1-64">        <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"I am in the unique scoring loop calculating value: "</span>)</span>
<span id="cb1-65">        <span class="fu" style="color: #4758AB;">print</span>(i)</span>
<span id="cb1-66">        <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-67">      }</span>
<span id="cb1-68">      </span>
<span id="cb1-69">      <span class="cf" style="color: #003B4F;">if</span> (i <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">length</span>(unique_letter_vec)) {</span>
<span id="cb1-70">        </span>
<span id="cb1-71">        <span class="fu" style="color: #4758AB;">return</span>(total <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(value))</span>
<span id="cb1-72">      }</span>
<span id="cb1-73">      </span>
<span id="cb1-74">    }</span>
<span id="cb1-75">  }</span>
<span id="cb1-76">}</span>
<span id="cb1-77"></span>
<span id="cb1-78">Removing_Letters <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(word, chosen_word, </span>
<span id="cb1-79">                              <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">debug_detail =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) {</span>
<span id="cb1-80">  lvec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"["</span>, chosen_word, <span class="st" style="color: #20794D;">"]"</span>), <span class="st" style="color: #20794D;">""</span>, word)  </span>
<span id="cb1-81">  <span class="fu" style="color: #4758AB;">return</span>(lvec)}</span></code></pre></div>
</div>
<p>I finally did figure out how to make variables the types I wanted. I also replaced several loops with map functions from <a href="https://purrr.tidyverse.org/">purrr</a>. I also made a reshaped version of my dataframe using <code>pivot_longer</code> from <a href="https://tidyr.tidyverse.org/articles/pivot.html">tidyr</a>. Reshaping data is a really useful skill, but might be a bit confusing at first. So I certainly wanted to make sure I could do it correctly. The reshaped data is used to make a nice density plot later.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Loading libraries and data ----</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">#from https://www-cs-faculty.stanford.edu/~knuth/sgb-words.txt</span></span>
<span id="cb2-6">word_list <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;">read.table</span>(<span class="st" style="color: #20794D;">"C:/Users/drsin/OneDrive/Documents/R Projects/Word-Games/input/sgb-words.txt"</span>) </span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Functions ----</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">#source("code/helper-functions.R")</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;"># calculate letter frequencies from word list</span></span>
<span id="cb2-13">char_frequencies <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Construct_Freq_Table</span>(word_list)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;"># Initialize the word_scores dataframe ----</span></span>
<span id="cb2-16">num_words <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(word_list)</span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;">#num_words &lt;- 5</span></span>
<span id="cb2-18">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">word_name =</span> word_list[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_words,<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb2-19">                    <span class="at" style="color: #657422;">word_length =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-20">                    <span class="at" style="color: #657422;">word_guess1 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-21">                    <span class="at" style="color: #657422;">word_guess2 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-22">                    <span class="at" style="color: #657422;">word_guess3 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-23">                    <span class="at" style="color: #657422;">word_guess4 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-24">                    <span class="at" style="color: #657422;">score =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words), </span>
<span id="cb2-25">                    <span class="at" style="color: #657422;">score_guess1 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-26">                    <span class="at" style="color: #657422;">score_guess2 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-27">                    <span class="at" style="color: #657422;">score_guess3 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words),</span>
<span id="cb2-28">                    <span class="at" style="color: #657422;">score_guess4 =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">times =</span> num_words)</span>
<span id="cb2-29">                                                )</span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;">#fill in word lengths.  This is so code can be expended to longer words</span></span>
<span id="cb2-31">word_scores<span class="sc" style="color: #5E5E5E;">$</span>word_length <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">str_length</span>(word_scores<span class="sc" style="color: #5E5E5E;">$</span>word_name)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;"># Calculates the initial scores for all words -----</span></span>
<span id="cb2-34"></span>
<span id="cb2-35">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-36">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(word_name, Scoring_Word))</span>
<span id="cb2-37"></span>
<span id="cb2-38">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-39">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score_guess1 =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(word_name, Scoring_Word_Unique))</span>
<span id="cb2-40"></span>
<span id="cb2-41"></span>
<span id="cb2-42"><span class="co" style="color: #5E5E5E;"># Finding the best first word</span></span>
<span id="cb2-43">top_words <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-44"> <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(score_guess1))</span>
<span id="cb2-45">word_1 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb2-46"></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;"># Scoring for second guess</span></span>
<span id="cb2-48">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-49">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">word_guess2 =</span> </span>
<span id="cb2-50">           <span class="fu" style="color: #4758AB;">map_chr</span>(word_name, Removing_Letters, <span class="at" style="color: #657422;">chosen_word =</span> word_1))</span>
<span id="cb2-51">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-52">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score_guess2 =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(word_guess2, Scoring_Word_Unique))</span>
<span id="cb2-53"></span>
<span id="cb2-54">top_words <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-55">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(score_guess2))</span>
<span id="cb2-56"></span>
<span id="cb2-57">word_2 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb2-58"></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;"># Scoring for third guess</span></span>
<span id="cb2-60">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-61">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">word_guess3 =</span></span>
<span id="cb2-62">           <span class="fu" style="color: #4758AB;">map_chr</span>(word_guess2, Removing_Letters, <span class="at" style="color: #657422;">chosen_word =</span> word_2))</span>
<span id="cb2-63">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-64">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score_guess3 =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(word_guess3, Scoring_Word_Unique))</span>
<span id="cb2-65"></span>
<span id="cb2-66"></span>
<span id="cb2-67">top_words <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-68">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(score_guess3))</span>
<span id="cb2-69">word_3 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb2-70"></span>
<span id="cb2-71"><span class="co" style="color: #5E5E5E;"># Scoring for fourth guess</span></span>
<span id="cb2-72">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-73">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">word_guess4 =</span> </span>
<span id="cb2-74">           <span class="fu" style="color: #4758AB;">map_chr</span>(word_guess3, Removing_Letters, <span class="at" style="color: #657422;">chosen_word =</span> word_3))</span>
<span id="cb2-75">word_scores <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-76">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score_guess4 =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(word_guess4, Scoring_Word_Unique))</span>
<span id="cb2-77"></span>
<span id="cb2-78"></span>
<span id="cb2-79">top_words <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-80">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(score_guess4))</span>
<span id="cb2-81"></span>
<span id="cb2-82">word_4 <span class="ot" style="color: #003B4F;">&lt;-</span> top_words<span class="sc" style="color: #5E5E5E;">$</span>word_name[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb2-83"></span>
<span id="cb2-84"><span class="co" style="color: #5E5E5E;"># subsetting this dataframe and reshaping it.</span></span>
<span id="cb2-85"><span class="co" style="color: #5E5E5E;"># This is used to make a density plot later.</span></span>
<span id="cb2-86">word_scores2 <span class="ot" style="color: #003B4F;">&lt;-</span> word_scores <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-87">   <span class="fu" style="color: #4758AB;">select</span>(word_name, score_guess1, score_guess2, score_guess3, score_guess4)</span>
<span id="cb2-88">word_scores_reshaped <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb2-89">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(word_scores2, <span class="at" style="color: #657422;">cols =</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb2-90">               <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"score_type"</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"score"</span>)</span></code></pre></div>
</div>
<p>Nice visualizations were definitely not part of the initial code. In the next chunk, I make some prettier visualizations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">### This is now just visualizing what we've done. ------</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;">#plotting the frequency of the letters in our word_set</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">ggplot</span>(char_frequencies, </span>
<span id="cb3-5">       <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">fct_rev</span>(<span class="fu" style="color: #4758AB;">fct_reorder</span>(letters,  normalized)), <span class="at" style="color: #657422;">y =</span> normalized )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Frequencies of Letters"</span>, <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"from 5 letter words"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">plot.title =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Letter"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Frequency"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## This looks at the distribution of scores as guessing occurs.  Initially, you have a</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">word_scores_reshaped<span class="sc" style="color: #5E5E5E;">$</span>score_type <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(word_scores_reshaped<span class="sc" style="color: #5E5E5E;">$</span>score_type)</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">ggplot</span>(word_scores_reshaped, <span class="fu" style="color: #4758AB;">aes</span>(score, <span class="at" style="color: #657422;">fill =</span> score_type)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;">geom_density</span>(<span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Evolution of Word Scores as Guessing Progresses"</span>,</span>
<span id="cb4-9">       <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"for 5 letter words"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Score"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Density"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.8</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>( <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-15">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>( <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Now we are visualizing what letters are picked in each guess</span></span>
<span id="cb5-2">guess <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"not guessed"</span>, <span class="at" style="color: #657422;">times =</span> <span class="dv" style="color: #AD0000;">26</span>)</span>
<span id="cb5-3">char_frequencies <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cbind</span>(char_frequencies, guess)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;"># this is done in reverse order because some letters are guessed in more than</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;"># one word and I'd like them marked at the earliest guess.</span></span>
<span id="cb5-7">letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word_4, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;">print</span>(letter_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "w" "h" "a" "c" "k"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb7-2">  position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb7-3">  char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>guess[position] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Guess 4"</span></span>
<span id="cb7-4">}</span>
<span id="cb7-5"></span>
<span id="cb7-6">letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word_3, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;">print</span>(letter_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "d" "u" "m" "p" "y"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb9-2">  position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb9-3">  char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>guess[position] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Guess 3"</span></span>
<span id="cb9-4">}</span>
<span id="cb9-5"></span>
<span id="cb9-6">letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word_2, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">print</span>(letter_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "u" "n" "t" "i" "l"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb11-2">  position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb11-3">  char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>guess[position] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Guess 2"</span></span>
<span id="cb11-4">}</span>
<span id="cb11-5"></span>
<span id="cb11-6"></span>
<span id="cb11-7">letter_vec <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(word_1, <span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">""</span>))</span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;">print</span>(letter_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "a" "r" "o" "s" "e"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">length</span>(letter_vec)) {</span>
<span id="cb13-2">  position <span class="ot" style="color: #003B4F;">&lt;-</span> letter_vec[i] <span class="sc" style="color: #5E5E5E;">==</span> char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>letters</span>
<span id="cb13-3">  char_frequencies<span class="sc" style="color: #5E5E5E;">$</span>guess[position] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Guess 1"</span></span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;">ggplot</span>(char_frequencies, <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb13-8">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">fct_rev</span>(<span class="fu" style="color: #4758AB;">fct_reorder</span>(letters,  normalized)),</span>
<span id="cb13-9">  <span class="at" style="color: #657422;">y =</span> normalized,</span>
<span id="cb13-10">  <span class="at" style="color: #657422;">fill =</span> guess)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">geom_col</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"When Letters are Guessed"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Normalized Counts"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-14">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Letter"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-16">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-17">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So that’s the current state of this project. This was a really useful project for me and it really strengthened by R and Tidyverse skills.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Self-Guided {Learning} Through a {Wordle} {Guess}
    {Generator:} {Part} 2},
  date = {2023-04-01},
  url = {https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Self-Guided Learning Through a Wordle
Guess Generator: Part 2.”</span> April 1, 2023. <a href="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2">https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <guid>https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>One Class SVM</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-30-One-Class-SVM/one-class-svm.html</link>
  <description><![CDATA[ 



<p>I’ve recently been playing around with classification models, specifically on data sets with a skewed class distribution. In imbalanced classification problems, one class occurs infrequently. The minority class is often the class of interest (think fraudulent transaction, positive disease diagnosis, or intruder detection). Sometimes these applications are framed as a two-class classification problem, but other times they are called anomaly, outlier, or novelty detection.</p>
<p>Imbalanced classification problems are tricky for a couple of reasons. Models can achieve high accuracy by classifying everything as the dominant class. You can somewhat mitigate this problem by choosing models based on other metrics, such as sensitivity. You can also downsample the data to balance the classes (which throws out a lot of data) or upsample the infrequent class using a technique like SMOTE or ROSE to create synthetic data points.</p>
<p>Collecting enough labeled data can also be expensive in highly imbalanced classes. Techniques like SMOTE won’t help if you only have 2 of a class in the dataset; the model needs “sufficient” data to learn from.</p>
<p>Another way to handle a minority class is to use a one-class classifier. One-class classifiers are one of the most widely used methods in anomaly detection because it does not require extensive labeled data for training. This method can either be semi-supervised, where only the normal (major) class is used for training, or unsupervised, where the method can handle anomalies in the training class. The one-class SVM is a popular implementation of one-class classifiers.</p>
<p>Here I’m going to use a <a href="https://app.datacamp.com/learn/courses/introduction-to-anomaly-detection-in-r">toy dataset from Datacamp</a>. They have told me that all datasets used in their courses can be used outside Datacamp.</p>
<p>I’m using some specialty packages here, specifically e1071 and caret for the machine learning.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(skimr) <span class="co" style="color: #5E5E5E;"># for EDA</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(corrplot) <span class="co" style="color: #5E5E5E;"># for cool correlation graph</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(gt) <span class="co" style="color: #5E5E5E;"># for tables</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(e1071) <span class="co" style="color: #5E5E5E;"># for svm</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(caret) <span class="co" style="color: #5E5E5E;"># for data split</span></span>
<span id="cb1-7">thyroid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"~/R Projects/SVM/thyroid.csv"</span>, <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
<section id="exploratory-data-analysis" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exploratory-data-analysis">Exploratory Data Analysis</h2>
<p>The dataset explores thyroid disease as a function of thyroid hormone levels. I’m using a custom skim function to tailor the output. More info on that can be found <a href="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/">here</a>.</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">my_skim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">skim_with</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="fu" style="color: #4758AB;">sfl</span>(<span class="at" style="color: #657422;">p25 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p50 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p75 =</span> <span class="cn" style="color: #8f5902;">NULL</span>)) </span>
<span id="cb2-2">thyroid_skim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">my_skim</span>(thyroid)</span>
<span id="cb2-3"></span>
<span id="cb2-4">thyroid_skim <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>skim_type)   <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">n_missing =</span> <span class="st" style="color: #20794D;">"# Missing"</span>, <span class="at" style="color: #657422;">complete_rate =</span> <span class="st" style="color: #20794D;">"Completeness"</span>, </span>
<span id="cb2-8">             <span class="at" style="color: #657422;">numeric.mean =</span> <span class="st" style="color: #20794D;">"Mean"</span>, <span class="at" style="color: #657422;">numeric.sd =</span> <span class="st" style="color: #20794D;">"Standard Deviation"</span>,</span>
<span id="cb2-9">             <span class="at" style="color: #657422;">numeric.p0 =</span> <span class="st" style="color: #20794D;">"Min"</span>, <span class="at" style="color: #657422;">numeric.p100 =</span> <span class="st" style="color: #20794D;">"Max"</span>,</span>
<span id="cb2-10">             <span class="at" style="color: #657422;">numeric.hist =</span> <span class="st" style="color: #20794D;">"Histogram"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Summary of Variables in Thyroid"</span>) </span></code></pre></div>
<div class="cell-output-display column-page">

<div id="rzfmbicyxh" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

:where(#rzfmbicyxh) .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

:where(#rzfmbicyxh) .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#rzfmbicyxh) .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

:where(#rzfmbicyxh) .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

:where(#rzfmbicyxh) .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

:where(#rzfmbicyxh) .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#rzfmbicyxh) .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#rzfmbicyxh) .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

:where(#rzfmbicyxh) .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

:where(#rzfmbicyxh) .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

:where(#rzfmbicyxh) .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

:where(#rzfmbicyxh) .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

:where(#rzfmbicyxh) .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

:where(#rzfmbicyxh) .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

:where(#rzfmbicyxh) .gt_from_md > :first-child {
  margin-top: 0;
}

:where(#rzfmbicyxh) .gt_from_md > :last-child {
  margin-bottom: 0;
}

:where(#rzfmbicyxh) .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

:where(#rzfmbicyxh) .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#rzfmbicyxh) .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

:where(#rzfmbicyxh) .gt_row_group_first td {
  border-top-width: 2px;
}

:where(#rzfmbicyxh) .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#rzfmbicyxh) .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

:where(#rzfmbicyxh) .gt_first_summary_row.thick {
  border-top-width: 2px;
}

:where(#rzfmbicyxh) .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#rzfmbicyxh) .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#rzfmbicyxh) .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

:where(#rzfmbicyxh) .gt_striped {
  background-color: #EDF7FC;
}

:where(#rzfmbicyxh) .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#rzfmbicyxh) .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#rzfmbicyxh) .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#rzfmbicyxh) .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#rzfmbicyxh) .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#rzfmbicyxh) .gt_left {
  text-align: left;
}

:where(#rzfmbicyxh) .gt_center {
  text-align: center;
}

:where(#rzfmbicyxh) .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

:where(#rzfmbicyxh) .gt_font_normal {
  font-weight: normal;
}

:where(#rzfmbicyxh) .gt_font_bold {
  font-weight: bold;
}

:where(#rzfmbicyxh) .gt_font_italic {
  font-style: italic;
}

:where(#rzfmbicyxh) .gt_super {
  font-size: 65%;
}

:where(#rzfmbicyxh) .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

:where(#rzfmbicyxh) .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

:where(#rzfmbicyxh) .gt_indent_1 {
  text-indent: 5px;
}

:where(#rzfmbicyxh) .gt_indent_2 {
  text-indent: 10px;
}

:where(#rzfmbicyxh) .gt_indent_3 {
  text-indent: 15px;
}

:where(#rzfmbicyxh) .gt_indent_4 {
  text-indent: 20px;
}

:where(#rzfmbicyxh) .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table">
  <thead class="gt_header">
    <tr>
      <td colspan="8" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Summary of Variables in Thyroid</td>
    </tr>
    
  </thead>
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="skim_variable">skim_variable</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="# Missing"># Missing</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Completeness">Completeness</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Mean">Mean</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Standard Deviation">Standard Deviation</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Min">Min</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Max">Max</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Histogram">Histogram</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="skim_variable" class="gt_row gt_left">label</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="numeric.mean" class="gt_row gt_right">0.0220000</td>
<td headers="numeric.sd" class="gt_row gt_right">0.1467567</td>
<td headers="numeric.p0" class="gt_row gt_right">0.000000</td>
<td headers="numeric.p100" class="gt_row gt_right">1.00000000</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">TSH</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">-0.6881938</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">0.4455654</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">-4.532599</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">-0.02173999</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▁▁▃▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">T3</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="numeric.mean" class="gt_row gt_right">-6.5046015</td>
<td headers="numeric.sd" class="gt_row gt_right">1.3994315</td>
<td headers="numeric.p0" class="gt_row gt_right">-9.268609</td>
<td headers="numeric.p100" class="gt_row gt_right">-1.43659510</td>
<td headers="numeric.hist" class="gt_row gt_left">▅▇▇▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">TT4</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">-1.7235631</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">0.4421667</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">-5.350910</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">-0.37417607</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▁▁▇▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">T4U</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="numeric.mean" class="gt_row gt_right">-1.4666057</td>
<td headers="numeric.sd" class="gt_row gt_right">0.4495771</td>
<td headers="numeric.p0" class="gt_row gt_right">-6.164484</td>
<td headers="numeric.p100" class="gt_row gt_right">0.00000000</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▇▂</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">FTI</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">-1.0093125</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">0.2522809</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">-3.569533</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">-0.17950862</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▁▁▇▂</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">TBG</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1</td>
<td headers="numeric.mean" class="gt_row gt_right">-1.7932517</td>
<td headers="numeric.sd" class="gt_row gt_right">0.4318577</td>
<td headers="numeric.p0" class="gt_row gt_right">-6.636603</td>
<td headers="numeric.p100" class="gt_row gt_right">0.00000000</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▇▁</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>We see that the dataset is complete with no missing values. All data types are numeric. About 2% of the patients are diagnosed with thyroid disease.</p>
<p>I like to look at a correlation plot to get an overview of how the predictors relate to each other and the outcome. The correlation plot created by <code>corrplot()</code> has the title truncated in a lot of notebook/ markdown environments. The solution, which I found <a href="https://stefaneng.github.io/corrplot-title-cut-off/">here</a>, is to add a margin.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># examining correlation between variables categories</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># moving the outcome to the first column to start</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># will be sorted by decreasing correlation with outcome</span></span>
<span id="cb3-4">thyroid <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-5">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(label, <span class="fu" style="color: #4758AB;">everything</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-6">    cor <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-7">        {.[<span class="fu" style="color: #4758AB;">order</span>(<span class="fu" style="color: #4758AB;">abs</span>(.[, <span class="dv" style="color: #AD0000;">1</span>]), <span class="at" style="color: #657422;">decreasing =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), </span>
<span id="cb3-8">       <span class="fu" style="color: #4758AB;">order</span>(<span class="fu" style="color: #4758AB;">abs</span>(.[, <span class="dv" style="color: #AD0000;">1</span>]), <span class="at" style="color: #657422;">decreasing =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)]} <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;">corrplot</span>( <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'lower'</span>, <span class="at" style="color: #657422;">tl.col =</span> <span class="st" style="color: #20794D;">'black'</span>, </span>
<span id="cb3-10">            <span class="at" style="color: #657422;">addCoef.col =</span> <span class="st" style="color: #20794D;">'black'</span>, <span class="at" style="color: #657422;">cl.ratio =</span> <span class="fl" style="color: #AD0000;">0.2</span>, <span class="at" style="color: #657422;">tl.srt =</span> <span class="dv" style="color: #AD0000;">45</span>, </span>
<span id="cb3-11">            <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">COL2</span>(<span class="st" style="color: #20794D;">'PuOr'</span>, <span class="dv" style="color: #AD0000;">10</span>), <span class="at" style="color: #657422;">diag =</span> <span class="cn" style="color: #8f5902;">FALSE</span> , <span class="at" style="color: #657422;">mar =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb3-12">            <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">" Correlations between Thyroid Disease and hormone levels"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-30-One-Class-SVM/one-class-svm_files/figure-html/corr-plot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Many of the features are strongly correlated with the outcome. So, we can expect to get reasonably decent results from our model.</p>
</section>
<section id="setting-up-for-ml-with-caret" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-for-ml-with-caret">Setting up for ML with caret</h2>
<p>I’m using the <a href="https://cran.r-project.org/web/packages/e1071/index.html">e1071 package</a> for SVM, which is not supported by tidymodels, so I will use <a href="https://topepo.github.io/caret/index.html">caret</a> as the wrapper for a lot of the machine modeling workflow. First, I’m going to make a train and test split. createDataPartition will stratify the sampling over the two classes if you pass it the vector of labels. Stratification is usually critical with an imbalanced dataset; you don’t want a scenario where the train or test dataset has most of the minority class observations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Relabel the classes to TRUE if it is normal data and FALSE if it is</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># an anomaly.  (That is, it is false that the outlier data is normal).  </span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># makes it easier to compare with the output of the SVM model.  </span></span>
<span id="cb4-4">thyroid <span class="ot" style="color: #003B4F;">&lt;-</span> thyroid <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">label =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(label <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>))</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># create data split for test and training</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># will be split among strata</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">2346</span>)</span>
<span id="cb4-10">inTrain <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createDataPartition</span>(thyroid<span class="sc" style="color: #5E5E5E;">$</span>label, <span class="at" style="color: #657422;">p =</span> <span class="fl" style="color: #AD0000;">0.6</span>, <span class="at" style="color: #657422;">list =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) </span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># formatting the data as required for svm()</span></span>
<span id="cb4-13">train_predictors <span class="ot" style="color: #003B4F;">&lt;-</span> thyroid[inTrain, <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb4-14">train_labels <span class="ot" style="color: #003B4F;">&lt;-</span> thyroid[inTrain, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;"># Creating the test set</span></span>
<span id="cb4-17">test <span class="ot" style="color: #003B4F;">&lt;-</span> thyroid[<span class="sc" style="color: #5E5E5E;">-</span>inTrain,]</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;"># formatting the data as required for svm()</span></span>
<span id="cb4-20">test_predictors <span class="ot" style="color: #003B4F;">&lt;-</span> test[,<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb4-21">test_labels <span class="ot" style="color: #003B4F;">&lt;-</span> test[,<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;">#double checking that the test and train sets do contain ~2% disease</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;"># or rather 98% normal.</span></span>
<span id="cb4-25"><span class="fu" style="color: #4758AB;">mean</span>(train_labels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9767055</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">mean</span>(test_labels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9799499</code></pre>
</div>
</div>
</section>
<section id="two-class-svm" class="level2">
<h2 class="anchored" data-anchor-id="two-class-svm">Two-class SVM</h2>
<p>First, I’m going to fit the data with a traditional 2 class classifier. I’m using SVM for the classification. The option <code>type ='C-classification'</code> performs normal classification. I’m not going to get into the details of SVM here, but for more information check out <a href="https://www.r-bloggers.com/2017/04/machine-learning-using-support-vector-machines/">this tutorial</a>. I’m also not going to tune any hyper-parameters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># fitting SVM on training data </span></span>
<span id="cb8-2">two_class_svm_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">svm</span>(train_predictors, <span class="at" style="color: #657422;">y =</span> train_labels,</span>
<span id="cb8-3">               <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'C-classification'</span>,</span>
<span id="cb8-4">               <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb8-5">               <span class="at" style="color: #657422;">kernel =</span> <span class="st" style="color: #20794D;">"radial"</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># now predicting both classes on train and test data</span></span>
<span id="cb8-8">two_class_svm_predtrain <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(two_class_svm_model,train_predictors)</span>
<span id="cb8-9">two_class_svm_predtest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(two_class_svm_model,test_predictors)</span>
<span id="cb8-10"></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;"># code below here will be provided</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;"># seeing how well the model did</span></span>
<span id="cb8-14">two_class_confTrain <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(<span class="at" style="color: #657422;">Predicted =</span> two_class_svm_predtrain, <span class="at" style="color: #657422;">Reference =</span> train_labels)</span>
<span id="cb8-15">two_class_confTest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(<span class="at" style="color: #657422;">Predicted =</span> two_class_svm_predtest, <span class="at" style="color: #657422;">Reference =</span> test_labels)</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;"># printing out the results</span></span>
<span id="cb8-18"><span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"These are the predictions on the training data:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "These are the predictions on the training data:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">print</span>(two_class_confTrain)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Reference
Predicted FALSE TRUE
    FALSE    12    0
    TRUE      2  587</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"These are the predictions on the test data:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "These are the predictions on the test data:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">print</span>(two_class_confTest)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Reference
Predicted FALSE TRUE
    FALSE     6    0
    TRUE      2  391</code></pre>
</div>
</div>
<p>We see that the two-class classifier does very well! In the test data set, it correctly predicts 397/ 399 data points. However, it misidentified a quarter of the disease patients as having normal thyroid. This is as I mentioned above- models can generally achieve good accuracy, but by over predicting the majority class. This result could potentially be unacceptable for a healthcare application.</p>
</section>
<section id="one-class-svm" class="level2">
<h2 class="anchored" data-anchor-id="one-class-svm">One-class SVM</h2>
<p>Now, let’s compare this to the one-class classifier. I will use the one-class classifier in supervised mode; that is, I will pass it labeled data, but only for the normal class. Then I will predict and calculate metrics based on both classes. There are a few different ways we can prepare this data. For ease of comparison with the regular classifier, I will use the same splits but filter out the anomalies from the training data. You might instead filter out all the outliers from the training set and add them to the test set, so you can get a better idea of how the model works for outlier detection. However, I want an apples-to-apples comparison, so I’m not doing that here. The regular and one class SVM will be predicting on the same test data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># subset the labeled data into the two classes</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;"># the normal class should be called "train_normal" and the anomaly</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;"># class should be called "test_outlier"</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">train_normal_class <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">subset</span>(thyroid[inTrain, ], label <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"></span>
<span id="cb16-8">train_normal_class_pred <span class="ot" style="color: #003B4F;">&lt;-</span> train_normal_class[,<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb16-9">train_normal_class_label <span class="ot" style="color: #003B4F;">&lt;-</span> train_normal_class[,<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb16-10"></span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;"># fitting one class SVM on training data- no labels needed! </span></span>
<span id="cb16-13">one_class_svm_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">svm</span>(train_normal_class_pred, <span class="at" style="color: #657422;">y =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb16-14">               <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'one-classification'</span>,</span>
<span id="cb16-15">               <span class="at" style="color: #657422;">nu =</span> <span class="fl" style="color: #AD0000;">0.10</span>,</span>
<span id="cb16-16">               <span class="at" style="color: #657422;">scale =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb16-17">               <span class="at" style="color: #657422;">kernel =</span> <span class="st" style="color: #20794D;">"radial"</span>)</span>
<span id="cb16-18"></span>
<span id="cb16-19"><span class="co" style="color: #5E5E5E;"># now predicting both classes on train and test data</span></span>
<span id="cb16-20">one_class_svm_predtrain <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(one_class_svm_model,train_normal_class_pred)</span>
<span id="cb16-21">one_class_svm_predtest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(one_class_svm_model,test_predictors)</span>
<span id="cb16-22"></span>
<span id="cb16-23"></span>
<span id="cb16-24"><span class="co" style="color: #5E5E5E;"># code below here will be provided</span></span>
<span id="cb16-25"><span class="co" style="color: #5E5E5E;"># seeing how well the model did</span></span>
<span id="cb16-26">one_class_confTrain <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(<span class="at" style="color: #657422;">Predicted =</span> one_class_svm_predtrain,</span>
<span id="cb16-27">                             <span class="at" style="color: #657422;">Reference =</span> train_normal_class_label)</span>
<span id="cb16-28">one_class_confTest <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">table</span>(<span class="at" style="color: #657422;">Predicted =</span> one_class_svm_predtest,</span>
<span id="cb16-29">                            <span class="at" style="color: #657422;">Reference =</span> test_labels)</span>
<span id="cb16-30"></span>
<span id="cb16-31"><span class="co" style="color: #5E5E5E;"># printing out the results</span></span>
<span id="cb16-32"><span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"These are the predictions on the normal class training data only:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "These are the predictions on the normal class training data only:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">print</span>(one_class_confTrain)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Reference
Predicted TRUE
    FALSE   61
    TRUE   526</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"These are the predictions on the test data with both classes:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "These are the predictions on the test data with both classes:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">print</span>(one_class_confTest)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Reference
Predicted FALSE TRUE
    FALSE     8   40
    TRUE      0  351</code></pre>
</div>
</div>
<p>This model doesn’t do quite as well, but it is pretty impressive given that it only learned on normal data. It correctly predicted 359/399 data points in the test set. It incorrectly classified 44 cases as abnormal when they were normal, but correctly found all 8 disease cases.</p>
<p>So now I’ve showed you how to use a one-class SVM to predict outliers. This is an incredible useful tool to keep in mind for classification tasks.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {One {Class} {SVM}},
  date = {2023-03-30},
  url = {https://lsinks.github.io/posts/2023-03-30-One-Class-SVM},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“One Class SVM.”</span> March 30, 2023. <a href="https://lsinks.github.io/posts/2023-03-30-One-Class-SVM">https://lsinks.github.io/posts/2023-03-30-One-Class-SVM</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>Machine Learning</category>
  <category>caret</category>
  <category>SVM</category>
  <category>Classifiers</category>
  <guid>https://lsinks.github.io/posts/2023-03-30-One-Class-SVM/one-class-svm.html</guid>
  <pubDate>Thu, 30 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-30-One-Class-SVM/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Tidy Tuesday: Daylight Savings Time</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones.html</link>
  <description><![CDATA[ 



<p><a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-03-28/readme.md">This week’s TidyTuesday</a> is about the timezone data from <a href="https://data.iana.org/time-zones/tz-link.html">IANA timezone database</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidytuesdayR)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggthemes)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(gt)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">library</span>(lutz)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">library</span>(maps)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">library</span>(scales)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">library</span>(sf)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;">library</span>(ggimage)</span></code></pre></div>
</div>
<p>The history of this database is fascinating. It is used by many computer systems to determine the correct time based on location. To learn more, I recommend reading <a href="https://onezero.medium.com/the-largely-untold-story-of-how-one-guy-in-california-keeps-the-worlds-computers-on-the-right-time-a97a5493bf73">Daniel Rosehill’s article on the topic</a>. For a drier history, check out the <a href="https://en.wikipedia.org/wiki/Tz_database">wikipedia article</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Get the Data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Read in with tidytuesdayR package </span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># This loads the readme and all the datasets for the week of interest</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Either ISO-8601 date or year/week works!</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#tuesdata &lt;- tidytuesdayR::tt_load('2023-03-21')</span></span>
<span id="cb2-9">tuesdata <span class="ot" style="color: #003B4F;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tt_load</span>(<span class="dv" style="color: #AD0000;">2023</span>, <span class="at" style="color: #657422;">week =</span> <span class="dv" style="color: #AD0000;">13</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">transitions <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>transitions</span>
<span id="cb2-12">timezones <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>timezones</span>
<span id="cb2-13">timezone_countries <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>timezone_countries</span>
<span id="cb2-14">countries <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>countries</span></code></pre></div>
</div>
<p>It is suggested that we change the begin and end variables in transitions to datetimes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">transitions <span class="ot" style="color: #003B4F;">&lt;-</span> transitions <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">begin =</span> <span class="fu" style="color: #4758AB;">as_datetime</span>(begin), <span class="at" style="color: #657422;">end =</span> <span class="fu" style="color: #4758AB;">as_datetime</span>(end))</span></code></pre></div>
</div>
<p>I was interested in how many countries had multiple times zones. I know the US has 4 time zones in the continental US.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">num_zones <span class="ot" style="color: #003B4F;">&lt;-</span> timezone_countries <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">count</span>(country_code, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">num_zones <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">filter</span>(n <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;">left_join</span>(countries) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">select</span>(place_name, n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">filter</span>(place_name <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"NA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">place_name =</span> <span class="st" style="color: #20794D;">"Country"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"Number of TZs"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Countries with Multiple TZs"</span>) </span></code></pre></div>
<div class="cell-output-display">

<div id="eorjdmefof" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

:where(#eorjdmefof) .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

:where(#eorjdmefof) .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#eorjdmefof) .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

:where(#eorjdmefof) .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

:where(#eorjdmefof) .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

:where(#eorjdmefof) .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#eorjdmefof) .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#eorjdmefof) .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

:where(#eorjdmefof) .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

:where(#eorjdmefof) .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

:where(#eorjdmefof) .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

:where(#eorjdmefof) .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

:where(#eorjdmefof) .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

:where(#eorjdmefof) .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

:where(#eorjdmefof) .gt_from_md > :first-child {
  margin-top: 0;
}

:where(#eorjdmefof) .gt_from_md > :last-child {
  margin-bottom: 0;
}

:where(#eorjdmefof) .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

:where(#eorjdmefof) .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#eorjdmefof) .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

:where(#eorjdmefof) .gt_row_group_first td {
  border-top-width: 2px;
}

:where(#eorjdmefof) .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#eorjdmefof) .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

:where(#eorjdmefof) .gt_first_summary_row.thick {
  border-top-width: 2px;
}

:where(#eorjdmefof) .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#eorjdmefof) .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#eorjdmefof) .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

:where(#eorjdmefof) .gt_striped {
  background-color: #EDF7FC;
}

:where(#eorjdmefof) .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#eorjdmefof) .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#eorjdmefof) .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#eorjdmefof) .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#eorjdmefof) .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#eorjdmefof) .gt_left {
  text-align: left;
}

:where(#eorjdmefof) .gt_center {
  text-align: center;
}

:where(#eorjdmefof) .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

:where(#eorjdmefof) .gt_font_normal {
  font-weight: normal;
}

:where(#eorjdmefof) .gt_font_bold {
  font-weight: bold;
}

:where(#eorjdmefof) .gt_font_italic {
  font-style: italic;
}

:where(#eorjdmefof) .gt_super {
  font-size: 65%;
}

:where(#eorjdmefof) .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

:where(#eorjdmefof) .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

:where(#eorjdmefof) .gt_indent_1 {
  text-indent: 5px;
}

:where(#eorjdmefof) .gt_indent_2 {
  text-indent: 10px;
}

:where(#eorjdmefof) .gt_indent_3 {
  text-indent: 15px;
}

:where(#eorjdmefof) .gt_indent_4 {
  text-indent: 20px;
}

:where(#eorjdmefof) .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table">
  <thead class="gt_header">
    <tr>
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Countries with Multiple TZs</td>
    </tr>
    
  </thead>
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Country">Country</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Number of TZs">Number of TZs</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="place_name" class="gt_row gt_left">United States</td>
<td headers="n" class="gt_row gt_right">29</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Canada</td>
<td headers="n" class="gt_row gt_right gt_striped">28</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Russia</td>
<td headers="n" class="gt_row gt_right">27</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Brazil</td>
<td headers="n" class="gt_row gt_right gt_striped">16</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Argentina</td>
<td headers="n" class="gt_row gt_right">12</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Australia</td>
<td headers="n" class="gt_row gt_right gt_striped">12</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Mexico</td>
<td headers="n" class="gt_row gt_right">11</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Kazakhstan</td>
<td headers="n" class="gt_row gt_right gt_striped">7</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Greenland</td>
<td headers="n" class="gt_row gt_right">4</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Indonesia</td>
<td headers="n" class="gt_row gt_right gt_striped">4</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Ukraine</td>
<td headers="n" class="gt_row gt_right">4</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Chile</td>
<td headers="n" class="gt_row gt_right gt_striped">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Spain</td>
<td headers="n" class="gt_row gt_right">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Micronesia</td>
<td headers="n" class="gt_row gt_right gt_striped">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Kiribati</td>
<td headers="n" class="gt_row gt_right">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Mongolia</td>
<td headers="n" class="gt_row gt_right gt_striped">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Malaysia</td>
<td headers="n" class="gt_row gt_right">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">French Polynesia</td>
<td headers="n" class="gt_row gt_right gt_striped">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Portugal</td>
<td headers="n" class="gt_row gt_right">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">US minor outlying islands</td>
<td headers="n" class="gt_row gt_right gt_striped">3</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Congo (Dem. Rep.)</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">China</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Cyprus</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Germany</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Ecuador</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Marshall Islands</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">New Zealand</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Papua New Guinea</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Palestine</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">French Southern &amp; Antarctic Lands</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left">Uzbekistan</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="place_name" class="gt_row gt_left gt_striped">Vietnam</td>
<td headers="n" class="gt_row gt_right gt_striped">2</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>And we find that the United States has 29!! time zones in the database. This was unexpected, so say the least. I thought maybe there were some times zones for territories and perhaps military bases that I did not know about. I also thought there might be some extra time zones arising from some states using daylight savings time, while others in the same area might not. I wanted to visualize where these times zones were.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">US_tz <span class="ot" style="color: #003B4F;">&lt;-</span> timezone_countries <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">filter</span>(country_code <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"US"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">left_join</span>(timezones)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(zone)`</code></pre>
</div>
</div>
<p>I found the <a href="https://cran.r-project.org/web/packages/lutz/">lutz package</a> created nice pictograms about when a timezone shifts from DST and back. (This package uses the same underlying database that we are using here to determine when the shifts occur.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"> <span class="fu" style="color: #4758AB;">tz_plot</span>(US_tz<span class="sc" style="color: #5E5E5E;">$</span>zone[<span class="dv" style="color: #AD0000;">21</span>])</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I created the plots and saved them as images. I modified a function I found on <a href="https://stackoverflow.com/questions/66324232/how-to-save-files-with-different-names-using-for-loops-in-r">stack overflow to create the file names</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">wd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getwd</span>()</span>
<span id="cb8-2">filepath <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">file.path</span>(wd)</span>
<span id="cb8-3"></span>
<span id="cb8-4"></span>
<span id="cb8-5">make_filename <span class="ot" style="color: #003B4F;">=</span> <span class="cf" style="color: #003B4F;">function</span>(number){</span>
<span id="cb8-6">  <span class="co" style="color: #5E5E5E;"># doing this, putting it all on a single line or using pipe %&gt;%</span></span>
<span id="cb8-7">  <span class="co" style="color: #5E5E5E;"># is just matter of style</span></span>
<span id="cb8-8">  filename <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"tzplot"</span>, number, <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb8-9">  filename <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">paste0</span>(filename, <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb8-10">  filename <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">file.path</span>(filepath, filename)</span>
<span id="cb8-11">  </span>
<span id="cb8-12">  filename</span>
<span id="cb8-13">}</span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;">#creating a variable to store the files name</span></span>
<span id="cb8-16">US_tz <span class="ot" style="color: #003B4F;">&lt;-</span> US_tz <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-17">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">image_name =</span> <span class="st" style="color: #20794D;">"tbd"</span>)</span>
<span id="cb8-18"></span>
<span id="cb8-19">index <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-20"><span class="cf" style="color: #003B4F;">for</span> (index <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="fu" style="color: #4758AB;">nrow</span>(US_tz))) {</span>
<span id="cb8-21">  filename <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">make_filename</span>(index)</span>
<span id="cb8-22">  US_tz[index , <span class="st" style="color: #20794D;">"image_name"</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> filename</span>
<span id="cb8-23">  <span class="co" style="color: #5E5E5E;"># 1. Open jpeg file</span></span>
<span id="cb8-24">  <span class="fu" style="color: #4758AB;">png</span>(filename, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">350</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">350</span>, <span class="at" style="color: #657422;">bg =</span> <span class="st" style="color: #20794D;">"transparent"</span>)</span>
<span id="cb8-25">  <span class="co" style="color: #5E5E5E;"># 2. Create the plot</span></span>
<span id="cb8-26">  <span class="co" style="color: #5E5E5E;"># you need to print the plot if you call it inside a loop</span></span>
<span id="cb8-27">  <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">tz_plot</span>(US_tz<span class="sc" style="color: #5E5E5E;">$</span>zone[index]))</span>
<span id="cb8-28">  <span class="co" style="color: #5E5E5E;"># 3. Close the file</span></span>
<span id="cb8-29">  <span class="fu" style="color: #4758AB;">dev.off</span>()</span>
<span id="cb8-30">  index <span class="ot" style="color: #003B4F;">=</span> index <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb8-31">}</span></code></pre></div>
</div>
<p>Next I created a world map, inspired by the one from</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
</p><p>My submission for <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a>, Week 13 on time zones. I plot time zones in the world map.<br><br>Code: <a href="https://t.co/y5Cm4tuaVk">https://t.co/y5Cm4tuaVk</a> <a href="https://t.co/BZC3anC5Oa">pic.twitter.com/BZC3anC5Oa</a></p>
<p></p>
<p>— Mitsuo Shiota (<span class="citation" data-cites="mitsuoxv">@mitsuoxv</span>) <a href="https://twitter.com/mitsuoxv/status/1640514380600332290?ref_src=twsrc%5Etfw">March 28, 2023</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I hadn’t previously used the <a href="https://cran.r-project.org/web/packages/maps/">maps package</a>, so I appreciate being introduced to it. The maps package only has a mainland US map, so I used the world map. (Plus, as I mentioned, I thought some of these time zones would be in other parts of the world.) I followed a tutorial on <a href="https://themockup.blog/posts/2020-10-11-embedding-images-in-ggplot/">Plotting Points as Images in ggplot</a> and used the hints about aspect ratio to make my tz_plot circles remain circular. However, that did stretch the world a bit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">aspect_ratio <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">1.618</span>  </span>
<span id="cb9-2"></span>
<span id="cb9-3">us_tz_map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">map_data</span>(<span class="st" style="color: #20794D;">"world"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(long, lat)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">group =</span> group), <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>, </span>
<span id="cb9-6">               <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"gray30"</span>, <span class="at" style="color: #657422;">alpha =</span> <span class="fl" style="color: #AD0000;">0.9</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_image</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> longitude, latitude, <span class="at" style="color: #657422;">image =</span> image_name), </span>
<span id="cb9-8">             <span class="at" style="color: #657422;">data =</span> US_tz, <span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">0.025</span>, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"width"</span>,</span>
<span id="cb9-9">             <span class="at" style="color: #657422;">asp =</span> aspect_ratio) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">coord_sf</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"The United States has 29 Timezone- Mostly Redunant"</span>,</span>
<span id="cb9-12">       <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"Data from: https://data.iana.org/time-zones/tz-link.html"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">aspect.ratio =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">/</span>aspect_ratio,</span>
<span id="cb9-15">    <span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"bottom"</span>,</span>
<span id="cb9-16">    <span class="at" style="color: #657422;">plot.background =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>)</span>
<span id="cb9-17">    )</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="fu" style="color: #4758AB;">ggsave</span>(<span class="st" style="color: #20794D;">"thumbnail.png"</span>, us_tz_map, <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">*</span> aspect_ratio, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb9-20">us_tz_map</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>And what we see is there are a bunch of redundant times zone specification, especially in the Midwest.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">US_tz <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">select</span>(zone, latitude, longitude) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">arrange</span>(longitude) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Countries with Multiple TZs"</span>) </span></code></pre></div>
<div class="cell-output-display">

<div id="lrwakucyxm" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

:where(#lrwakucyxm) .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

:where(#lrwakucyxm) .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#lrwakucyxm) .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

:where(#lrwakucyxm) .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

:where(#lrwakucyxm) .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

:where(#lrwakucyxm) .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#lrwakucyxm) .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#lrwakucyxm) .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

:where(#lrwakucyxm) .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

:where(#lrwakucyxm) .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

:where(#lrwakucyxm) .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

:where(#lrwakucyxm) .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

:where(#lrwakucyxm) .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

:where(#lrwakucyxm) .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

:where(#lrwakucyxm) .gt_from_md > :first-child {
  margin-top: 0;
}

:where(#lrwakucyxm) .gt_from_md > :last-child {
  margin-bottom: 0;
}

:where(#lrwakucyxm) .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

:where(#lrwakucyxm) .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#lrwakucyxm) .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

:where(#lrwakucyxm) .gt_row_group_first td {
  border-top-width: 2px;
}

:where(#lrwakucyxm) .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#lrwakucyxm) .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

:where(#lrwakucyxm) .gt_first_summary_row.thick {
  border-top-width: 2px;
}

:where(#lrwakucyxm) .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#lrwakucyxm) .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#lrwakucyxm) .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

:where(#lrwakucyxm) .gt_striped {
  background-color: #EDF7FC;
}

:where(#lrwakucyxm) .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#lrwakucyxm) .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#lrwakucyxm) .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#lrwakucyxm) .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#lrwakucyxm) .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#lrwakucyxm) .gt_left {
  text-align: left;
}

:where(#lrwakucyxm) .gt_center {
  text-align: center;
}

:where(#lrwakucyxm) .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

:where(#lrwakucyxm) .gt_font_normal {
  font-weight: normal;
}

:where(#lrwakucyxm) .gt_font_bold {
  font-weight: bold;
}

:where(#lrwakucyxm) .gt_font_italic {
  font-style: italic;
}

:where(#lrwakucyxm) .gt_super {
  font-size: 65%;
}

:where(#lrwakucyxm) .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

:where(#lrwakucyxm) .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

:where(#lrwakucyxm) .gt_indent_1 {
  text-indent: 5px;
}

:where(#lrwakucyxm) .gt_indent_2 {
  text-indent: 10px;
}

:where(#lrwakucyxm) .gt_indent_3 {
  text-indent: 15px;
}

:where(#lrwakucyxm) .gt_indent_4 {
  text-indent: 20px;
}

:where(#lrwakucyxm) .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table">
  <thead class="gt_header">
    <tr>
      <td colspan="3" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Countries with Multiple TZs</td>
    </tr>
    
  </thead>
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="zone">zone</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="latitude">latitude</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="longitude">longitude</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="zone" class="gt_row gt_left">America/Adak</td>
<td headers="latitude" class="gt_row gt_right">52.66667</td>
<td headers="longitude" class="gt_row gt_right">-177.13333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Nome</td>
<td headers="latitude" class="gt_row gt_right gt_striped">64.56667</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-165.78333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">Pacific/Honolulu</td>
<td headers="latitude" class="gt_row gt_right">21.71667</td>
<td headers="longitude" class="gt_row gt_right">-158.35000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Anchorage</td>
<td headers="latitude" class="gt_row gt_right gt_striped">61.30000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-149.91667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Yakutat</td>
<td headers="latitude" class="gt_row gt_right">60.35000</td>
<td headers="longitude" class="gt_row gt_right">-140.35000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Sitka</td>
<td headers="latitude" class="gt_row gt_right gt_striped">57.75000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-135.41667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Juneau</td>
<td headers="latitude" class="gt_row gt_right">58.41667</td>
<td headers="longitude" class="gt_row gt_right">-134.60000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Metlakatla</td>
<td headers="latitude" class="gt_row gt_right gt_striped">55.73333</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-132.15000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Los_Angeles</td>
<td headers="latitude" class="gt_row gt_right">34.18333</td>
<td headers="longitude" class="gt_row gt_right">-118.80000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Boise</td>
<td headers="latitude" class="gt_row gt_right gt_striped">44.41667</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-116.35000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Phoenix</td>
<td headers="latitude" class="gt_row gt_right">34.33333</td>
<td headers="longitude" class="gt_row gt_right">-112.46667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Denver</td>
<td headers="latitude" class="gt_row gt_right gt_striped">40.08333</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-105.03333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/North_Dakota/Beulah</td>
<td headers="latitude" class="gt_row gt_right">48.10000</td>
<td headers="longitude" class="gt_row gt_right">-102.43333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/North_Dakota/Center</td>
<td headers="latitude" class="gt_row gt_right gt_striped">48.08333</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-102.23333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/North_Dakota/New_Salem</td>
<td headers="latitude" class="gt_row gt_right">47.53333</td>
<td headers="longitude" class="gt_row gt_right">-102.05000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Menominee</td>
<td headers="latitude" class="gt_row gt_right gt_striped">45.56667</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-88.45000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Indiana/Vincennes</td>
<td headers="latitude" class="gt_row gt_right">39.30000</td>
<td headers="longitude" class="gt_row gt_right">-88.23333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Indiana/Petersburg</td>
<td headers="latitude" class="gt_row gt_right gt_striped">39.00000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-87.98333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Chicago</td>
<td headers="latitude" class="gt_row gt_right">41.85000</td>
<td headers="longitude" class="gt_row gt_right">-87.65000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Indiana/Tell_City</td>
<td headers="latitude" class="gt_row gt_right gt_striped">38.13333</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-87.43333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Indiana/Knox</td>
<td headers="latitude" class="gt_row gt_right">42.03333</td>
<td headers="longitude" class="gt_row gt_right">-87.11667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Indiana/Marengo</td>
<td headers="latitude" class="gt_row gt_right gt_striped">38.90000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-87.01667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Indiana/Winamac</td>
<td headers="latitude" class="gt_row gt_right">41.13333</td>
<td headers="longitude" class="gt_row gt_right">-86.78333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Indiana/Indianapolis</td>
<td headers="latitude" class="gt_row gt_right gt_striped">39.86667</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-86.63333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Kentucky/Louisville</td>
<td headers="latitude" class="gt_row gt_right">38.50000</td>
<td headers="longitude" class="gt_row gt_right">-86.31667</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Kentucky/Monticello</td>
<td headers="latitude" class="gt_row gt_right gt_striped">37.60000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-85.78333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/Indiana/Vevay</td>
<td headers="latitude" class="gt_row gt_right">39.60000</td>
<td headers="longitude" class="gt_row gt_right">-85.10000</td></tr>
    <tr><td headers="zone" class="gt_row gt_left gt_striped">America/Detroit</td>
<td headers="latitude" class="gt_row gt_right gt_striped">43.20000</td>
<td headers="longitude" class="gt_row gt_right gt_striped">-83.78333</td></tr>
    <tr><td headers="zone" class="gt_row gt_left">America/New_York</td>
<td headers="latitude" class="gt_row gt_right">41.55000</td>
<td headers="longitude" class="gt_row gt_right">-74.38333</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Tidy {Tuesday:} {Daylight} {Savings} {Time}},
  date = {2023-03-28},
  url = {https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Tidy Tuesday: Daylight Savings
Time.”</span> March 28, 2023. <a href="https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/">https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>TidyTuesday</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>Data-Viz</category>
  <category>ggimage</category>
  <category>maps</category>
  <guid>https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones.html</guid>
  <pubDate>Tue, 28 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/thumbnail.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>TidyTuesday Week 12: Programming Languages Revisited</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/index.html</link>
  <description><![CDATA[ 



<p>This week, <a href="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/">I participated</a> in my first #TidyTuesday challenge. My goal was to get something out on the day of the challenge rather than perfection. I did notice that the skimr output wasn’t formatted nicely on the webpage. Today, I’m going to delve into the <a href="https://cran.r-project.org/web/packages/skimr/index.html">skimr</a> and <a href="https://quarto.org/docs/output-formats/page-layout.html">Quarto</a> documentation and make a nicer version of the output. Secondly, I’m going to fix up my final figure, which is the one I shared on social media:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
</p><p>My first try at a <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a> challenge. We were given a dataset about what characters are used to comment computer code. This viz shows the most “highly ranked” language for each type of commenting token. The size of the word reflects the # of users of that language. <a href="https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw">#RStats</a> <a href="https://t.co/oGhqaYHD5U">pic.twitter.com/oGhqaYHD5U</a></p>
<p></p>
<p>— Louise Sinks (<span class="citation" data-cites="LouiseSinks">@LouiseSinks</span>) <a href="https://twitter.com/LouiseSinks/status/1638281716614811664?ref_src=twsrc%5Etfw">March 21, 2023</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<section id="skimr-to-understand-your-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="skimr-to-understand-your-data">Skimr to understand your data</h2>
<p>Skimr is a package that provides statistical summaries of the variables in your dataframe. It also provides information about the missingness of each variable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidytuesdayR)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggthemes)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(gt)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(ggrepel)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(visdat) <span class="co" style="color: #5E5E5E;"># visualizing missing data in dataframe</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Get the Data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Read in with tidytuesdayR package </span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># This loads the readme and all the datasets for the week of interest</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Either ISO-8601 date or year/week works!</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#tuesdata &lt;- tidytuesdayR::tt_load('2023-03-21')</span></span>
<span id="cb2-9">tuesdata <span class="ot" style="color: #003B4F;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tt_load</span>(<span class="dv" style="color: #AD0000;">2023</span>, <span class="at" style="color: #657422;">week =</span> <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">languages <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>languages</span></code></pre></div>
</div>
<section id="customizing-the-skim-output" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="customizing-the-skim-output">Customizing the skim Output</h3>
<p>My main objection is that the numerical summary is too wide and has a scroll bar. I especially want the histogram to be viewable on the first screen. I also don’t particularly care about all the quartile information; min and max are enough. If I want to delve more into the stats of a variable, I will do it another way, not with skimr.</p>
<p>First, quarto lets you expand the output of the code chunk to fill the page via the option “#| column: page”, so I’ll do that. Next, I’ll create a custom skim function that drops the p25, p50, and p75 output from the summary of the numerical variables.</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">my_skim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">skim_with</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="fu" style="color: #4758AB;">sfl</span>(<span class="at" style="color: #657422;">p25 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p50 =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">p75 =</span> <span class="cn" style="color: #8f5902;">NULL</span>)) </span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">my_skim</span>(languages)</span></code></pre></div>
<div class="cell-output-display column-page">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">languages</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">4303</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">49</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">21</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logical</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">24</td>
</tr>
<tr class="odd">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 35%">
<col style="width: 10%">
<col style="width: 15%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 9%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pldb_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4303</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">title</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4267</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">description</td>
<td style="text-align: right;">3480</td>
<td style="text-align: right;">0.19</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">2273</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">811</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">type</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">27</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">creators</td>
<td style="text-align: right;">3203</td>
<td style="text-align: right;">0.26</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">253</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">985</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">website</td>
<td style="text-align: right;">2928</td>
<td style="text-align: right;">0.32</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">131</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1368</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">domain_name</td>
<td style="text-align: right;">3588</td>
<td style="text-align: right;">0.17</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">700</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">reference</td>
<td style="text-align: right;">2314</td>
<td style="text-align: right;">0.46</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">251</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1955</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo</td>
<td style="text-align: right;">3402</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">73</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">897</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_description</td>
<td style="text-align: right;">3438</td>
<td style="text-align: right;">0.20</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">419</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">853</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language</td>
<td style="text-align: right;">3829</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">474</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_tm_scope</td>
<td style="text-align: right;">3837</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">34</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">361</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language_type</td>
<td style="text-align: right;">3837</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_ace_mode</td>
<td style="text-align: right;">3838</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language_file_extensions</td>
<td style="text-align: right;">3833</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">606</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">466</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia</td>
<td style="text-align: right;">2731</td>
<td style="text-align: right;">0.37</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">104</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1566</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_summary</td>
<td style="text-align: right;">2884</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">6741</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1407</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_related</td>
<td style="text-align: right;">3145</td>
<td style="text-align: right;">0.27</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1761</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1059</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">line_comment_token</td>
<td style="text-align: right;">3831</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">origin_community</td>
<td style="text-align: right;">1190</td>
<td style="text-align: right;">0.72</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">305</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2232</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">file_type</td>
<td style="text-align: right;">3213</td>
<td style="text-align: right;">0.25</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: logical</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 41%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 6%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: left;">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">features_has_comments</td>
<td style="text-align: right;">3683</td>
<td style="text-align: right;">0.14</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: left;">TRU: 617, FAL: 3</td>
</tr>
<tr class="even">
<td style="text-align: left;">features_has_semantic_indentation</td>
<td style="text-align: right;">3722</td>
<td style="text-align: right;">0.14</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: left;">FAL: 516, TRU: 65</td>
</tr>
<tr class="odd">
<td style="text-align: left;">features_has_line_comments</td>
<td style="text-align: right;">3765</td>
<td style="text-align: right;">0.13</td>
<td style="text-align: right;">0.96</td>
<td style="text-align: left;">TRU: 517, FAL: 21</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_open_source</td>
<td style="text-align: right;">3792</td>
<td style="text-align: right;">0.12</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: left;">TRU: 453, FAL: 58</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 32%">
<col style="width: 9%">
<col style="width: 13%">
<col style="width: 10%">
<col style="width: 11%">
<col style="width: 5%">
<col style="width: 8%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">appeared</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1991.11</td>
<td style="text-align: right;">111.44</td>
<td style="text-align: right;">-2000</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">domain_name_registered</td>
<td style="text-align: right;">3801</td>
<td style="text-align: right;">0.12</td>
<td style="text-align: right;">2011.33</td>
<td style="text-align: right;">7.02</td>
<td style="text-align: right;">1990</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▃▃▇▆</td>
</tr>
<tr class="odd">
<td style="text-align: left;">isbndb</td>
<td style="text-align: right;">3217</td>
<td style="text-align: right;">0.25</td>
<td style="text-align: right;">7.71</td>
<td style="text-align: right;">33.16</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">400</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">book_count</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2.08</td>
<td style="text-align: right;">17.34</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">401</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">semantic_scholar</td>
<td style="text-align: right;">3545</td>
<td style="text-align: right;">0.18</td>
<td style="text-align: right;">3.79</td>
<td style="text-align: right;">8.32</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">52</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">language_rank</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2151.00</td>
<td style="text-align: right;">1242.31</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4302</td>
<td style="text-align: left;">▇▇▇▇▇</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_stars</td>
<td style="text-align: right;">3414</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">2127.40</td>
<td style="text-align: right;">7554.02</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">88526</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_forks</td>
<td style="text-align: right;">3417</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">261.29</td>
<td style="text-align: right;">1203.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">23732</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_updated</td>
<td style="text-align: right;">3418</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">2021.39</td>
<td style="text-align: right;">1.76</td>
<td style="text-align: right;">2012</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_subscribers</td>
<td style="text-align: right;">3418</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">62.34</td>
<td style="text-align: right;">200.88</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2910</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_created</td>
<td style="text-align: right;">3425</td>
<td style="text-align: right;">0.20</td>
<td style="text-align: right;">2015.84</td>
<td style="text-align: right;">3.48</td>
<td style="text-align: right;">2006</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▅▇▇▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_issues</td>
<td style="text-align: right;">3518</td>
<td style="text-align: right;">0.18</td>
<td style="text-align: right;">123.03</td>
<td style="text-align: right;">546.26</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">9522</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_first_commit</td>
<td style="text-align: right;">3567</td>
<td style="text-align: right;">0.17</td>
<td style="text-align: right;">2014.74</td>
<td style="text-align: right;">4.99</td>
<td style="text-align: right;">1987</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▁▁▆▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_repos</td>
<td style="text-align: right;">3833</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">197134.67</td>
<td style="text-align: right;">1226900.57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">16046489</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_daily_page_views</td>
<td style="text-align: right;">2837</td>
<td style="text-align: right;">0.34</td>
<td style="text-align: right;">227.13</td>
<td style="text-align: right;">783.55</td>
<td style="text-align: right;">-1</td>
<td style="text-align: right;">13394</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_backlinks_count</td>
<td style="text-align: right;">2877</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">318.55</td>
<td style="text-align: right;">1635.29</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">34348</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_page_id</td>
<td style="text-align: right;">2893</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">9167847.21</td>
<td style="text-align: right;">13506832.90</td>
<td style="text-align: right;">928</td>
<td style="text-align: right;">63063548</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_appeared</td>
<td style="text-align: right;">2958</td>
<td style="text-align: right;">0.31</td>
<td style="text-align: right;">1991.14</td>
<td style="text-align: right;">17.03</td>
<td style="text-align: right;">1830</td>
<td style="text-align: right;">2019</td>
<td style="text-align: left;">▁▁▁▃▇</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_created</td>
<td style="text-align: right;">3040</td>
<td style="text-align: right;">0.29</td>
<td style="text-align: right;">2005.75</td>
<td style="text-align: right;">3.77</td>
<td style="text-align: right;">2001</td>
<td style="text-align: right;">2020</td>
<td style="text-align: left;">▇▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_revision_count</td>
<td style="text-align: right;">3130</td>
<td style="text-align: right;">0.27</td>
<td style="text-align: right;">330.43</td>
<td style="text-align: right;">813.26</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">10104</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">last_activity</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2000.62</td>
<td style="text-align: right;">84.60</td>
<td style="text-align: right;">-900</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">number_of_users</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">13771.26</td>
<td style="text-align: right;">227712.95</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">7179119</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">number_of_jobs</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">422.18</td>
<td style="text-align: right;">12572.99</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">771996</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">central_package_repository_count</td>
<td style="text-align: right;">1482</td>
<td style="text-align: right;">0.66</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: left;">▁▁▇▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>This output is much nicer. It is a bit wall of text though. I wouldn’t recommend using this in reports, but it is a useful tool when doing your initial dataset analysis. (As a side note, I have noticed skimr doesn’t work well on Kaggle. It performs as expected if you are in interactive mode, but it fails when you try to save the notebook or run non-interactively.)</p>
</section>
<section id="styling-skim-output-with-gt" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="styling-skim-output-with-gt">Styling skim output with gt</h3>
<p>If, for some reason, you did need to include output/ visualizations about missingness in a report, I’d probably recreate visualizations or tables by class of variable, especially if you have many variables, as I do here.</p>
<p>Here’s an example for numeric variables, of which there are 24 in the dataset. First, we will skim the data and then use the <a href="https://gt.rstudio.com/">gt package</a> to style the resulting dataframe as a table. I used a built-in style, but each table element can be individually customized.</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">languages_numeric <span class="ot" style="color: #003B4F;">&lt;-</span> languages <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">select_if</span>(is.numeric)</span>
<span id="cb4-3"></span>
<span id="cb4-4">lang_numeric_skim <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">my_skim</span>(languages_numeric)</span>
<span id="cb4-5"></span>
<span id="cb4-6">lang_numeric_skim <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>skim_type)   <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">n_missing =</span> <span class="st" style="color: #20794D;">"# Missing"</span>, <span class="at" style="color: #657422;">complete_rate =</span> <span class="st" style="color: #20794D;">"Completeness"</span>, </span>
<span id="cb4-10">             <span class="at" style="color: #657422;">numeric.mean =</span> <span class="st" style="color: #20794D;">"Mean"</span>, <span class="at" style="color: #657422;">numeric.sd =</span> <span class="st" style="color: #20794D;">"Standard Deviation"</span>,</span>
<span id="cb4-11">             <span class="at" style="color: #657422;">numeric.p0 =</span> <span class="st" style="color: #20794D;">"Min"</span>, <span class="at" style="color: #657422;">numeric.p100 =</span> <span class="st" style="color: #20794D;">"Max"</span>,</span>
<span id="cb4-12">             <span class="at" style="color: #657422;">numeric.hist =</span> <span class="st" style="color: #20794D;">"Histogram"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">opt_stylize</span>(<span class="at" style="color: #657422;">style =</span> <span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"blue"</span>, <span class="at" style="color: #657422;">add_row_striping =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Summary of Numerical Variables in Languages"</span>) </span></code></pre></div>
<div class="cell-output-display column-page">

<div id="dyzfswubdi" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

:where(#dyzfswubdi) .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

:where(#dyzfswubdi) .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#dyzfswubdi) .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

:where(#dyzfswubdi) .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

:where(#dyzfswubdi) .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

:where(#dyzfswubdi) .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#dyzfswubdi) .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#dyzfswubdi) .gt_col_heading {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

:where(#dyzfswubdi) .gt_column_spanner_outer {
  color: #FFFFFF;
  background-color: #0076BA;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

:where(#dyzfswubdi) .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

:where(#dyzfswubdi) .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

:where(#dyzfswubdi) .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

:where(#dyzfswubdi) .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

:where(#dyzfswubdi) .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
  vertical-align: middle;
}

:where(#dyzfswubdi) .gt_from_md > :first-child {
  margin-top: 0;
}

:where(#dyzfswubdi) .gt_from_md > :last-child {
  margin-bottom: 0;
}

:where(#dyzfswubdi) .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: none;
  border-top-width: 1px;
  border-top-color: #D5D5D5;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D5D5D5;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D5D5D5;
  vertical-align: middle;
  overflow-x: hidden;
}

:where(#dyzfswubdi) .gt_stub {
  color: #333333;
  background-color: #89D3FE;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D5D5D5;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#dyzfswubdi) .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

:where(#dyzfswubdi) .gt_row_group_first td {
  border-top-width: 2px;
}

:where(#dyzfswubdi) .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#dyzfswubdi) .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #5F5F5F;
}

:where(#dyzfswubdi) .gt_first_summary_row.thick {
  border-top-width: 2px;
}

:where(#dyzfswubdi) .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#dyzfswubdi) .gt_grand_summary_row {
  color: #333333;
  background-color: #D5D5D5;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#dyzfswubdi) .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #5F5F5F;
}

:where(#dyzfswubdi) .gt_striped {
  background-color: #EDF7FC;
}

:where(#dyzfswubdi) .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #5F5F5F;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #5F5F5F;
}

:where(#dyzfswubdi) .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#dyzfswubdi) .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#dyzfswubdi) .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#dyzfswubdi) .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#dyzfswubdi) .gt_left {
  text-align: left;
}

:where(#dyzfswubdi) .gt_center {
  text-align: center;
}

:where(#dyzfswubdi) .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

:where(#dyzfswubdi) .gt_font_normal {
  font-weight: normal;
}

:where(#dyzfswubdi) .gt_font_bold {
  font-weight: bold;
}

:where(#dyzfswubdi) .gt_font_italic {
  font-style: italic;
}

:where(#dyzfswubdi) .gt_super {
  font-size: 65%;
}

:where(#dyzfswubdi) .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

:where(#dyzfswubdi) .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

:where(#dyzfswubdi) .gt_indent_1 {
  text-indent: 5px;
}

:where(#dyzfswubdi) .gt_indent_2 {
  text-indent: 10px;
}

:where(#dyzfswubdi) .gt_indent_3 {
  text-indent: 15px;
}

:where(#dyzfswubdi) .gt_indent_4 {
  text-indent: 20px;
}

:where(#dyzfswubdi) .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table">
  <thead class="gt_header">
    <tr>
      <td colspan="8" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Summary of Numerical Variables in Languages</td>
    </tr>
    
  </thead>
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="skim_variable">skim_variable</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="# Missing"># Missing</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Completeness">Completeness</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Mean">Mean</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Standard Deviation">Standard Deviation</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Min">Min</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="Max">Max</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Histogram">Histogram</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="skim_variable" class="gt_row gt_left">appeared</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right">1.991105e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">1.114434e+02</td>
<td headers="numeric.p0" class="gt_row gt_right">-2000</td>
<td headers="numeric.p100" class="gt_row gt_right">2023</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▁▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">domain_name_registered</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3801</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.1166628</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">2.011333e+03</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">7.021132e+00</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">1990</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">2023</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▃▃▇▆</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">isbndb</td>
<td headers="n_missing" class="gt_row gt_right">3217</td>
<td headers="complete_rate" class="gt_row gt_right">0.2523821</td>
<td headers="numeric.mean" class="gt_row gt_right">7.706262e+00</td>
<td headers="numeric.sd" class="gt_row gt_right">3.316421e+01</td>
<td headers="numeric.p0" class="gt_row gt_right">0</td>
<td headers="numeric.p100" class="gt_row gt_right">400</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">book_count</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">2.079479e+00</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.734465e+01</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">401</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">semantic_scholar</td>
<td headers="n_missing" class="gt_row gt_right">3545</td>
<td headers="complete_rate" class="gt_row gt_right">0.1761562</td>
<td headers="numeric.mean" class="gt_row gt_right">3.794195e+00</td>
<td headers="numeric.sd" class="gt_row gt_right">8.316231e+00</td>
<td headers="numeric.p0" class="gt_row gt_right">0</td>
<td headers="numeric.p100" class="gt_row gt_right">52</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">language_rank</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">2.151000e+03</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.242313e+03</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">4302</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▇▇▇▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">github_repo_stars</td>
<td headers="n_missing" class="gt_row gt_right">3414</td>
<td headers="complete_rate" class="gt_row gt_right">0.2066000</td>
<td headers="numeric.mean" class="gt_row gt_right">2.127403e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">7.554016e+03</td>
<td headers="numeric.p0" class="gt_row gt_right">0</td>
<td headers="numeric.p100" class="gt_row gt_right">88526</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">github_repo_forks</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3417</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.2059029</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">2.612867e+02</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.203003e+03</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">23732</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">github_repo_updated</td>
<td headers="n_missing" class="gt_row gt_right">3418</td>
<td headers="complete_rate" class="gt_row gt_right">0.2056705</td>
<td headers="numeric.mean" class="gt_row gt_right">2.021390e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">1.763285e+00</td>
<td headers="numeric.p0" class="gt_row gt_right">2012</td>
<td headers="numeric.p100" class="gt_row gt_right">2023</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▁▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">github_repo_subscribers</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3418</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.2056705</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">6.234237e+01</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">2.008820e+02</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">2910</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">github_repo_created</td>
<td headers="n_missing" class="gt_row gt_right">3425</td>
<td headers="complete_rate" class="gt_row gt_right">0.2040437</td>
<td headers="numeric.mean" class="gt_row gt_right">2.015843e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">3.479589e+00</td>
<td headers="numeric.p0" class="gt_row gt_right">2006</td>
<td headers="numeric.p100" class="gt_row gt_right">2022</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▅▇▇▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">github_repo_issues</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3518</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.1824309</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">1.230344e+02</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">5.462553e+02</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">9522</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">github_repo_first_commit</td>
<td headers="n_missing" class="gt_row gt_right">3567</td>
<td headers="complete_rate" class="gt_row gt_right">0.1710435</td>
<td headers="numeric.mean" class="gt_row gt_right">2.014739e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">4.985409e+00</td>
<td headers="numeric.p0" class="gt_row gt_right">1987</td>
<td headers="numeric.p100" class="gt_row gt_right">2022</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▆▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">github_language_repos</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3833</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.1092261</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">1.971347e+05</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.226901e+06</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">16046489</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">wikipedia_daily_page_views</td>
<td headers="n_missing" class="gt_row gt_right">2837</td>
<td headers="complete_rate" class="gt_row gt_right">0.3406925</td>
<td headers="numeric.mean" class="gt_row gt_right">2.271330e+02</td>
<td headers="numeric.sd" class="gt_row gt_right">7.835524e+02</td>
<td headers="numeric.p0" class="gt_row gt_right">-1</td>
<td headers="numeric.p100" class="gt_row gt_right">13394</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">wikipedia_backlinks_count</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">2877</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.3313967</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">3.185484e+02</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.635289e+03</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">1</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">34348</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">wikipedia_page_id</td>
<td headers="n_missing" class="gt_row gt_right">2893</td>
<td headers="complete_rate" class="gt_row gt_right">0.3276784</td>
<td headers="numeric.mean" class="gt_row gt_right">9.167847e+06</td>
<td headers="numeric.sd" class="gt_row gt_right">1.350683e+07</td>
<td headers="numeric.p0" class="gt_row gt_right">928</td>
<td headers="numeric.p100" class="gt_row gt_right">63063548</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">wikipedia_appeared</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">2958</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.3125726</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">1.991144e+03</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">1.702650e+01</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">1830</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">2019</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▁▁▃▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">wikipedia_created</td>
<td headers="n_missing" class="gt_row gt_right">3040</td>
<td headers="complete_rate" class="gt_row gt_right">0.2935162</td>
<td headers="numeric.mean" class="gt_row gt_right">2.005748e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">3.768240e+00</td>
<td headers="numeric.p0" class="gt_row gt_right">2001</td>
<td headers="numeric.p100" class="gt_row gt_right">2020</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▇▂▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">wikipedia_revision_count</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">3130</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.2726005</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">3.304314e+02</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">8.132556e+02</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">1</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">10104</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">last_activity</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right">2.000616e+03</td>
<td headers="numeric.sd" class="gt_row gt_right">8.459776e+01</td>
<td headers="numeric.p0" class="gt_row gt_right">-900</td>
<td headers="numeric.p100" class="gt_row gt_right">2023</td>
<td headers="numeric.hist" class="gt_row gt_left">▁▁▁▁▇</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">number_of_users</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">0</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">1.377126e+04</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">2.277129e+05</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">7179119</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left">number_of_jobs</td>
<td headers="n_missing" class="gt_row gt_right">0</td>
<td headers="complete_rate" class="gt_row gt_right">1.0000000</td>
<td headers="numeric.mean" class="gt_row gt_right">4.221838e+02</td>
<td headers="numeric.sd" class="gt_row gt_right">1.257299e+04</td>
<td headers="numeric.p0" class="gt_row gt_right">0</td>
<td headers="numeric.p100" class="gt_row gt_right">771996</td>
<td headers="numeric.hist" class="gt_row gt_left">▇▁▁▁▁</td></tr>
    <tr><td headers="skim_variable" class="gt_row gt_left gt_striped">central_package_repository_count</td>
<td headers="n_missing" class="gt_row gt_right gt_striped">1482</td>
<td headers="complete_rate" class="gt_row gt_right gt_striped">0.6555891</td>
<td headers="numeric.mean" class="gt_row gt_right gt_striped">0.000000e+00</td>
<td headers="numeric.sd" class="gt_row gt_right gt_striped">0.000000e+00</td>
<td headers="numeric.p0" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.p100" class="gt_row gt_right gt_striped">0</td>
<td headers="numeric.hist" class="gt_row gt_left gt_striped">▁▁▇▁▁</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
</section>
<section id="visualizing-missingness-with-visdat" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-missingness-with-visdat">Visualizing Missingness with visdat</h3>
<p>The <a href="https://cran.r-project.org/web/packages/visdat/">visdat package</a> makes ggplot- compatible missingness plots. The cluster = TRUE option groups variables that share missingness. Here we see that usually if some of the GitHub data is missing, then all of the GitHub data is missing. The percent missing is listed for each variable, and the overall missingness of the dataset is shown in the legend.</p>
<p>Note vis_miss doesn’t work on very large datasets. The documentation suggests keeping the number of records below 1,000. A more extensive package for exploratory visualizations called <a href="https://naniar.njtierney.com/">naniar</a> could also be used.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">languages_numeric <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">vis_miss</span>(<span class="at" style="color: #657422;">cluster =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Missing Data in the Languages Dataset"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4">  <span class="co" style="color: #5E5E5E;">#theme_classic() +</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">8</span>, <span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">90</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="improving-the-most-popular-language-for-each-comment-token-figure" class="level2">
<h2 class="anchored" data-anchor-id="improving-the-most-popular-language-for-each-comment-token-figure">Improving “The Most Popular Language for Each Comment Token” Figure</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">joined <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"processed_lang.csv"</span> , <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>Now the original figure:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">joined <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(line_comment_token, n, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), </span>
<span id="cb7-3">             <span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), <span class="at" style="color: #657422;">label =</span> title)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-4"> <span class="co" style="color: #5E5E5E;"># geom_point() +</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-7">   <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"The Most Popular Language for Each Comment Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Number of languages using token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-10">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/index_files/figure-html/lang-token-graph-undordered-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I thought I had noted this in the previous post, but one of the tokens, ⍝ , is rendered as an empty box in the ggplot figures. I thought fixing this would be easy. First, I thought I could just pass the Unicode value for that symbol. Then, when that didn’t work, I thought I could change the font to one supporting that symbol. Supposedly, changing the font should be easy, yet after 3 hours working on it, I still had blank squares. There is a nice tutorial on <a href="https://statisticaloddsandends.wordpress.com/2021/07/08/using-different-fonts-with-ggplot2/">changing fonts in ggplot</a> that did not work until <a href="https://github.com/GuangchuangYu/meme/issues/1">I found someone with the same issue</a>. The solution is to add a line of code that doesn’t make much sense to me : <code>windowsFonts("Cambria Math" = windowsFont("Cambria Math"))</code></p>
<p>I saw a nice TidyTuesday figure on Twitter:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
</p><p>My submission for <a href="https://twitter.com/hashtag/TidyTuesday?src=hash&amp;ref_src=twsrc%5Etfw">#TidyTuesday</a>, Week 12 on programming languages. I explore jobs per users.<br><br>Code: <a href="https://t.co/bV9DUHZmro">https://t.co/bV9DUHZmro</a> <a href="https://t.co/2D5YLnE5yz">pic.twitter.com/2D5YLnE5yz</a></p>
<p></p>
<p>— Mitsuo Shiota (<span class="citation" data-cites="mitsuoxv">@mitsuoxv</span>) <a href="https://twitter.com/mitsuoxv/status/1637986238962728961?ref_src=twsrc%5Etfw">March 21, 2023</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>with a caption referencing the original dataset. I’d like to add that. I generally want to increase the figure’s legibility and flip the color scale so that darker blue corresponds to more users. I also don’t think what popular means is entirely clear, so I’d like to explain more fully what I’m graphing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">windowsFonts</span>(<span class="st" style="color: #20794D;">"Cambria Math"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">windowsFont</span>(<span class="st" style="color: #20794D;">"Cambria Math"</span>))</span>
<span id="cb8-2">joined <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(line_comment_token, n, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), </span>
<span id="cb8-4">             <span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), <span class="at" style="color: #657422;">label =</span> title)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;">scale_colour_gradient</span>(<span class="at" style="color: #657422;">high =</span> <span class="st" style="color: #20794D;">"#08306b"</span>, <span class="at" style="color: #657422;">low =</span> <span class="st" style="color: #20794D;">"#6baed6"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-8">   <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"The Most Popular Language for Each Comment Token"</span>,</span>
<span id="cb8-9">       <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Based on # Users and Rank"</span>,</span>
<span id="cb8-10">       <span class="at" style="color: #657422;">caption =</span> <span class="st" style="color: #20794D;">"data from https://pldb.com/"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Number of languages using token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-13">  <span class="fu" style="color: #4758AB;">theme_classic</span>(<span class="at" style="color: #657422;">base_size =</span> <span class="dv" style="color: #AD0000;">16</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-14">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">text =</span> <span class="fu" style="color: #4758AB;">element_text</span>( <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"Cambria Math"</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-15">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">face =</span> <span class="st" style="color: #20794D;">"bold"</span>)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {TidyTuesday {Week} 12: {Programming} {Languages} {Revisited}},
  date = {2023-03-24},
  url = {https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“TidyTuesday Week 12: Programming Languages
Revisited.”</span> March 24, 2023. <a href="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/">https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>TidyTuesday</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <category>Data-Viz</category>
  <category>skimr</category>
  <guid>https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/index.html</guid>
  <pubDate>Fri, 24 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-24-tidytuesday-figure-polishing/thumbnail.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Twitter Cards</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-25-twitter-cards/twitter-cards.html</link>
  <description><![CDATA[ 



<p>Trying to get the picture to show in a twitter card. Apparently you need to specify the image on every document, not just in the main yml doc, which is what I understood from the instructions.</p>
<p>Now this works for new posts, but not old posts.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Twitter {Cards}},
  date = {2023-03-24},
  url = {https://lsinks.github.io/posts/2023-03-25-twitter-cards/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Twitter Cards.”</span> March 24, 2023. <a href="https://lsinks.github.io/posts/2023-03-25-twitter-cards/">https://lsinks.github.io/posts/2023-03-25-twitter-cards/</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <guid>https://lsinks.github.io/posts/2023-03-25-twitter-cards/twitter-cards.html</guid>
  <pubDate>Fri, 24 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-25-twitter-cards/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>TidyTuesday Week 12: Programming Languages</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index.html</link>
  <description><![CDATA[ 



<p>This is my first attempt at Tidy Tuesday. The dataset today is about Programming Languages. The <a href="https://pldb.com/posts/does-every-programming-language-support-line-comments.html">sample visualizations are about the comment codes</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidytuesdayR)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(skimr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(ggthemes)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(gt)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(ggrepel)</span></code></pre></div>
</div>
<p>Load the data first. There has been some cleaning done as outlined on the <a href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-03-21/readme.md">TidyTuesday github page</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Get the Data</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Read in with tidytuesdayR package </span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># This loads the readme and all the datasets for the week of interest</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Either ISO-8601 date or year/week works!</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#tuesdata &lt;- tidytuesdayR::tt_load('2023-03-21')</span></span>
<span id="cb2-9">tuesdata <span class="ot" style="color: #003B4F;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tt_load</span>(<span class="dv" style="color: #AD0000;">2023</span>, <span class="at" style="color: #657422;">week =</span> <span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">languages <span class="ot" style="color: #003B4F;">&lt;-</span> tuesdata<span class="sc" style="color: #5E5E5E;">$</span>languages</span></code></pre></div>
</div>
<p>First, let’s look at how complete the data is. The skimr package produces nice summary information about the variables and their completeness.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">skim</span>(languages)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">languages</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">4303</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">49</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">21</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logical</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">24</td>
</tr>
<tr class="odd">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 35%">
<col style="width: 10%">
<col style="width: 15%">
<col style="width: 4%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 9%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pldb_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4303</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">title</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">56</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4267</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">description</td>
<td style="text-align: right;">3480</td>
<td style="text-align: right;">0.19</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">2273</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">811</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">type</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">27</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">40</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">creators</td>
<td style="text-align: right;">3203</td>
<td style="text-align: right;">0.26</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">253</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">985</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">website</td>
<td style="text-align: right;">2928</td>
<td style="text-align: right;">0.32</td>
<td style="text-align: right;">13</td>
<td style="text-align: right;">131</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1368</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">domain_name</td>
<td style="text-align: right;">3588</td>
<td style="text-align: right;">0.17</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">700</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">reference</td>
<td style="text-align: right;">2314</td>
<td style="text-align: right;">0.46</td>
<td style="text-align: right;">15</td>
<td style="text-align: right;">251</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1955</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo</td>
<td style="text-align: right;">3402</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">25</td>
<td style="text-align: right;">73</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">897</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_description</td>
<td style="text-align: right;">3438</td>
<td style="text-align: right;">0.20</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">419</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">853</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language</td>
<td style="text-align: right;">3829</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">474</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_tm_scope</td>
<td style="text-align: right;">3837</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">34</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">361</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language_type</td>
<td style="text-align: right;">3837</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">11</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_ace_mode</td>
<td style="text-align: right;">3838</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">16</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_language_file_extensions</td>
<td style="text-align: right;">3833</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">606</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">466</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia</td>
<td style="text-align: right;">2731</td>
<td style="text-align: right;">0.37</td>
<td style="text-align: right;">32</td>
<td style="text-align: right;">104</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1566</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_summary</td>
<td style="text-align: right;">2884</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">17</td>
<td style="text-align: right;">6741</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1407</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_related</td>
<td style="text-align: right;">3145</td>
<td style="text-align: right;">0.27</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1761</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1059</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">line_comment_token</td>
<td style="text-align: right;">3831</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">7</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">23</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">origin_community</td>
<td style="text-align: right;">1190</td>
<td style="text-align: right;">0.72</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">305</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2232</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">file_type</td>
<td style="text-align: right;">3213</td>
<td style="text-align: right;">0.25</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: logical</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 41%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 6%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: left;">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">features_has_comments</td>
<td style="text-align: right;">3683</td>
<td style="text-align: right;">0.14</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: left;">TRU: 617, FAL: 3</td>
</tr>
<tr class="even">
<td style="text-align: left;">features_has_semantic_indentation</td>
<td style="text-align: right;">3722</td>
<td style="text-align: right;">0.14</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: left;">FAL: 516, TRU: 65</td>
</tr>
<tr class="odd">
<td style="text-align: left;">features_has_line_comments</td>
<td style="text-align: right;">3765</td>
<td style="text-align: right;">0.13</td>
<td style="text-align: right;">0.96</td>
<td style="text-align: left;">TRU: 517, FAL: 21</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_open_source</td>
<td style="text-align: right;">3792</td>
<td style="text-align: right;">0.12</td>
<td style="text-align: right;">0.89</td>
<td style="text-align: left;">TRU: 453, FAL: 58</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 24%">
<col style="width: 7%">
<col style="width: 10%">
<col style="width: 8%">
<col style="width: 9%">
<col style="width: 4%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 9%">
<col style="width: 6%">
<col style="width: 4%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">appeared</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1991.11</td>
<td style="text-align: right;">111.44</td>
<td style="text-align: right;">-2000</td>
<td style="text-align: right;">1984.00</td>
<td style="text-align: right;">1997.0</td>
<td style="text-align: right;">2012.00</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">domain_name_registered</td>
<td style="text-align: right;">3801</td>
<td style="text-align: right;">0.12</td>
<td style="text-align: right;">2011.33</td>
<td style="text-align: right;">7.02</td>
<td style="text-align: right;">1990</td>
<td style="text-align: right;">2007.00</td>
<td style="text-align: right;">2013.0</td>
<td style="text-align: right;">2017.00</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▃▃▇▆</td>
</tr>
<tr class="odd">
<td style="text-align: left;">isbndb</td>
<td style="text-align: right;">3217</td>
<td style="text-align: right;">0.25</td>
<td style="text-align: right;">7.71</td>
<td style="text-align: right;">33.16</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">2.00</td>
<td style="text-align: right;">400</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">book_count</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2.08</td>
<td style="text-align: right;">17.34</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">401</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">semantic_scholar</td>
<td style="text-align: right;">3545</td>
<td style="text-align: right;">0.18</td>
<td style="text-align: right;">3.79</td>
<td style="text-align: right;">8.32</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">3.00</td>
<td style="text-align: right;">52</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">language_rank</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2151.00</td>
<td style="text-align: right;">1242.31</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1075.50</td>
<td style="text-align: right;">2151.0</td>
<td style="text-align: right;">3226.50</td>
<td style="text-align: right;">4302</td>
<td style="text-align: left;">▇▇▇▇▇</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_stars</td>
<td style="text-align: right;">3414</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">2127.40</td>
<td style="text-align: right;">7554.02</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">29.00</td>
<td style="text-align: right;">194.0</td>
<td style="text-align: right;">1071.00</td>
<td style="text-align: right;">88526</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_forks</td>
<td style="text-align: right;">3417</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">261.29</td>
<td style="text-align: right;">1203.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2.25</td>
<td style="text-align: right;">16.0</td>
<td style="text-align: right;">91.50</td>
<td style="text-align: right;">23732</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_updated</td>
<td style="text-align: right;">3418</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">2021.39</td>
<td style="text-align: right;">1.76</td>
<td style="text-align: right;">2012</td>
<td style="text-align: right;">2022.00</td>
<td style="text-align: right;">2022.0</td>
<td style="text-align: right;">2022.00</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_subscribers</td>
<td style="text-align: right;">3418</td>
<td style="text-align: right;">0.21</td>
<td style="text-align: right;">62.34</td>
<td style="text-align: right;">200.88</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4.00</td>
<td style="text-align: right;">13.0</td>
<td style="text-align: right;">44.00</td>
<td style="text-align: right;">2910</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_created</td>
<td style="text-align: right;">3425</td>
<td style="text-align: right;">0.20</td>
<td style="text-align: right;">2015.84</td>
<td style="text-align: right;">3.48</td>
<td style="text-align: right;">2006</td>
<td style="text-align: right;">2013.00</td>
<td style="text-align: right;">2016.0</td>
<td style="text-align: right;">2019.00</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▅▇▇▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_repo_issues</td>
<td style="text-align: right;">3518</td>
<td style="text-align: right;">0.18</td>
<td style="text-align: right;">123.03</td>
<td style="text-align: right;">546.26</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">9.0</td>
<td style="text-align: right;">61.00</td>
<td style="text-align: right;">9522</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">github_repo_first_commit</td>
<td style="text-align: right;">3567</td>
<td style="text-align: right;">0.17</td>
<td style="text-align: right;">2014.74</td>
<td style="text-align: right;">4.99</td>
<td style="text-align: right;">1987</td>
<td style="text-align: right;">2012.00</td>
<td style="text-align: right;">2015.0</td>
<td style="text-align: right;">2018.00</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▁▁▆▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">github_language_repos</td>
<td style="text-align: right;">3833</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">197134.67</td>
<td style="text-align: right;">1226900.57</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">91.25</td>
<td style="text-align: right;">725.5</td>
<td style="text-align: right;">7900.25</td>
<td style="text-align: right;">16046489</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_daily_page_views</td>
<td style="text-align: right;">2837</td>
<td style="text-align: right;">0.34</td>
<td style="text-align: right;">227.13</td>
<td style="text-align: right;">783.55</td>
<td style="text-align: right;">-1</td>
<td style="text-align: right;">9.00</td>
<td style="text-align: right;">24.0</td>
<td style="text-align: right;">99.00</td>
<td style="text-align: right;">13394</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_backlinks_count</td>
<td style="text-align: right;">2877</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">318.55</td>
<td style="text-align: right;">1635.29</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">13.00</td>
<td style="text-align: right;">39.0</td>
<td style="text-align: right;">126.00</td>
<td style="text-align: right;">34348</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_page_id</td>
<td style="text-align: right;">2893</td>
<td style="text-align: right;">0.33</td>
<td style="text-align: right;">9167847.21</td>
<td style="text-align: right;">13506832.90</td>
<td style="text-align: right;">928</td>
<td style="text-align: right;">375153.75</td>
<td style="text-align: right;">2114700.5</td>
<td style="text-align: right;">12321223.00</td>
<td style="text-align: right;">63063548</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_appeared</td>
<td style="text-align: right;">2958</td>
<td style="text-align: right;">0.31</td>
<td style="text-align: right;">1991.14</td>
<td style="text-align: right;">17.03</td>
<td style="text-align: right;">1830</td>
<td style="text-align: right;">1980.00</td>
<td style="text-align: right;">1994.0</td>
<td style="text-align: right;">2005.00</td>
<td style="text-align: right;">2019</td>
<td style="text-align: left;">▁▁▁▃▇</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wikipedia_created</td>
<td style="text-align: right;">3040</td>
<td style="text-align: right;">0.29</td>
<td style="text-align: right;">2005.75</td>
<td style="text-align: right;">3.77</td>
<td style="text-align: right;">2001</td>
<td style="text-align: right;">2003.00</td>
<td style="text-align: right;">2005.0</td>
<td style="text-align: right;">2007.00</td>
<td style="text-align: right;">2020</td>
<td style="text-align: left;">▇▇▂▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">wikipedia_revision_count</td>
<td style="text-align: right;">3130</td>
<td style="text-align: right;">0.27</td>
<td style="text-align: right;">330.43</td>
<td style="text-align: right;">813.26</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">35.00</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: right;">242.00</td>
<td style="text-align: right;">10104</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">last_activity</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2000.62</td>
<td style="text-align: right;">84.60</td>
<td style="text-align: right;">-900</td>
<td style="text-align: right;">1992.00</td>
<td style="text-align: right;">2006.0</td>
<td style="text-align: right;">2021.00</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▁▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">number_of_users</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">13771.26</td>
<td style="text-align: right;">227712.95</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">20.0</td>
<td style="text-align: right;">230.00</td>
<td style="text-align: right;">7179119</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">number_of_jobs</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">422.18</td>
<td style="text-align: right;">12572.99</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">771996</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">central_package_repository_count</td>
<td style="text-align: right;">1482</td>
<td style="text-align: right;">0.66</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: left;">▁▁▇▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>The data is pretty incomplete. Only 9 of the 49 variables are fully complete. The line comment token is only 0.110 complete and the has comments is only 0.144 complete. This variable has only 3 false values; it is likely that the missing data is skewed towards false. It is more likely that you’d complete this entry if there were a comment, than if there weren’t. It is also possible that the cleaning and prep done to prepare the #TidyTuesday dataset removed some entries which did have FALSE values for the comments.</p>
<p>There are some funny entries that appeared in the skim report, like -2000 as the year the earliest language appeared. It turns out this is Babylonian numerals, so it probably correct. This does show there is a lot more than computer languages in this dataset though.</p>
<p>Looking through the variables, I see there is a “type” in the data dictionary, and it appears that “pl” means programming language. So let’s filter for that. (I couldn’t find an explanation of this variable on https://pldb.com/) It is used on various pages, but I couldn’t find the definition of the types.</p>
<p>Also, rank starts at 0, and I’d like it to start at 1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">programming_lang <span class="ot" style="color: #003B4F;">&lt;-</span> languages <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">filter</span>(type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'pl'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"github"</span>), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"wikipedia"</span>),</span>
<span id="cb4-4">         <span class="sc" style="color: #5E5E5E;">-</span>description, <span class="sc" style="color: #5E5E5E;">-</span>creators, <span class="sc" style="color: #5E5E5E;">-</span>(website<span class="sc" style="color: #5E5E5E;">:</span>semantic_scholar)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">language_rank =</span> language_rank <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">skim</span>(programming_lang)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">programming_lang</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">3368</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">16</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logical</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 24%">
<col style="width: 12%">
<col style="width: 18%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 11%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pldb_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">52</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3368</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">title</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">54</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3347</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">type</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">line_comment_token</td>
<td style="text-align: right;">3002</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">18</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">origin_community</td>
<td style="text-align: right;">883</td>
<td style="text-align: right;">0.74</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1825</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">file_type</td>
<td style="text-align: right;">2609</td>
<td style="text-align: right;">0.23</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: logical</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 41%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 6%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: left;">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">features_has_comments</td>
<td style="text-align: right;">2886</td>
<td style="text-align: right;">0.14</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: left;">TRU: 482</td>
</tr>
<tr class="even">
<td style="text-align: left;">features_has_semantic_indentation</td>
<td style="text-align: right;">2917</td>
<td style="text-align: right;">0.13</td>
<td style="text-align: right;">0.09</td>
<td style="text-align: left;">FAL: 410, TRU: 41</td>
</tr>
<tr class="odd">
<td style="text-align: left;">features_has_line_comments</td>
<td style="text-align: right;">2954</td>
<td style="text-align: right;">0.12</td>
<td style="text-align: right;">0.97</td>
<td style="text-align: left;">TRU: 401, FAL: 13</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_open_source</td>
<td style="text-align: right;">2984</td>
<td style="text-align: right;">0.11</td>
<td style="text-align: right;">0.85</td>
<td style="text-align: left;">TRU: 328, FAL: 56</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 28%">
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 4%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">appeared</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1994.16</td>
<td style="text-align: right;">17.34</td>
<td style="text-align: right;">1948</td>
<td style="text-align: right;">1982.0</td>
<td style="text-align: right;">1994.0</td>
<td style="text-align: right;">2010.0</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▅▇▇▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">language_rank</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2296.75</td>
<td style="text-align: right;">1249.08</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1243.5</td>
<td style="text-align: right;">2334.5</td>
<td style="text-align: right;">3423.5</td>
<td style="text-align: right;">4303</td>
<td style="text-align: left;">▆▆▆▆▇</td>
</tr>
<tr class="odd">
<td style="text-align: left;">last_activity</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2002.04</td>
<td style="text-align: right;">17.91</td>
<td style="text-align: right;">1951</td>
<td style="text-align: right;">1989.0</td>
<td style="text-align: right;">2005.0</td>
<td style="text-align: right;">2019.0</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▂▃▆▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">number_of_users</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">10793.85</td>
<td style="text-align: right;">190197.19</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">15.0</td>
<td style="text-align: right;">165.0</td>
<td style="text-align: right;">5962666</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">number_of_jobs</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">160.22</td>
<td style="text-align: right;">2692.65</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">85206</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">central_package_repository_count</td>
<td style="text-align: right;">939</td>
<td style="text-align: right;">0.72</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0</td>
<td style="text-align: left;">▁▁▇▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>This now produces a dataset with 0.143 completeness for features_has_comments. All non-missing entries are TRUE, which again suggests that FALSE is over represented in the missing data.</p>
<p>Let’s only look at the programming languages that have data for comments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">programming_lang <span class="ot" style="color: #003B4F;">&lt;-</span> programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">filter</span>(features_has_comments <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">skim</span>(programming_lang)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<caption>Data summary</caption>
<tbody>
<tr class="odd">
<td style="text-align: left;">Name</td>
<td style="text-align: left;">programming_lang</td>
</tr>
<tr class="even">
<td style="text-align: left;">Number of rows</td>
<td style="text-align: left;">482</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Number of columns</td>
<td style="text-align: left;">16</td>
</tr>
<tr class="even">
<td style="text-align: left;">_______________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Column type frequency:</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">character</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">logical</td>
<td style="text-align: left;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">numeric</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">________________________</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group variables</td>
<td style="text-align: left;">None</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: character</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 24%">
<col style="width: 12%">
<col style="width: 18%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 11%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">empty</th>
<th style="text-align: right;">n_unique</th>
<th style="text-align: right;">whitespace</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">pldb_id</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">35</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">482</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">title</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">45</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">481</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">type</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">line_comment_token</td>
<td style="text-align: right;">120</td>
<td style="text-align: right;">0.75</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">18</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">origin_community</td>
<td style="text-align: right;">112</td>
<td style="text-align: right;">0.77</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">105</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">311</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: left;">file_type</td>
<td style="text-align: right;">146</td>
<td style="text-align: right;">0.70</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: logical</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 41%">
<col style="width: 12%">
<col style="width: 17%">
<col style="width: 6%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: left;">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">features_has_comments</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: left;">TRU: 482</td>
</tr>
<tr class="even">
<td style="text-align: left;">features_has_semantic_indentation</td>
<td style="text-align: right;">57</td>
<td style="text-align: right;">0.88</td>
<td style="text-align: right;">0.05</td>
<td style="text-align: left;">FAL: 405, TRU: 20</td>
</tr>
<tr class="odd">
<td style="text-align: left;">features_has_line_comments</td>
<td style="text-align: right;">71</td>
<td style="text-align: right;">0.85</td>
<td style="text-align: right;">0.97</td>
<td style="text-align: left;">TRU: 400, FAL: 11</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_open_source</td>
<td style="text-align: right;">305</td>
<td style="text-align: right;">0.37</td>
<td style="text-align: right;">0.91</td>
<td style="text-align: left;">TRU: 161, FAL: 16</td>
</tr>
</tbody>
</table>
<p><strong>Variable type: numeric</strong></p>
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 27%">
<col style="width: 8%">
<col style="width: 11%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 4%">
<col style="width: 6%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 5%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">skim_variable</th>
<th style="text-align: right;">n_missing</th>
<th style="text-align: right;">complete_rate</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">p0</th>
<th style="text-align: right;">p25</th>
<th style="text-align: right;">p50</th>
<th style="text-align: right;">p75</th>
<th style="text-align: right;">p100</th>
<th style="text-align: left;">hist</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">appeared</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2000.17</td>
<td style="text-align: right;">14.07</td>
<td style="text-align: right;">1957</td>
<td style="text-align: right;">1991.00</td>
<td style="text-align: right;">2003.0</td>
<td style="text-align: right;">2011.00</td>
<td style="text-align: right;">2022</td>
<td style="text-align: left;">▁▂▆▇▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">language_rank</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">656.10</td>
<td style="text-align: right;">559.75</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">201.25</td>
<td style="text-align: right;">515.5</td>
<td style="text-align: right;">997.25</td>
<td style="text-align: right;">2994</td>
<td style="text-align: left;">▇▃▂▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">last_activity</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">2016.20</td>
<td style="text-align: right;">8.27</td>
<td style="text-align: right;">1967</td>
<td style="text-align: right;">2011.00</td>
<td style="text-align: right;">2022.0</td>
<td style="text-align: right;">2022.00</td>
<td style="text-align: right;">2023</td>
<td style="text-align: left;">▁▁▁▂▇</td>
</tr>
<tr class="even">
<td style="text-align: left;">number_of_users</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">62892.08</td>
<td style="text-align: right;">462314.18</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">112.00</td>
<td style="text-align: right;">437.5</td>
<td style="text-align: right;">1615.25</td>
<td style="text-align: right;">5962666</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="odd">
<td style="text-align: left;">number_of_jobs</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1.00</td>
<td style="text-align: right;">971.30</td>
<td style="text-align: right;">6489.83</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">85206</td>
<td style="text-align: left;">▇▁▁▁▁</td>
</tr>
<tr class="even">
<td style="text-align: left;">central_package_repository_count</td>
<td style="text-align: right;">136</td>
<td style="text-align: right;">0.72</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.00</td>
<td style="text-align: right;">0</td>
<td style="text-align: left;">▁▁▇▁▁</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>This subset is still moderately incomplete for information about comments. Only 75% of the data has the type of comment entered (#, //, etc). 86% of the entries are completed for “feature_has_line_comments” which indicates if comments must occupy a single line or if they can be made inline.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">group_by</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">count</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="fu" style="color: #4758AB;">fct_rev</span>(<span class="fu" style="color: #4758AB;">fct_reorder</span>(line_comment_token, n)), n)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"dodgerblue2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Count"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Comment Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Popularity of different comment tokens"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-10">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">45</span>,  <span class="at" style="color: #657422;">vjust =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.25</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/most-popular-comment-token-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Let’s make a nice table of the popular comment types.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># | label: table-tokens</span></span>
<span id="cb7-2">programming_lang2 <span class="ot" style="color: #003B4F;">&lt;-</span> programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">count</span>(line_comment_token, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) </span>
<span id="cb7-5"></span>
<span id="cb7-6">programming_lang2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;">gt</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">tab_header</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Most Common Comment Tokens"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;">cols_label</span>(<span class="at" style="color: #657422;">line_comment_token =</span> <span class="st" style="color: #20794D;">"Token"</span>, <span class="at" style="color: #657422;">n =</span> <span class="st" style="color: #20794D;">"# of Languages that use token"</span>)</span></code></pre></div>
<div class="cell-output-display">

<div id="pjpfmdqtoy" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>html {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;
}

:where(#pjpfmdqtoy) .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

:where(#pjpfmdqtoy) .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

:where(#pjpfmdqtoy) .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

:where(#pjpfmdqtoy) .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

:where(#pjpfmdqtoy) .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

:where(#pjpfmdqtoy) .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

:where(#pjpfmdqtoy) .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

:where(#pjpfmdqtoy) .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

:where(#pjpfmdqtoy) .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

:where(#pjpfmdqtoy) .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

:where(#pjpfmdqtoy) .gt_from_md > :first-child {
  margin-top: 0;
}

:where(#pjpfmdqtoy) .gt_from_md > :last-child {
  margin-bottom: 0;
}

:where(#pjpfmdqtoy) .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

:where(#pjpfmdqtoy) .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#pjpfmdqtoy) .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

:where(#pjpfmdqtoy) .gt_row_group_first td {
  border-top-width: 2px;
}

:where(#pjpfmdqtoy) .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#pjpfmdqtoy) .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_first_summary_row.thick {
  border-top-width: 2px;
}

:where(#pjpfmdqtoy) .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#pjpfmdqtoy) .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

:where(#pjpfmdqtoy) .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-left: 4px;
  padding-right: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#pjpfmdqtoy) .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

:where(#pjpfmdqtoy) .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

:where(#pjpfmdqtoy) .gt_left {
  text-align: left;
}

:where(#pjpfmdqtoy) .gt_center {
  text-align: center;
}

:where(#pjpfmdqtoy) .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

:where(#pjpfmdqtoy) .gt_font_normal {
  font-weight: normal;
}

:where(#pjpfmdqtoy) .gt_font_bold {
  font-weight: bold;
}

:where(#pjpfmdqtoy) .gt_font_italic {
  font-style: italic;
}

:where(#pjpfmdqtoy) .gt_super {
  font-size: 65%;
}

:where(#pjpfmdqtoy) .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 75%;
  vertical-align: 0.4em;
}

:where(#pjpfmdqtoy) .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

:where(#pjpfmdqtoy) .gt_indent_1 {
  text-indent: 5px;
}

:where(#pjpfmdqtoy) .gt_indent_2 {
  text-indent: 10px;
}

:where(#pjpfmdqtoy) .gt_indent_3 {
  text-indent: 15px;
}

:where(#pjpfmdqtoy) .gt_indent_4 {
  text-indent: 20px;
}

:where(#pjpfmdqtoy) .gt_indent_5 {
  text-indent: 25px;
}
</style>
<table class="gt_table">
  <thead class="gt_header">
    <tr>
      <td colspan="2" class="gt_heading gt_title gt_font_normal gt_bottom_border" style="">Most Common Comment Tokens</td>
    </tr>
    
  </thead>
  <thead class="gt_col_headings">
    <tr>
      <th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1" scope="col" id="Token">Token</th>
      <th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1" scope="col" id="# of Languages that use token"># of Languages that use token</th>
    </tr>
  </thead>
  <tbody class="gt_table_body">
    <tr><td headers="line_comment_token" class="gt_row gt_left">//</td>
<td headers="n" class="gt_row gt_right">161</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">#</td>
<td headers="n" class="gt_row gt_right">70</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">;</td>
<td headers="n" class="gt_row gt_right">49</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">--</td>
<td headers="n" class="gt_row gt_right">31</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">'</td>
<td headers="n" class="gt_row gt_right">16</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">%</td>
<td headers="n" class="gt_row gt_right">12</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">!</td>
<td headers="n" class="gt_row gt_right">7</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">*</td>
<td headers="n" class="gt_row gt_right">5</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">REM</td>
<td headers="n" class="gt_row gt_right">2</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">*&gt;</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">---</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">/</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">NB.</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">\</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">\*</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">__</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">~</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
    <tr><td headers="line_comment_token" class="gt_row gt_left">⍝</td>
<td headers="n" class="gt_row gt_right">1</td></tr>
  </tbody>
  
  
</table>
</div>
</div>
</div>
<p>There is a language rank, which measures the popularity of the language based on signals such as number of users and number of jobs. Let’s see the average rank of languages for each token.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">group_by</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">avg_rank =</span> <span class="fu" style="color: #4758AB;">mean</span>(language_rank)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>((<span class="fu" style="color: #4758AB;">fct_reorder</span>(line_comment_token, avg_rank)), avg_rank)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">geom_col</span>(<span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"dodgerblue2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Average Rank of Language"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Comment Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Average rank of languages using different comment tokens"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">45</span>,  <span class="at" style="color: #657422;">vjust =</span> <span class="fl" style="color: #AD0000;">0.25</span>, <span class="at" style="color: #657422;">hjust =</span> <span class="fl" style="color: #AD0000;">0.25</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/avg-rank-by-token-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The highest (average) ranked token is “*&gt;”. What languages use this?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(line_comment_token <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"*&gt;"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">select</span>(title, language_rank, line_comment_token)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  title language_rank line_comment_token
  &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;             
1 COBOL            19 *&gt;                </code></pre>
</div>
</div>
<p>Only COBOL does, so the rank of this token isn’t diluted by many less popular languages. We can view the distribution of the language ranks for all the tokens.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(line_comment_token, language_rank)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"dodgerblue2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"The rank of languages by token."</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">ylab</span> (<span class="st" style="color: #20794D;">"Language Rank"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/boxplot-ranks-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay, let’s clean this up. I’d like it sorted by the median rank. Remeber rank is in reverse numerical order- a low number means a higher rank.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="fu" style="color: #4758AB;">fct_reorder</span>(line_comment_token, language_rank,</span>
<span id="cb12-4">                         <span class="at" style="color: #657422;">.fun =</span> median, <span class="at" style="color: #657422;">.desc =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), language_rank)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">geom_boxplot</span>(<span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"dodgerblue2"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"The rank of languages by token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Language Rank"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb12-9">    <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/sorted-rank-boxplot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Let’s see the most popular language for each symbol. There might be a way to do this all at once, but I’m going to pull it out with joins to previous tables I’ve created.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">programming_lang3 <span class="ot" style="color: #003B4F;">&lt;-</span> programming_lang <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">is.na</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">group_by</span>(line_comment_token) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">highest_rank =</span> <span class="fu" style="color: #4758AB;">min</span>(language_rank)) </span>
<span id="cb13-5"></span>
<span id="cb13-6">join_madness <span class="ot" style="color: #003B4F;">&lt;-</span> programming_lang2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">left_join</span>(programming_lang3, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"line_comment_token"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">left_join</span>(programming_lang, </span>
<span id="cb13-9">            <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"highest_rank"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"language_rank"</span>,</span>
<span id="cb13-10">                   <span class="st" style="color: #20794D;">"line_comment_token"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"line_comment_token"</span>)) </span>
<span id="cb13-11"></span>
<span id="cb13-12">join_madness <span class="ot" style="color: #003B4F;">&lt;-</span> join_madness <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;">select</span>(line_comment_token, n, highest_rank, title, appeared, number_of_users,</span>
<span id="cb13-14">         number_of_jobs)</span></code></pre></div>
</div>
<p>So now we have a bunch of summarized data in a single dataframe. Here’s a graph. It is saying something, but I’m not sure what. When you can’t come up with a concise title, then you probably don’t know what you are trying to say…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">join_madness <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(highest_rank, n, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), </span>
<span id="cb14-3">             <span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), <span class="at" style="color: #657422;">label =</span> line_comment_token)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Popularity of tokens by language rank and usage"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Highest Rank of language using Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-9">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Number of Languages using token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/tokens-pop-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is a visualization of the highest ranked languages for each token. The number of users of the dominant language is also encoded in the size and color of the label. Having it ordered makes it difficult to tell if Java or Python is the most popular/ highest ranked language.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">join_madness <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="fu" style="color: #4758AB;">fct_rev</span>(<span class="fu" style="color: #4758AB;">fct_reorder</span>(line_comment_token, highest_rank)), n,</span>
<span id="cb15-3">             <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), <span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users),</span>
<span id="cb15-4">             <span class="at" style="color: #657422;">label =</span> title)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-5"> <span class="co" style="color: #5E5E5E;"># geom_point() +</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-8">   <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"The Most Popular Language for Each Comment Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Number of languages using token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/lang-token-graph-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here is the same graph just ordered “alphabetically” by token.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">join_madness <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(line_comment_token, n, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), </span>
<span id="cb16-3">             <span class="at" style="color: #657422;">color =</span> <span class="fu" style="color: #4758AB;">log</span>(number_of_users), <span class="at" style="color: #657422;">label =</span> title)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-4"> <span class="co" style="color: #5E5E5E;"># geom_point() +</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;">geom_text_repel</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-7">   <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"The Most Popular Language for Each Comment Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;">xlab</span>(<span class="st" style="color: #20794D;">"Token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;">ylab</span>(<span class="st" style="color: #20794D;">"Number of languages using token"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;">theme_classic</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index_files/figure-html/lang-token-graph-undordered-1.png" class="img-fluid" width="672"></p>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {TidyTuesday {Week} 12: {Programming} {Languages}},
  date = {2023-03-21},
  url = {https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“TidyTuesday Week 12: Programming
Languages.”</span> March 21, 2023. <a href="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/">https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>TidyTuesday</category>
  <category>R-code</category>
  <category>Code-Along</category>
  <guid>https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/index.html</guid>
  <pubDate>Tue, 21 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/pop-lang-by-token.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>Creating a Blog</title>
  <dc:creator>Louise E. Sinks</dc:creator>
  <link>https://lsinks.github.io/posts/2023-03-14-tester-post/index.html</link>
  <description><![CDATA[ 



<p>This is my first blog entry. I am following the tutorials here:</p>
<p>https://ucsb-meds.github.io/creating-quarto-websites/#where-you-should-start-changing-stuff</p>
<p>https://samanthacsik.github.io/posts/2022-10-24-quarto-blogs/</p>
<p>Generally, this process has been a nightmare. The website is being created within RStudio, then pushed to GitHub and published through GitHub pages. As I’ve made changes per the tutorial, I have repeatedly been unable to push changes to GitHub due to a variety of fatal errors and merge conflicts. Since I’m only working in a single place I have no idea where all these merge conflicts are arising from. I don’t understand how I can have everything in sync everywhere, make a local change, commit it, and then be unable to push it. I’ve had to delete the GitHub repository at least half a dozen times and recreate it from my local version because I couldn’t find any way to fix the conflicts and fatal errors. I’m not sure whose fault this is (Quarto, GitHub or RStudio). It could be my fault, but I really don’t understand why things are breaking so spectacularly. I’ve used git/ GitHub for version control of R projects before and I’ve never had an error. (I don’t really see how you can get a merge conflict if you are the only person working on a project and you are only working at a single location, but maybe I’m failing to envision some use case.)</p>
<p>I decided to go with Quarto because it is now built-in to RStudio and the tutorials by Samantha Csik seemed very clear. (And to be fair, they are! Very easy to follow.) The tutorials I found for R Markdown to make a website seemed a little more involved and a little more kludgey.</p>
<p>Couldn’t have done it without the best helper turtle in the world. Mac took a lot of executive naps to work on the problem.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="An orange box turtle is peering out of an office made out of a cardboard box."><img src="https://lsinks.github.io/posts/2023-03-14-tester-post/mac_face.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{e.sinks2023,
  author = {Louise E. Sinks},
  title = {Creating a {Blog}},
  date = {2023-03-14},
  url = {https://lsinks.github.io/2023-03-14_tester-post},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-e.sinks2023" class="csl-entry quarto-appendix-citeas">
Louise E. Sinks. 2023. <span>“Creating a Blog.”</span> March 14, 2023.
<a href="https://lsinks.github.io/2023-03-14_tester-post">https://lsinks.github.io/2023-03-14_tester-post</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>R</category>
  <category>turtle</category>
  <guid>https://lsinks.github.io/posts/2023-03-14-tester-post/index.html</guid>
  <pubDate>Tue, 14 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://lsinks.github.io/posts/2023-03-14-tester-post/mckinley.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
