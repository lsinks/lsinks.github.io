[
  {
    "objectID": "blogroll.html",
    "href": "blogroll.html",
    "title": "Blog Roll",
    "section": "",
    "text": "Blogs:\nR Bloggers\nTutorials I’ve followed:\nWord Games Project:\nr letter frequency in R packages via R-Bloggers\nSetting Up Webpage:\nCreating Quarto Websites by Sam Csik\nAlbert Rapp: The ultimate guide to starting a Quarto blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Louise E. Sinks",
    "section": "",
    "text": "Hello! I’m Louise Sinks.\nI’m a chemist by training. My favorite part was always analysis and modeling. I’ve recently been learning R and Python, and this webpage is a place to document my data science journey. While I did a lot of coding and modeling as a chemist, I did not formally learn about modeling and machine learning frameworks. (I wish I had! My post-doc would have been a lot smoother.)"
  },
  {
    "objectID": "posts/2023-03-14-tester-post/index.html",
    "href": "posts/2023-03-14-tester-post/index.html",
    "title": "Creating a Blog",
    "section": "",
    "text": "This is my first blog entry. I am following the tutorials here:\nhttps://ucsb-meds.github.io/creating-quarto-websites/#where-you-should-start-changing-stuff\nhttps://samanthacsik.github.io/posts/2022-10-24-quarto-blogs/\nGenerally, this process has been a nightmare. The website is being created within RStudio, then pushed to GitHub and published through GitHub pages. As I’ve made changes per the tutorial, I have repeatedly been unable to push changes to GitHub due to a variety of fatal errors and merge conflicts. Since I’m only working in a single place I have no idea where all these merge conflicts are arising from. I don’t understand how I can have everything in sync everywhere, make a local change, commit it, and then be unable to push it. I’ve had to delete the GitHub repository at least half a dozen times and recreate it from my local version because I couldn’t find any way to fix the conflicts and fatal errors. I’m not sure whose fault this is (Quarto, GitHub or RStudio). It could be my fault, but I really don’t understand why things are breaking so spectacularly. I’ve used git/ GitHub for version control of R projects before and I’ve never had an error. (I don’t really see how you can get a merge conflict if you are the only person working on a project and you are only working at a single location, but maybe I’m failing to envision some use case.)\nI decided to go with Quarto because it is now built-in to RStudio and the tutorials by Samantha Csik seemed very clear. (And to be fair, they are! Very easy to follow.) The tutorials I found for R Markdown to make a website seemed a little more involved and a little more kludgey.\nCouldn’t have done it without the best helper turtle in the world. Mac took a lot of executive naps to work on the problem.\n\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {Creating a {Blog}},\n  date = {2023-03-14},\n  url = {https://lsinks.github.io/2023-03-14_tester-post},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “Creating a Blog.” March 14, 2023.\nhttps://lsinks.github.io/2023-03-14_tester-post."
  },
  {
    "objectID": "posts/2023-03-21-tidytuesday-programming-languages/index.html",
    "href": "posts/2023-03-21-tidytuesday-programming-languages/index.html",
    "title": "TidyTuesday Week 12: Programming Languages",
    "section": "",
    "text": "This is my first attempt at Tidy Tuesday. The dataset today is about Programming Languages. The sample visualizations are about the comment codes.\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(ggthemes)\nlibrary(gt)\nlibrary(ggrepel)\n\nLoad the data first. There has been some cleaning done as outlined on the TidyTuesday github page.\n\n# Get the Data\n\n# Read in with tidytuesdayR package \n# This loads the readme and all the datasets for the week of interest\n\n# Either ISO-8601 date or year/week works!\n\n#tuesdata <- tidytuesdayR::tt_load('2023-03-21')\ntuesdata <- tidytuesdayR::tt_load(2023, week = 12)\n\nlanguages <- tuesdata$languages\n\nFirst, let’s look at how complete the data is. The skimr package produces nice summary information about the variables and their completeness.\n\nskim(languages)\n\n\nData summary\n\n\nName\nlanguages\n\n\nNumber of rows\n4303\n\n\nNumber of columns\n49\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n21\n\n\nlogical\n4\n\n\nnumeric\n24\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\npldb_id\n0\n1.00\n1\n52\n0\n4303\n0\n\n\ntitle\n0\n1.00\n1\n56\n0\n4267\n0\n\n\ndescription\n3480\n0.19\n4\n2273\n0\n811\n0\n\n\ntype\n0\n1.00\n2\n27\n0\n40\n0\n\n\ncreators\n3203\n0.26\n2\n253\n0\n985\n0\n\n\nwebsite\n2928\n0.32\n13\n131\n0\n1368\n0\n\n\ndomain_name\n3588\n0.17\n6\n32\n0\n700\n0\n\n\nreference\n2314\n0.46\n15\n251\n0\n1955\n0\n\n\ngithub_repo\n3402\n0.21\n25\n73\n0\n897\n0\n\n\ngithub_repo_description\n3438\n0.20\n4\n419\n0\n853\n0\n\n\ngithub_language\n3829\n0.11\n1\n30\n0\n474\n0\n\n\ngithub_language_tm_scope\n3837\n0.11\n4\n34\n0\n361\n0\n\n\ngithub_language_type\n3837\n0.11\n4\n11\n0\n4\n0\n\n\ngithub_language_ace_mode\n3838\n0.11\n1\n16\n0\n96\n0\n\n\ngithub_language_file_extensions\n3833\n0.11\n1\n606\n0\n466\n0\n\n\nwikipedia\n2731\n0.37\n32\n104\n0\n1566\n0\n\n\nwikipedia_summary\n2884\n0.33\n17\n6741\n0\n1407\n0\n\n\nwikipedia_related\n3145\n0.27\n1\n1761\n0\n1059\n0\n\n\nline_comment_token\n3831\n0.11\n1\n7\n0\n23\n0\n\n\norigin_community\n1190\n0.72\n3\n305\n0\n2232\n0\n\n\nfile_type\n3213\n0.25\n2\n6\n0\n4\n0\n\n\n\nVariable type: logical\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nfeatures_has_comments\n3683\n0.14\n1.00\nTRU: 617, FAL: 3\n\n\nfeatures_has_semantic_indentation\n3722\n0.14\n0.11\nFAL: 516, TRU: 65\n\n\nfeatures_has_line_comments\n3765\n0.13\n0.96\nTRU: 517, FAL: 21\n\n\nis_open_source\n3792\n0.12\n0.89\nTRU: 453, FAL: 58\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nappeared\n0\n1.00\n1991.11\n111.44\n-2000\n1984.00\n1997.0\n2012.00\n2023\n▁▁▁▁▇\n\n\ndomain_name_registered\n3801\n0.12\n2011.33\n7.02\n1990\n2007.00\n2013.0\n2017.00\n2023\n▁▃▃▇▆\n\n\nisbndb\n3217\n0.25\n7.71\n33.16\n0\n0.00\n0.0\n2.00\n400\n▇▁▁▁▁\n\n\nbook_count\n0\n1.00\n2.08\n17.34\n0\n0.00\n0.0\n0.00\n401\n▇▁▁▁▁\n\n\nsemantic_scholar\n3545\n0.18\n3.79\n8.32\n0\n0.00\n0.0\n3.00\n52\n▇▁▁▁▁\n\n\nlanguage_rank\n0\n1.00\n2151.00\n1242.31\n0\n1075.50\n2151.0\n3226.50\n4302\n▇▇▇▇▇\n\n\ngithub_repo_stars\n3414\n0.21\n2127.40\n7554.02\n0\n29.00\n194.0\n1071.00\n88526\n▇▁▁▁▁\n\n\ngithub_repo_forks\n3417\n0.21\n261.29\n1203.00\n0\n2.25\n16.0\n91.50\n23732\n▇▁▁▁▁\n\n\ngithub_repo_updated\n3418\n0.21\n2021.39\n1.76\n2012\n2022.00\n2022.0\n2022.00\n2023\n▁▁▁▁▇\n\n\ngithub_repo_subscribers\n3418\n0.21\n62.34\n200.88\n0\n4.00\n13.0\n44.00\n2910\n▇▁▁▁▁\n\n\ngithub_repo_created\n3425\n0.20\n2015.84\n3.48\n2006\n2013.00\n2016.0\n2019.00\n2022\n▁▅▇▇▇\n\n\ngithub_repo_issues\n3518\n0.18\n123.03\n546.26\n0\n1.00\n9.0\n61.00\n9522\n▇▁▁▁▁\n\n\ngithub_repo_first_commit\n3567\n0.17\n2014.74\n4.99\n1987\n2012.00\n2015.0\n2018.00\n2022\n▁▁▁▆▇\n\n\ngithub_language_repos\n3833\n0.11\n197134.67\n1226900.57\n0\n91.25\n725.5\n7900.25\n16046489\n▇▁▁▁▁\n\n\nwikipedia_daily_page_views\n2837\n0.34\n227.13\n783.55\n-1\n9.00\n24.0\n99.00\n13394\n▇▁▁▁▁\n\n\nwikipedia_backlinks_count\n2877\n0.33\n318.55\n1635.29\n1\n13.00\n39.0\n126.00\n34348\n▇▁▁▁▁\n\n\nwikipedia_page_id\n2893\n0.33\n9167847.21\n13506832.90\n928\n375153.75\n2114700.5\n12321223.00\n63063548\n▇▁▁▁▁\n\n\nwikipedia_appeared\n2958\n0.31\n1991.14\n17.03\n1830\n1980.00\n1994.0\n2005.00\n2019\n▁▁▁▃▇\n\n\nwikipedia_created\n3040\n0.29\n2005.75\n3.77\n2001\n2003.00\n2005.0\n2007.00\n2020\n▇▇▂▁▁\n\n\nwikipedia_revision_count\n3130\n0.27\n330.43\n813.26\n1\n35.00\n84.0\n242.00\n10104\n▇▁▁▁▁\n\n\nlast_activity\n0\n1.00\n2000.62\n84.60\n-900\n1992.00\n2006.0\n2021.00\n2023\n▁▁▁▁▇\n\n\nnumber_of_users\n0\n1.00\n13771.26\n227712.95\n0\n0.00\n20.0\n230.00\n7179119\n▇▁▁▁▁\n\n\nnumber_of_jobs\n0\n1.00\n422.18\n12572.99\n0\n0.00\n0.0\n0.00\n771996\n▇▁▁▁▁\n\n\ncentral_package_repository_count\n1482\n0.66\n0.00\n0.00\n0\n0.00\n0.0\n0.00\n0\n▁▁▇▁▁\n\n\n\n\n\nThe data is pretty incomplete. Only 9 of the 49 variables are fully complete. The line comment token is only 0.110 complete and the has comments is only 0.144 complete. This variable has only 3 false values; it is likely that the missing data is skewed towards false. It is more likely that you’d complete this entry if there were a comment, than if there weren’t. It is also possible that the cleaning and prep done to prepare the #TidyTuesday dataset removed some entries which did have FALSE values for the comments.\nThere are some funny entries that appeared in the skim report, like -2000 as the year the earliest language appeared. It turns out this is Babylonian numerals, so it probably correct. This does show there is a lot more than computer languages in this dataset though.\nLooking through the variables, I see there is a “type” in the data dictionary, and it appears that “pl” means programming language. So let’s filter for that. (I couldn’t find an explanation of this variable on https://pldb.com/) It is used on various pages, but I couldn’t find the definition of the types.\nAlso, rank starts at 0, and I’d like it to start at 1.\n\nprogramming_lang <- languages %>%\n  filter(type == 'pl') %>%\n  select(-starts_with(\"github\"), -starts_with(\"wikipedia\"),\n         -description, -creators, -(website:semantic_scholar)) %>%\n  mutate(language_rank = language_rank + 1)\n\nskim(programming_lang)\n\n\nData summary\n\n\nName\nprogramming_lang\n\n\nNumber of rows\n3368\n\n\nNumber of columns\n16\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nlogical\n4\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\npldb_id\n0\n1.00\n1\n52\n0\n3368\n0\n\n\ntitle\n0\n1.00\n1\n54\n0\n3347\n0\n\n\ntype\n0\n1.00\n2\n2\n0\n1\n0\n\n\nline_comment_token\n3002\n0.11\n1\n3\n0\n18\n0\n\n\norigin_community\n883\n0.74\n3\n176\n0\n1825\n0\n\n\nfile_type\n2609\n0.23\n4\n4\n0\n1\n0\n\n\n\nVariable type: logical\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nfeatures_has_comments\n2886\n0.14\n1.00\nTRU: 482\n\n\nfeatures_has_semantic_indentation\n2917\n0.13\n0.09\nFAL: 410, TRU: 41\n\n\nfeatures_has_line_comments\n2954\n0.12\n0.97\nTRU: 401, FAL: 13\n\n\nis_open_source\n2984\n0.11\n0.85\nTRU: 328, FAL: 56\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nappeared\n0\n1.00\n1994.16\n17.34\n1948\n1982.0\n1994.0\n2010.0\n2022\n▁▅▇▇▇\n\n\nlanguage_rank\n0\n1.00\n2296.75\n1249.08\n1\n1243.5\n2334.5\n3423.5\n4303\n▆▆▆▆▇\n\n\nlast_activity\n0\n1.00\n2002.04\n17.91\n1951\n1989.0\n2005.0\n2019.0\n2023\n▁▂▃▆▇\n\n\nnumber_of_users\n0\n1.00\n10793.85\n190197.19\n0\n0.0\n15.0\n165.0\n5962666\n▇▁▁▁▁\n\n\nnumber_of_jobs\n0\n1.00\n160.22\n2692.65\n0\n0.0\n0.0\n0.0\n85206\n▇▁▁▁▁\n\n\ncentral_package_repository_count\n939\n0.72\n0.00\n0.00\n0\n0.0\n0.0\n0.0\n0\n▁▁▇▁▁\n\n\n\n\n\nThis now produces a dataset with 0.143 completeness for features_has_comments. All non-missing entries are TRUE, which again suggests that FALSE is over represented in the missing data.\nLet’s only look at the programming languages that have data for comments.\n\nprogramming_lang <- programming_lang %>%\n  filter(features_has_comments == TRUE)\n\nskim(programming_lang)\n\n\nData summary\n\n\nName\nprogramming_lang\n\n\nNumber of rows\n482\n\n\nNumber of columns\n16\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nlogical\n4\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\npldb_id\n0\n1.00\n1\n35\n0\n482\n0\n\n\ntitle\n0\n1.00\n1\n45\n0\n481\n0\n\n\ntype\n0\n1.00\n2\n2\n0\n1\n0\n\n\nline_comment_token\n120\n0.75\n1\n3\n0\n18\n0\n\n\norigin_community\n112\n0.77\n3\n105\n0\n311\n0\n\n\nfile_type\n146\n0.70\n4\n4\n0\n1\n0\n\n\n\nVariable type: logical\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nfeatures_has_comments\n0\n1.00\n1.00\nTRU: 482\n\n\nfeatures_has_semantic_indentation\n57\n0.88\n0.05\nFAL: 405, TRU: 20\n\n\nfeatures_has_line_comments\n71\n0.85\n0.97\nTRU: 400, FAL: 11\n\n\nis_open_source\n305\n0.37\n0.91\nTRU: 161, FAL: 16\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nappeared\n0\n1.00\n2000.17\n14.07\n1957\n1991.00\n2003.0\n2011.00\n2022\n▁▂▆▇▇\n\n\nlanguage_rank\n0\n1.00\n656.10\n559.75\n1\n201.25\n515.5\n997.25\n2994\n▇▃▂▁▁\n\n\nlast_activity\n0\n1.00\n2016.20\n8.27\n1967\n2011.00\n2022.0\n2022.00\n2023\n▁▁▁▂▇\n\n\nnumber_of_users\n0\n1.00\n62892.08\n462314.18\n0\n112.00\n437.5\n1615.25\n5962666\n▇▁▁▁▁\n\n\nnumber_of_jobs\n0\n1.00\n971.30\n6489.83\n0\n0.00\n0.0\n0.00\n85206\n▇▁▁▁▁\n\n\ncentral_package_repository_count\n136\n0.72\n0.00\n0.00\n0\n0.00\n0.0\n0.00\n0\n▁▁▇▁▁\n\n\n\n\n\nThis subset is still moderately incomplete for information about comments. Only 75% of the data has the type of comment entered (#, //, etc). 86% of the entries are completed for “feature_has_line_comments” which indicates if comments must occupy a single line or if they can be made inline.\n\nprogramming_lang %>% filter(is.na(line_comment_token) == FALSE) %>%\n  group_by(line_comment_token) %>%\n  count(line_comment_token) %>%\n  ggplot(aes(fct_rev(fct_reorder(line_comment_token, n)), n)) +\n  geom_col(fill = \"dodgerblue2\") +\n  ylab(\"Count\") +\n  xlab(\"Comment Token\") +\n  ggtitle(\"Popularity of different comment tokens\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45,  vjust = 0.25, hjust = 0.25))\n\n\n\n\nLet’s make a nice table of the popular comment types.\n\n# | label: table-tokens\nprogramming_lang2 <- programming_lang %>%\n  filter(is.na(line_comment_token) == FALSE) %>%\n  count(line_comment_token, sort = TRUE) \n\nprogramming_lang2 %>%\ngt() %>%\ntab_header(title = \"Most Common Comment Tokens\") %>%\ncols_label(line_comment_token = \"Token\", n = \"# of Languages that use token\")\n\n\n\n\n\n  \n    \n      Most Common Comment Tokens\n    \n    \n  \n  \n    \n      Token\n      # of Languages that use token\n    \n  \n  \n    //\n161\n    #\n70\n    ;\n49\n    --\n31\n    '\n16\n    %\n12\n    !\n7\n    *\n5\n    REM\n2\n    *>\n1\n    ---\n1\n    /\n1\n    NB.\n1\n    \\\n1\n    \\*\n1\n    __\n1\n    ~\n1\n    ⍝\n1\n  \n  \n  \n\n\n\n\nThere is a language rank, which measures the popularity of the language based on signals such as number of users and number of jobs. Let’s see the average rank of languages for each token.\n\nprogramming_lang %>% filter(is.na(line_comment_token) == FALSE) %>%\n  group_by(line_comment_token) %>%\n  summarize(avg_rank = mean(language_rank)) %>%\n  ggplot(aes((fct_reorder(line_comment_token, avg_rank)), avg_rank)) +\n  geom_col(fill = \"dodgerblue2\") +\n  ylab(\"Average Rank of Language\") +\n  xlab(\"Comment Token\") +\n  ggtitle(\"Average rank of languages using different comment tokens\") +\n  theme_classic() +\n  theme(axis.text.x = element_text(angle = 45,  vjust = 0.25, hjust = 0.25))\n\n\n\n\nThe highest (average) ranked token is “*>”. What languages use this?\n\nprogramming_lang %>% filter(line_comment_token == \"*>\") %>%\n  select(title, language_rank, line_comment_token)\n\n# A tibble: 1 × 3\n  title language_rank line_comment_token\n  <chr>         <dbl> <chr>             \n1 COBOL            19 *>                \n\n\nOnly COBOL does, so the rank of this token isn’t diluted by many less popular languages. We can view the distribution of the language ranks for all the tokens.\n\nprogramming_lang %>%\n  filter(is.na(line_comment_token) == FALSE) %>%\n  ggplot(aes(line_comment_token, language_rank)) +\n  geom_boxplot(color = \"dodgerblue2\") +\n  ggtitle(\"The rank of languages by token.\") +\n  xlab(\"Token\") +\n  ylab (\"Language Rank\") +\n  theme_classic()\n\n\n\n\nOkay, let’s clean this up. I’d like it sorted by the median rank. Remeber rank is in reverse numerical order- a low number means a higher rank.\n\nprogramming_lang %>%\n  filter(is.na(line_comment_token) == FALSE) %>%\n  ggplot(aes(fct_reorder(line_comment_token, language_rank,\n                         .fun = median, .desc = FALSE), language_rank)) +\n  geom_boxplot(color = \"dodgerblue2\") +\n  ggtitle(\"The rank of languages by token\") +\n  xlab(\"Token\") +\n  ylab(\"Language Rank\") +\n    theme_classic()\n\n\n\n\nLet’s see the most popular language for each symbol. There might be a way to do this all at once, but I’m going to pull it out with joins to previous tables I’ve created.\n\nprogramming_lang3 <- programming_lang %>%\n  filter(is.na(line_comment_token) == FALSE) %>%\n  group_by(line_comment_token) %>%\n  summarize(highest_rank = min(language_rank)) \n\njoin_madness <- programming_lang2 %>%\n  left_join(programming_lang3, by = \"line_comment_token\") %>% \n  left_join(programming_lang, \n            by = c(\"highest_rank\" = \"language_rank\",\n                   \"line_comment_token\" = \"line_comment_token\")) \n\njoin_madness <- join_madness %>%\n  select(line_comment_token, n, highest_rank, title, appeared, number_of_users,\n         number_of_jobs)\n\nSo now we have a bunch of summarized data in a single dataframe. Here’s a graph. It is saying something, but I’m not sure what. When you can’t come up with a concise title, then you probably don’t know what you are trying to say…\n\njoin_madness %>%\n  ggplot(aes(highest_rank, n, size = log(number_of_users), \n             color = log(number_of_users), label = line_comment_token)) +\n  scale_y_log10() +\n  scale_x_log10() +\n  geom_text_repel(show.legend = FALSE) +\n  ggtitle(\"Popularity of tokens by language rank and usage\") +\n  xlab(\"Highest Rank of language using Token\") +\n  ylab(\"Number of Languages using token\") +\n  theme_classic()\n\n\n\n\nThis is a visualization of the highest ranked languages for each token. The number of users of the dominant language is also encoded in the size and color of the label. Having it ordered makes it difficult to tell if Java or Python is the most popular/ highest ranked language.\n\njoin_madness %>%\n  ggplot(aes(fct_rev(fct_reorder(line_comment_token, highest_rank)), n,\n             size = log(number_of_users), color = log(number_of_users),\n             label = title)) +\n # geom_point() +\n  scale_y_log10() +\n  geom_text_repel(show.legend = FALSE) +\n   ggtitle(\"The Most Popular Language for Each Comment Token\") +\n  xlab(\"Token\") +\n  ylab(\"Number of languages using token\") +\n  theme_classic()\n\n\n\n\nHere is the same graph just ordered “alphabetically” by token.\n\njoin_madness %>%\n  ggplot(aes(line_comment_token, n, size = log(number_of_users), \n             color = log(number_of_users), label = title)) +\n # geom_point() +\n  scale_y_log10() +\n  geom_text_repel(show.legend = FALSE) +\n   ggtitle(\"The Most Popular Language for Each Comment Token\") +\n  xlab(\"Token\") +\n  ylab(\"Number of languages using token\") +\n  theme_classic()\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {TidyTuesday {Week} 12: {Programming} {Languages}},\n  date = {2023-03-21},\n  url = {https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “TidyTuesday Week 12: Programming\nLanguages.” March 21, 2023. https://lsinks.github.io/posts/2023-03-21-tidytuesday-programming-languages/."
  },
  {
    "objectID": "posts/2023-03-24-tidytuesday-figure-polishing/index.html",
    "href": "posts/2023-03-24-tidytuesday-figure-polishing/index.html",
    "title": "TidyTuesday Week 12: Programming Languages Revisited",
    "section": "",
    "text": "This week, I participated in my first #TidyTuesday challenge. My goal was to get something out on the day of the challenge rather than perfection. I did notice that the skimr output wasn’t formatted nicely on the webpage. Today, I’m going to delve into the skimr and Quarto documentation and make a nicer version of the output. Secondly, I’m going to fix up my final figure, which is the one I shared on social media:"
  },
  {
    "objectID": "posts/2023-03-24-tidytuesday-figure-polishing/index.html#skimr-to-understand-your-data",
    "href": "posts/2023-03-24-tidytuesday-figure-polishing/index.html#skimr-to-understand-your-data",
    "title": "TidyTuesday Week 12: Programming Languages Revisited",
    "section": "Skimr to understand your data",
    "text": "Skimr to understand your data\nSkimr is a package that provides statistical summaries of the variables in your dataframe. It also provides information about the missingness of each variable.\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(ggthemes)\nlibrary(gt)\nlibrary(ggrepel)\nlibrary(visdat) # visualizing missing data in dataframe\n\n\n# Get the Data\n\n# Read in with tidytuesdayR package \n# This loads the readme and all the datasets for the week of interest\n\n# Either ISO-8601 date or year/week works!\n\n#tuesdata <- tidytuesdayR::tt_load('2023-03-21')\ntuesdata <- tidytuesdayR::tt_load(2023, week = 12)\n\nlanguages <- tuesdata$languages\n\n\nCustomizing the skim Output\nMy main objection is that the numerical summary is too wide and has a scroll bar. I especially want the histogram to be viewable on the first screen. I also don’t particularly care about all the quartile information; min and max are enough. If I want to delve more into the stats of a variable, I will do it another way, not with skimr.\nFirst, quarto lets you expand the output of the code chunk to fill the page via the option “#| column: page”, so I’ll do that. Next, I’ll create a custom skim function that drops the p25, p50, and p75 output from the summary of the numerical variables.\n\nmy_skim <- skim_with(numeric = sfl(p25 = NULL, p50 = NULL, p75 = NULL)) \n\nmy_skim(languages)\n\n\nData summary\n\n\nName\nlanguages\n\n\nNumber of rows\n4303\n\n\nNumber of columns\n49\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n21\n\n\nlogical\n4\n\n\nnumeric\n24\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\npldb_id\n0\n1.00\n1\n52\n0\n4303\n0\n\n\ntitle\n0\n1.00\n1\n56\n0\n4267\n0\n\n\ndescription\n3480\n0.19\n4\n2273\n0\n811\n0\n\n\ntype\n0\n1.00\n2\n27\n0\n40\n0\n\n\ncreators\n3203\n0.26\n2\n253\n0\n985\n0\n\n\nwebsite\n2928\n0.32\n13\n131\n0\n1368\n0\n\n\ndomain_name\n3588\n0.17\n6\n32\n0\n700\n0\n\n\nreference\n2314\n0.46\n15\n251\n0\n1955\n0\n\n\ngithub_repo\n3402\n0.21\n25\n73\n0\n897\n0\n\n\ngithub_repo_description\n3438\n0.20\n4\n419\n0\n853\n0\n\n\ngithub_language\n3829\n0.11\n1\n30\n0\n474\n0\n\n\ngithub_language_tm_scope\n3837\n0.11\n4\n34\n0\n361\n0\n\n\ngithub_language_type\n3837\n0.11\n4\n11\n0\n4\n0\n\n\ngithub_language_ace_mode\n3838\n0.11\n1\n16\n0\n96\n0\n\n\ngithub_language_file_extensions\n3833\n0.11\n1\n606\n0\n466\n0\n\n\nwikipedia\n2731\n0.37\n32\n104\n0\n1566\n0\n\n\nwikipedia_summary\n2884\n0.33\n17\n6741\n0\n1407\n0\n\n\nwikipedia_related\n3145\n0.27\n1\n1761\n0\n1059\n0\n\n\nline_comment_token\n3831\n0.11\n1\n7\n0\n23\n0\n\n\norigin_community\n1190\n0.72\n3\n305\n0\n2232\n0\n\n\nfile_type\n3213\n0.25\n2\n6\n0\n4\n0\n\n\n\nVariable type: logical\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\ncount\n\n\n\n\nfeatures_has_comments\n3683\n0.14\n1.00\nTRU: 617, FAL: 3\n\n\nfeatures_has_semantic_indentation\n3722\n0.14\n0.11\nFAL: 516, TRU: 65\n\n\nfeatures_has_line_comments\n3765\n0.13\n0.96\nTRU: 517, FAL: 21\n\n\nis_open_source\n3792\n0.12\n0.89\nTRU: 453, FAL: 58\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np100\nhist\n\n\n\n\nappeared\n0\n1.00\n1991.11\n111.44\n-2000\n2023\n▁▁▁▁▇\n\n\ndomain_name_registered\n3801\n0.12\n2011.33\n7.02\n1990\n2023\n▁▃▃▇▆\n\n\nisbndb\n3217\n0.25\n7.71\n33.16\n0\n400\n▇▁▁▁▁\n\n\nbook_count\n0\n1.00\n2.08\n17.34\n0\n401\n▇▁▁▁▁\n\n\nsemantic_scholar\n3545\n0.18\n3.79\n8.32\n0\n52\n▇▁▁▁▁\n\n\nlanguage_rank\n0\n1.00\n2151.00\n1242.31\n0\n4302\n▇▇▇▇▇\n\n\ngithub_repo_stars\n3414\n0.21\n2127.40\n7554.02\n0\n88526\n▇▁▁▁▁\n\n\ngithub_repo_forks\n3417\n0.21\n261.29\n1203.00\n0\n23732\n▇▁▁▁▁\n\n\ngithub_repo_updated\n3418\n0.21\n2021.39\n1.76\n2012\n2023\n▁▁▁▁▇\n\n\ngithub_repo_subscribers\n3418\n0.21\n62.34\n200.88\n0\n2910\n▇▁▁▁▁\n\n\ngithub_repo_created\n3425\n0.20\n2015.84\n3.48\n2006\n2022\n▁▅▇▇▇\n\n\ngithub_repo_issues\n3518\n0.18\n123.03\n546.26\n0\n9522\n▇▁▁▁▁\n\n\ngithub_repo_first_commit\n3567\n0.17\n2014.74\n4.99\n1987\n2022\n▁▁▁▆▇\n\n\ngithub_language_repos\n3833\n0.11\n197134.67\n1226900.57\n0\n16046489\n▇▁▁▁▁\n\n\nwikipedia_daily_page_views\n2837\n0.34\n227.13\n783.55\n-1\n13394\n▇▁▁▁▁\n\n\nwikipedia_backlinks_count\n2877\n0.33\n318.55\n1635.29\n1\n34348\n▇▁▁▁▁\n\n\nwikipedia_page_id\n2893\n0.33\n9167847.21\n13506832.90\n928\n63063548\n▇▁▁▁▁\n\n\nwikipedia_appeared\n2958\n0.31\n1991.14\n17.03\n1830\n2019\n▁▁▁▃▇\n\n\nwikipedia_created\n3040\n0.29\n2005.75\n3.77\n2001\n2020\n▇▇▂▁▁\n\n\nwikipedia_revision_count\n3130\n0.27\n330.43\n813.26\n1\n10104\n▇▁▁▁▁\n\n\nlast_activity\n0\n1.00\n2000.62\n84.60\n-900\n2023\n▁▁▁▁▇\n\n\nnumber_of_users\n0\n1.00\n13771.26\n227712.95\n0\n7179119\n▇▁▁▁▁\n\n\nnumber_of_jobs\n0\n1.00\n422.18\n12572.99\n0\n771996\n▇▁▁▁▁\n\n\ncentral_package_repository_count\n1482\n0.66\n0.00\n0.00\n0\n0\n▁▁▇▁▁\n\n\n\n\n\nThis output is much nicer. It is a bit wall of text though. I wouldn’t recommend using this in reports, but it is a useful tool when doing your initial dataset analysis. (As a side note, I have noticed skimr doesn’t work well on Kaggle. It performs as expected if you are in interactive mode, but it fails when you try to save the notebook or run non-interactively.)\n\n\nStyling skim output with gt\nIf, for some reason, you did need to include output/ visualizations about missingness in a report, I’d probably recreate visualizations or tables by class of variable, especially if you have many variables, as I do here.\nHere’s an example for numeric variables, of which there are 24 in the dataset. First, we will skim the data and then use the gt package to style the resulting dataframe as a table. I used a built-in style, but each table element can be individually customized.\n\nlanguages_numeric <- languages %>%\n  select_if(is.numeric)\n\nlang_numeric_skim <- my_skim(languages_numeric)\n\nlang_numeric_skim %>%\n  select(-skim_type)   %>% \n  gt() %>%\n  cols_label(n_missing = \"# Missing\", complete_rate = \"Completeness\", \n             numeric.mean = \"Mean\", numeric.sd = \"Standard Deviation\",\n             numeric.p0 = \"Min\", numeric.p100 = \"Max\",\n             numeric.hist = \"Histogram\") %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Summary of Numerical Variables in Languages\") \n\n\n\n\n\n  \n    \n      Summary of Numerical Variables in Languages\n    \n    \n  \n  \n    \n      skim_variable\n      # Missing\n      Completeness\n      Mean\n      Standard Deviation\n      Min\n      Max\n      Histogram\n    \n  \n  \n    appeared\n0\n1.0000000\n1.991105e+03\n1.114434e+02\n-2000\n2023\n▁▁▁▁▇\n    domain_name_registered\n3801\n0.1166628\n2.011333e+03\n7.021132e+00\n1990\n2023\n▁▃▃▇▆\n    isbndb\n3217\n0.2523821\n7.706262e+00\n3.316421e+01\n0\n400\n▇▁▁▁▁\n    book_count\n0\n1.0000000\n2.079479e+00\n1.734465e+01\n0\n401\n▇▁▁▁▁\n    semantic_scholar\n3545\n0.1761562\n3.794195e+00\n8.316231e+00\n0\n52\n▇▁▁▁▁\n    language_rank\n0\n1.0000000\n2.151000e+03\n1.242313e+03\n0\n4302\n▇▇▇▇▇\n    github_repo_stars\n3414\n0.2066000\n2.127403e+03\n7.554016e+03\n0\n88526\n▇▁▁▁▁\n    github_repo_forks\n3417\n0.2059029\n2.612867e+02\n1.203003e+03\n0\n23732\n▇▁▁▁▁\n    github_repo_updated\n3418\n0.2056705\n2.021390e+03\n1.763285e+00\n2012\n2023\n▁▁▁▁▇\n    github_repo_subscribers\n3418\n0.2056705\n6.234237e+01\n2.008820e+02\n0\n2910\n▇▁▁▁▁\n    github_repo_created\n3425\n0.2040437\n2.015843e+03\n3.479589e+00\n2006\n2022\n▁▅▇▇▇\n    github_repo_issues\n3518\n0.1824309\n1.230344e+02\n5.462553e+02\n0\n9522\n▇▁▁▁▁\n    github_repo_first_commit\n3567\n0.1710435\n2.014739e+03\n4.985409e+00\n1987\n2022\n▁▁▁▆▇\n    github_language_repos\n3833\n0.1092261\n1.971347e+05\n1.226901e+06\n0\n16046489\n▇▁▁▁▁\n    wikipedia_daily_page_views\n2837\n0.3406925\n2.271330e+02\n7.835524e+02\n-1\n13394\n▇▁▁▁▁\n    wikipedia_backlinks_count\n2877\n0.3313967\n3.185484e+02\n1.635289e+03\n1\n34348\n▇▁▁▁▁\n    wikipedia_page_id\n2893\n0.3276784\n9.167847e+06\n1.350683e+07\n928\n63063548\n▇▁▁▁▁\n    wikipedia_appeared\n2958\n0.3125726\n1.991144e+03\n1.702650e+01\n1830\n2019\n▁▁▁▃▇\n    wikipedia_created\n3040\n0.2935162\n2.005748e+03\n3.768240e+00\n2001\n2020\n▇▇▂▁▁\n    wikipedia_revision_count\n3130\n0.2726005\n3.304314e+02\n8.132556e+02\n1\n10104\n▇▁▁▁▁\n    last_activity\n0\n1.0000000\n2.000616e+03\n8.459776e+01\n-900\n2023\n▁▁▁▁▇\n    number_of_users\n0\n1.0000000\n1.377126e+04\n2.277129e+05\n0\n7179119\n▇▁▁▁▁\n    number_of_jobs\n0\n1.0000000\n4.221838e+02\n1.257299e+04\n0\n771996\n▇▁▁▁▁\n    central_package_repository_count\n1482\n0.6555891\n0.000000e+00\n0.000000e+00\n0\n0\n▁▁▇▁▁\n  \n  \n  \n\n\n\n\n\n\nVisualizing Missingness with visdat\nThe visdat package makes ggplot- compatible missingness plots. The cluster = TRUE option groups variables that share missingness. Here we see that usually if some of the GitHub data is missing, then all of the GitHub data is missing. The percent missing is listed for each variable, and the overall missingness of the dataset is shown in the legend.\nNote vis_miss doesn’t work on very large datasets. The documentation suggests keeping the number of records below 1,000. A more extensive package for exploratory visualizations called naniar could also be used.\n\nlanguages_numeric %>%\nvis_miss(cluster = TRUE) +\nggtitle(\"Missing Data in the Languages Dataset\") +\n  #theme_classic() +\n  theme(axis.text.x = element_text(size = 8, angle = 90))"
  },
  {
    "objectID": "posts/2023-03-24-tidytuesday-figure-polishing/index.html#improving-the-most-popular-language-for-each-comment-token-figure",
    "href": "posts/2023-03-24-tidytuesday-figure-polishing/index.html#improving-the-most-popular-language-for-each-comment-token-figure",
    "title": "TidyTuesday Week 12: Programming Languages Revisited",
    "section": "Improving “The Most Popular Language for Each Comment Token” Figure",
    "text": "Improving “The Most Popular Language for Each Comment Token” Figure\n\njoined <- read_csv(\"processed_lang.csv\" , show_col_types = FALSE)\n\nNow the original figure:\n\njoined %>%\n  ggplot(aes(line_comment_token, n, size = log(number_of_users), \n             color = log(number_of_users), label = title)) +\n # geom_point() +\n  scale_y_log10() +\n  geom_text_repel(show.legend = FALSE) +\n   ggtitle(\"The Most Popular Language for Each Comment Token\") +\n  xlab(\"Token\") +\n  ylab(\"Number of languages using token\") +\n  theme_classic()\n\n\n\n\nI thought I had noted this in the previous post, but one of the tokens, ⍝ , is rendered as an empty box in the ggplot figures. I thought fixing this would be easy. First, I thought I could just pass the Unicode value for that symbol. Then, when that didn’t work, I thought I could change the font to one supporting that symbol. Supposedly, changing the font should be easy, yet after 3 hours working on it, I still had blank squares. There is a nice tutorial on changing fonts in ggplot that did not work until I found someone with the same issue. The solution is to add a line of code that doesn’t make much sense to me : windowsFonts(\"Cambria Math\" = windowsFont(\"Cambria Math\"))\nI saw a nice TidyTuesday figure on Twitter:\n\n\nMy submission for #TidyTuesday, Week 12 on programming languages. I explore jobs per users.Code: https://t.co/bV9DUHZmro pic.twitter.com/2D5YLnE5yz\n\n— Mitsuo Shiota (@mitsuoxv) March 21, 2023\n\n\nwith a caption referencing the original dataset. I’d like to add that. I generally want to increase the figure’s legibility and flip the color scale so that darker blue corresponds to more users. I also don’t think what popular means is entirely clear, so I’d like to explain more fully what I’m graphing.\n\nwindowsFonts(\"Cambria Math\" = windowsFont(\"Cambria Math\"))\njoined %>%\n  ggplot(aes(line_comment_token, n, size = log(number_of_users), \n             color = log(number_of_users), label = title)) +\n  scale_y_log10() +\n  geom_text_repel(show.legend = FALSE) +\n    scale_colour_gradient(high = \"#08306b\", low = \"#6baed6\") + \n   labs(title = \"The Most Popular Language for Each Comment Token\",\n       subtitle = \"Based on # Users and Rank\",\n       caption = \"data from https://pldb.com/\") +\n  xlab(\"Token\") +\n  ylab(\"Number of languages using token\") +\n  theme_classic(base_size = 16) +\n  theme(text = element_text( family = \"Cambria Math\")) +\n  theme(axis.text.x = element_text(face = \"bold\"))"
  },
  {
    "objectID": "posts/2023-03-25-twitter-cards/twitter-cards.html",
    "href": "posts/2023-03-25-twitter-cards/twitter-cards.html",
    "title": "Twitter Cards",
    "section": "",
    "text": "Trying to get the picture to show in a twitter card. Apparently you need to specify the image on every document, not just in the main yml doc, which is what I understood from the instructions.\nNow this works for new posts, but not old posts.\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {Twitter {Cards}},\n  date = {2023-03-24},\n  url = {https://lsinks.github.io/posts/2023-03-25-twitter-cards/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “Twitter Cards.” March 24, 2023. https://lsinks.github.io/posts/2023-03-25-twitter-cards/."
  },
  {
    "objectID": "posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones.html",
    "href": "posts/2023-03-28-tidytuesday-timezones/tidytuesday-timezones.html",
    "title": "Tidy Tuesday: Daylight Savings Time",
    "section": "",
    "text": "This week’s TidyTuesday is about the timezone data from IANA timezone database.\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(ggthemes)\nlibrary(gt)\nlibrary(lubridate)\nlibrary(skimr)\nlibrary(lutz)\nlibrary(maps)\nlibrary(scales)\nlibrary(sf)\nlibrary(ggimage)\n\nThe history of this database is fascinating. It is used by many computer systems to determine the correct time based on location. To learn more, I recommend reading Daniel Rosehill’s article on the topic. For a drier history, check out the wikipedia article.\n\n# Get the Data\n\n# Read in with tidytuesdayR package \n# This loads the readme and all the datasets for the week of interest\n\n# Either ISO-8601 date or year/week works!\n\n#tuesdata <- tidytuesdayR::tt_load('2023-03-21')\ntuesdata <- tidytuesdayR::tt_load(2023, week = 13)\n\ntransitions <- tuesdata$transitions\ntimezones <- tuesdata$timezones\ntimezone_countries <- tuesdata$timezone_countries\ncountries <- tuesdata$countries\n\nIt is suggested that we change the begin and end variables in transitions to datetimes.\n\ntransitions <- transitions %>%\n  mutate(begin = as_datetime(begin), end = as_datetime(end))\n\nI was interested in how many countries had multiple times zones. I know the US has 4 time zones in the continental US.\n\nnum_zones <- timezone_countries %>%\n  count(country_code, sort = TRUE)\n\nnum_zones %>% \n  filter(n > 1) %>%\n  left_join(countries) %>%\n  select(place_name, n) %>%\n  filter(place_name != \"NA\") %>%\n  gt() %>%\n  cols_label(place_name = \"Country\", n = \"Number of TZs\") %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Countries with Multiple TZs\") \n\n\n\n\n\n  \n    \n      Countries with Multiple TZs\n    \n    \n  \n  \n    \n      Country\n      Number of TZs\n    \n  \n  \n    United States\n29\n    Canada\n28\n    Russia\n27\n    Brazil\n16\n    Argentina\n12\n    Australia\n12\n    Mexico\n11\n    Kazakhstan\n7\n    Greenland\n4\n    Indonesia\n4\n    Ukraine\n4\n    Chile\n3\n    Spain\n3\n    Micronesia\n3\n    Kiribati\n3\n    Mongolia\n3\n    Malaysia\n3\n    French Polynesia\n3\n    Portugal\n3\n    US minor outlying islands\n3\n    Congo (Dem. Rep.)\n2\n    China\n2\n    Cyprus\n2\n    Germany\n2\n    Ecuador\n2\n    Marshall Islands\n2\n    New Zealand\n2\n    Papua New Guinea\n2\n    Palestine\n2\n    French Southern & Antarctic Lands\n2\n    Uzbekistan\n2\n    Vietnam\n2\n  \n  \n  \n\n\n\n\nAnd we find that the United States has 29!! time zones in the database. This was unexpected, so say the least. I thought maybe there were some times zones for territories and perhaps military bases that I did not know about. I also thought there might be some extra time zones arising from some states using daylight savings time, while others in the same area might not. I wanted to visualize where these times zones were.\n\nUS_tz <- timezone_countries %>% \n  filter(country_code == \"US\") %>%\n  left_join(timezones)\n\nJoining with `by = join_by(zone)`\n\n\nI found the lutz package created nice pictograms about when a timezone shifts from DST and back. (This package uses the same underlying database that we are using here to determine when the shifts occur.)\n\n tz_plot(US_tz$zone[21])\n\n\n\n\nI created the plots and saved them as images. I modified a function I found on stack overflow to create the file names.\n\nwd <- getwd()\nfilepath = file.path(wd)\n\n\nmake_filename = function(number){\n  # doing this, putting it all on a single line or using pipe %>%\n  # is just matter of style\n  filename = paste(\"tzplot\", number, sep=\"_\")\n  filename = paste0(filename, \".png\")\n  filename = file.path(filepath, filename)\n  \n  filename\n}\n\n#creating a variable to store the files name\nUS_tz <- US_tz %>%\n  mutate(image_name = \"tbd\")\n\nindex <- 1\nfor (index in seq(1, nrow(US_tz))) {\n  filename = make_filename(index)\n  US_tz[index , \"image_name\"] <- filename\n  # 1. Open jpeg file\n  png(filename, width = 350, height = 350, bg = \"transparent\")\n  # 2. Create the plot\n  # you need to print the plot if you call it inside a loop\n  print(tz_plot(US_tz$zone[index]))\n  # 3. Close the file\n  dev.off()\n  index = index + 1\n}\n\nNext I created a world map, inspired by the one from\n\n\nMy submission for #TidyTuesday, Week 13 on time zones. I plot time zones in the world map.Code: https://t.co/y5Cm4tuaVk pic.twitter.com/BZC3anC5Oa\n\n— Mitsuo Shiota (@mitsuoxv) March 28, 2023\n\n\nI hadn’t previously used the maps package, so I appreciate being introduced to it. The maps package only has a mainland US map, so I used the world map. (Plus, as I mentioned, I thought some of these time zones would be in other parts of the world.) I followed a tutorial on Plotting Points as Images in ggplot and used the hints about aspect ratio to make my tz_plot circles remain circular. However, that did stretch the world a bit.\n\naspect_ratio <- 1.618  \n\nus_tz_map <- map_data(\"world\") %>% \n  ggplot(aes(long, lat)) +\n  geom_polygon(aes(group = group), fill = \"white\", \n               color = \"gray30\", alpha = 0.9) +\n  geom_image(aes(x = longitude, latitude, image = image_name), \n             data = US_tz, size = 0.025, by = \"width\",\n             asp = aspect_ratio) +\n  coord_sf() +\n  labs(title = \"The United States has 29 Timezone- Mostly Redunant\",\n       caption = \"Data from: https://data.iana.org/time-zones/tz-link.html\") +\n  theme_void() +\n  theme(aspect.ratio = 1/aspect_ratio,\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = \"white\", color = \"white\")\n    )\n\nggsave(\"thumbnail.png\", us_tz_map, width = 5 * aspect_ratio, height = 5)\nus_tz_map\n\n\n\n\nAnd what we see is there are a bunch of redundant times zone specification, especially in the Midwest.\n\nUS_tz %>%\n  select(zone, latitude, longitude) %>%\n  arrange(longitude) %>%\n  gt() %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Countries with Multiple TZs\") \n\n\n\n\n\n  \n    \n      Countries with Multiple TZs\n    \n    \n  \n  \n    \n      zone\n      latitude\n      longitude\n    \n  \n  \n    America/Adak\n52.66667\n-177.13333\n    America/Nome\n64.56667\n-165.78333\n    Pacific/Honolulu\n21.71667\n-158.35000\n    America/Anchorage\n61.30000\n-149.91667\n    America/Yakutat\n60.35000\n-140.35000\n    America/Sitka\n57.75000\n-135.41667\n    America/Juneau\n58.41667\n-134.60000\n    America/Metlakatla\n55.73333\n-132.15000\n    America/Los_Angeles\n34.18333\n-118.80000\n    America/Boise\n44.41667\n-116.35000\n    America/Phoenix\n34.33333\n-112.46667\n    America/Denver\n40.08333\n-105.03333\n    America/North_Dakota/Beulah\n48.10000\n-102.43333\n    America/North_Dakota/Center\n48.08333\n-102.23333\n    America/North_Dakota/New_Salem\n47.53333\n-102.05000\n    America/Menominee\n45.56667\n-88.45000\n    America/Indiana/Vincennes\n39.30000\n-88.23333\n    America/Indiana/Petersburg\n39.00000\n-87.98333\n    America/Chicago\n41.85000\n-87.65000\n    America/Indiana/Tell_City\n38.13333\n-87.43333\n    America/Indiana/Knox\n42.03333\n-87.11667\n    America/Indiana/Marengo\n38.90000\n-87.01667\n    America/Indiana/Winamac\n41.13333\n-86.78333\n    America/Indiana/Indianapolis\n39.86667\n-86.63333\n    America/Kentucky/Louisville\n38.50000\n-86.31667\n    America/Kentucky/Monticello\n37.60000\n-85.78333\n    America/Indiana/Vevay\n39.60000\n-85.10000\n    America/Detroit\n43.20000\n-83.78333\n    America/New_York\n41.55000\n-74.38333\n  \n  \n  \n\n\n\n\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {Tidy {Tuesday:} {Daylight} {Savings} {Time}},\n  date = {2023-03-28},\n  url = {https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “Tidy Tuesday: Daylight Savings\nTime.” March 28, 2023. https://lsinks.github.io/posts/2023-03-28-tidytuesday-timezones/."
  },
  {
    "objectID": "posts/2023-03-30-One-Class-SVM/one-class-svm.html",
    "href": "posts/2023-03-30-One-Class-SVM/one-class-svm.html",
    "title": "One Class SVM",
    "section": "",
    "text": "I’ve recently been playing around with classification models, specifically on data sets with a skewed class distribution. In imbalanced classification problems, one class occurs infrequently. The minority class is often the class of interest (think fraudulent transaction, positive disease diagnosis, or intruder detection). Sometimes these applications are framed as a two-class classification problem, but other times they are called anomaly, outlier, or novelty detection.\nImbalanced classification problems are tricky for a couple of reasons. Models can achieve high accuracy by classifying everything as the dominant class. You can somewhat mitigate this problem by choosing models based on other metrics, such as sensitivity. You can also downsample the data to balance the classes (which throws out a lot of data) or upsample the infrequent class using a technique like SMOTE or ROSE to create synthetic data points.\nCollecting enough labeled data can also be expensive in highly imbalanced classes. Techniques like SMOTE won’t help if you only have 2 of a class in the dataset; the model needs “sufficient” data to learn from.\nAnother way to handle a minority class is to use a one-class classifier. One-class classifiers are one of the most widely used methods in anomaly detection because it does not require extensive labeled data for training. This method can either be semi-supervised, where only the normal (major) class is used for training, or unsupervised, where the method can handle anomalies in the training class. The one-class SVM is a popular implementation of one-class classifiers.\nHere I’m going to use a toy dataset from Datacamp. They have told me that all datasets used in their courses can be used outside Datacamp.\nI’m using some specialty packages here, specifically e1071 and caret for the machine learning."
  },
  {
    "objectID": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#exploratory-data-analysis",
    "href": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#exploratory-data-analysis",
    "title": "One Class SVM",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nThe dataset explores thyroid disease as a function of thyroid hormone levels. I’m using a custom skim function to tailor the output. More info on that can be found here.\n\nmy_skim <- skim_with(numeric = sfl(p25 = NULL, p50 = NULL, p75 = NULL)) \nthyroid_skim <- my_skim(thyroid)\n\nthyroid_skim %>%\n  select(-skim_type)   %>% \n  gt() %>%\n  cols_label(n_missing = \"# Missing\", complete_rate = \"Completeness\", \n             numeric.mean = \"Mean\", numeric.sd = \"Standard Deviation\",\n             numeric.p0 = \"Min\", numeric.p100 = \"Max\",\n             numeric.hist = \"Histogram\") %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Summary of Variables in Thyroid\") \n\n\n\n\n\n  \n    \n      Summary of Variables in Thyroid\n    \n    \n  \n  \n    \n      skim_variable\n      # Missing\n      Completeness\n      Mean\n      Standard Deviation\n      Min\n      Max\n      Histogram\n    \n  \n  \n    label\n0\n1\n0.0220000\n0.1467567\n0.000000\n1.00000000\n▇▁▁▁▁\n    TSH\n0\n1\n-0.6881938\n0.4455654\n-4.532599\n-0.02173999\n▁▁▁▃▇\n    T3\n0\n1\n-6.5046015\n1.3994315\n-9.268609\n-1.43659510\n▅▇▇▁▁\n    TT4\n0\n1\n-1.7235631\n0.4421667\n-5.350910\n-0.37417607\n▁▁▁▇▁\n    T4U\n0\n1\n-1.4666057\n0.4495771\n-6.164484\n0.00000000\n▁▁▁▇▂\n    FTI\n0\n1\n-1.0093125\n0.2522809\n-3.569533\n-0.17950862\n▁▁▁▇▂\n    TBG\n0\n1\n-1.7932517\n0.4318577\n-6.636603\n0.00000000\n▁▁▁▇▁\n  \n  \n  \n\n\n\n\nWe see that the dataset is complete with no missing values. All data types are numeric. About 2% of the patients are diagnosed with thyroid disease.\nI like to look at a correlation plot to get an overview of how the predictors relate to each other and the outcome. The correlation plot created by corrplot() has the title truncated in a lot of notebook/ markdown environments. The solution, which I found here, is to add a margin.\n\n# examining correlation between variables categories\n# moving the outcome to the first column to start\n# will be sorted by decreasing correlation with outcome\nthyroid %>%\n    dplyr::select(label, everything()) %>%\n    cor %>%\n        {.[order(abs(.[, 1]), decreasing = TRUE), \n       order(abs(.[, 1]), decreasing = TRUE)]} %>% \n    corrplot( type = 'lower', tl.col = 'black', \n            addCoef.col = 'black', cl.ratio = 0.2, tl.srt = 45, \n            col = COL2('PuOr', 10), diag = FALSE , mar = c(0,0,2,0),\n            title = \" Correlations between Thyroid Disease and hormone levels\")\n\n\n\n\nMany of the features are strongly correlated with the outcome. So, we can expect to get reasonably decent results from our model."
  },
  {
    "objectID": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#setting-up-for-ml-with-caret",
    "href": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#setting-up-for-ml-with-caret",
    "title": "One Class SVM",
    "section": "Setting up for ML with caret",
    "text": "Setting up for ML with caret\nI’m using the e1071 package for SVM, which is not supported by tidymodels, so I will use caret as the wrapper for a lot of the machine modeling workflow. First, I’m going to make a train and test split. createDataPartition will stratify the sampling over the two classes if you pass it the vector of labels. Stratification is usually critical with an imbalanced dataset; you don’t want a scenario where the train or test dataset has most of the minority class observations.\n\n# Relabel the classes to TRUE if it is normal data and FALSE if it is\n# an anomaly.  (That is, it is false that the outlier data is normal).  \n# makes it easier to compare with the output of the SVM model.  \nthyroid <- thyroid %>%\n  mutate(label = ifelse(label == 0, TRUE, FALSE))\n\n# create data split for test and training\n# will be split among strata\nset.seed(2346)\ninTrain <- createDataPartition(thyroid$label, p = 0.6, list = FALSE) \n\n# formatting the data as required for svm()\ntrain_predictors <- thyroid[inTrain, 2:7]\ntrain_labels <- thyroid[inTrain, 1]\n\n# Creating the test set\ntest <- thyroid[-inTrain,]\n\n# formatting the data as required for svm()\ntest_predictors <- test[,2:7]\ntest_labels <- test[,1]\n\n#double checking that the test and train sets do contain ~2% disease\n# or rather 98% normal.\nmean(train_labels)\n\n[1] 0.9767055\n\nmean(test_labels)\n\n[1] 0.9799499"
  },
  {
    "objectID": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#two-class-svm",
    "href": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#two-class-svm",
    "title": "One Class SVM",
    "section": "Two-class SVM",
    "text": "Two-class SVM\nFirst, I’m going to fit the data with a traditional 2 class classifier. I’m using SVM for the classification. The option type ='C-classification' performs normal classification. I’m not going to get into the details of SVM here, but for more information check out this tutorial. I’m also not going to tune any hyper-parameters.\n\n# fitting SVM on training data \ntwo_class_svm_model <- svm(train_predictors, y = train_labels,\n               type = 'C-classification',\n               scale = TRUE,\n               kernel = \"radial\")\n\n# now predicting both classes on train and test data\ntwo_class_svm_predtrain <- predict(two_class_svm_model,train_predictors)\ntwo_class_svm_predtest <- predict(two_class_svm_model,test_predictors)\n\n\n# code below here will be provided\n# seeing how well the model did\ntwo_class_confTrain <- table(Predicted = two_class_svm_predtrain, Reference = train_labels)\ntwo_class_confTest <- table(Predicted = two_class_svm_predtest, Reference = test_labels)\n\n# printing out the results\nprint(\"These are the predictions on the training data:\")\n\n[1] \"These are the predictions on the training data:\"\n\nprint(two_class_confTrain)\n\n         Reference\nPredicted FALSE TRUE\n    FALSE    12    0\n    TRUE      2  587\n\nprint(\"These are the predictions on the test data:\")\n\n[1] \"These are the predictions on the test data:\"\n\nprint(two_class_confTest)\n\n         Reference\nPredicted FALSE TRUE\n    FALSE     6    0\n    TRUE      2  391\n\n\nWe see that the two-class classifier does very well! In the test data set, it correctly predicts 397/ 399 data points. However, it misidentified a quarter of the disease patients as having normal thyroid. This is as I mentioned above- models can generally achieve good accuracy, but by over predicting the majority class. This result could potentially be unacceptable for a healthcare application."
  },
  {
    "objectID": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#one-class-svm",
    "href": "posts/2023-03-30-One-Class-SVM/one-class-svm.html#one-class-svm",
    "title": "One Class SVM",
    "section": "One-class SVM",
    "text": "One-class SVM\nNow, let’s compare this to the one-class classifier. I will use the one-class classifier in supervised mode; that is, I will pass it labeled data, but only for the normal class. Then I will predict and calculate metrics based on both classes. There are a few different ways we can prepare this data. For ease of comparison with the regular classifier, I will use the same splits but filter out the anomalies from the training data. You might instead filter out all the outliers from the training set and add them to the test set, so you can get a better idea of how the model works for outlier detection. However, I want an apples-to-apples comparison, so I’m not doing that here. The regular and one class SVM will be predicting on the same test data set.\n\n# subset the labeled data into the two classes\n# the normal class should be called \"train_normal\" and the anomaly\n# class should be called \"test_outlier\"\n\ntrain_normal_class <- subset(thyroid[inTrain, ], label == TRUE)\n\n\ntrain_normal_class_pred <- train_normal_class[,2:7]\ntrain_normal_class_label <- train_normal_class[,1]\n\n\n# fitting one class SVM on training data- no labels needed! \none_class_svm_model <- svm(train_normal_class_pred, y = NULL,\n               type = 'one-classification',\n               nu = 0.10,\n               scale = TRUE,\n               kernel = \"radial\")\n\n# now predicting both classes on train and test data\none_class_svm_predtrain <- predict(one_class_svm_model,train_normal_class_pred)\none_class_svm_predtest <- predict(one_class_svm_model,test_predictors)\n\n\n# code below here will be provided\n# seeing how well the model did\none_class_confTrain <- table(Predicted = one_class_svm_predtrain,\n                             Reference = train_normal_class_label)\none_class_confTest <- table(Predicted = one_class_svm_predtest,\n                            Reference = test_labels)\n\n# printing out the results\nprint(\"These are the predictions on the normal class training data only:\")\n\n[1] \"These are the predictions on the normal class training data only:\"\n\nprint(one_class_confTrain)\n\n         Reference\nPredicted TRUE\n    FALSE   61\n    TRUE   526\n\nprint(\"These are the predictions on the test data with both classes:\")\n\n[1] \"These are the predictions on the test data with both classes:\"\n\nprint(one_class_confTest)\n\n         Reference\nPredicted FALSE TRUE\n    FALSE     8   40\n    TRUE      0  351\n\n\nThis model doesn’t do quite as well, but it is pretty impressive given that it only learned on normal data. It correctly predicted 359/399 data points in the test set. It incorrectly classified 44 cases as abnormal when they were normal, but correctly found all 8 disease cases.\nSo now I’ve showed you how to use a one-class SVM to predict outliers. This is an incredible useful tool to keep in mind for classification tasks."
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 1",
    "section": "",
    "text": "The best way to learn a programming language is to code. Obvious, but sometimes it can be daunting to start a project when you are a novice. Influenced by my time at a start-up, I’ve found the best approach is to create a minimum viable product. This is the smallest working part of the project. By continuing to revise and iterate the code, you can rapidly detect weaknesses in your knowledge and take active steps to fix them.\nMy learning project was a Wordle Guess Generator. I will show you how I used this project to create a self-guided learning plan. Motivated partly by my desire to have good guesses for Septle (a seven-letter guessing game), this project has been a crucial part of my journey to learn R. Practicing and learning coding skills were more important to me than devising the optimal strategy; if you are interested in “the best” Wordle strategy, then you will probably find much better answers by Googling.\nFor those who don’t know, Wordle is a word-guessing gamer that gives you five guesses to identify a 5-letter word. Correct letters are shown in green or yellow with each guess, depending on whether they are appropriately placed or not. Incorrect letters are shown in gray.\nI wasn’t interested in coming up with the global “best” answer. I wanted to come up with some guesses that fit my gameplay style. I guess three words in a row without trying to solve the game. Then, with a fair number of letters known, I attempt to solve the word.\nThe code has undergone several significant overhauls as I’ve needed to learn new things and used this project as the test bed. And here it is again, as a vehicle to learn quarto/ markdown. Here I will show you the very first ugly code and how I critiqued and revised it over several months. I’ve put it all on GitHub. The project is unstructured, the code is ugly, and all the versioning was by filename."
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#brainstorming-the-project.",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#brainstorming-the-project.",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 1",
    "section": "1. Brainstorming the project.",
    "text": "1. Brainstorming the project.\nBrainstorm what you want this project to do. Try to have a very clear statement about the project’s goal at the top. If you can think of self-contained modules, mark that. If you can sketch out the scaffold of the code- great! If you have some ideas about the results, even better. Put everything you can think of down. I had been thinking about this project for a while, so this brainstorming sheet is neat. Neatness and organization are not important at this point; getting stuff written down is.\nMy goal was “I want 3 initial guesses for Septle. Ideally, I’ll maximize the number of unique letters, and I want to preferentially pick from the most frequently used letters.”\nI decided my scoring would be based on the frequency letters occur in English; more common letters get a higher score than uncommon letters. To generate the score for the word, I proposed the following process:\n\nRead in letter frequencies\nScoring [the letters, originally I thought it would be based on rank, with the most common letter getting a 26 and the least common getting a 1. That is what the confusing little sketch is attempting to convey. A is not the most common letter, nor is Z the least common.]\nRead in the list of words\nCalculate the scores [of the words]\nPick the best word as a first guess [best meaning highest scoring]\n\nI also talk about how the frequency distribution of letters will likely differ between five and seven-letter words. I suggested looking at the frequency of letters in modern text instead of just frequency lists from linguists. I noted that certain letters are more likely to be in a specific position, and it could be valuable to constrain the guess to typical positions. An example is that “y” is almost always at the end of a word in English, so “sadly” might be a better guess than “yacht” for that reason. You are likelier to lock down a letter with a positionally accurate guess. I also said that I wanted a 4th Wordle guess. There are a lot of ideas here! That’s okay because I winnow them down in the next step.\n\n\n\nThe initial brainstorming session"
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#minimum-viable-product-what-is-the-smallest-program-that-works",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#minimum-viable-product-what-is-the-smallest-program-that-works",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 1",
    "section": "2. Minimum Viable Product: What is the smallest program that works?",
    "text": "2. Minimum Viable Product: What is the smallest program that works?\nPull out the minimum viable product from your brainstorming. What is the smallest result that would satisfy your goals? Is there a way to make things a bit smaller? I would size it so you can get working code to accomplish the goal in a few hours.\nI chose to generate four guesses for Wordle. I also decided to generate my frequency table from the word list itself. I found a five-letter word list that I could download and read in, but all the letter frequency tables I found were on blogs or in articles, and the only way I could see to get them into my program was to type them in and I was too lazy to do that. I decided to implement the process I outlined in the brainstorming session and calculate four guesses."
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#write-some-bad-code.",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#write-some-bad-code.",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 1",
    "section": "3. Write some bad code.",
    "text": "3. Write some bad code.\nWrite some code that does that thing. It will be ugly. If you can’t figure something out, do it the wrong way. Just get something running.\nThis first attempt took me 3-4 hours to write.\nI googled how to calculate the frequency of letters in words (in R) and found this helpful tutorial.\n\nThe Minimal Viable Product: Running Code\nI cleaned up the commenting/formatting of the initial code just for this post. I also added library(tidyverse)- apparently, I was just loading libraries through the gui back then. If you want to see the true initial version, it is on GitHub.\nHere’s what my MVP does:\n\nI found a list of five letter words online and imported it.\nI calculated how often each letter occurred over the word list.\n(This, or the scaled version, was the score assigned to each letter.)\nI looped through the word list and calculated two scores for each word, one using all letters and one using only the unique letters.\nI picked the highest-scoring word as my first guess.\nI then went through the word list and calculated a second score for the words minus the letters already guessed in the first guess (and ignoring duplicated letters).\nI picked the highest-scoring word as my second guess.\nI repeated steps 5 & 6 to pick a third guess.\n\nOkay, so let’s look at some bad code. I will flag a few things as we go through, but I’m certain you can find much more that is not optimal.\nHere’s loading the data and writing two scoring functions. I first wrote these in the code but had time to convert them to functions in this initial work session. It was an opportunity to practice function writing, but it was not critical to the minimum viable product.\nI have lots of print statements commented out; this is a very simple way to debug and see how you are proceeding through the code. There are more sophisticated tools in R Studio, but I didn’t want to figure out how to use them at this moment. I use the global variable char_frequencies for the value of each letter. I create this variable in the next code chunk.\n\nlibrary(tidyverse)\n\nsgb.words <- \n  read.delim(\"C:/Users/drsin/OneDrive/Documents/R Projects/wordle/sgb-words.txt\",\n             sep = \"\")\n\n#probably want this instead because it assumes no headers\n#test6 <- read.table(file.choose())\n\nScoring_Word <- function(word){\n  #i'm not handling duplicate letters at all right now\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n  value <- 0\n  for (i in 1:5) {\n    position <- letter_vec[i] == char_frequencies$letters\n    value[i] <- y[position]\n   # print(i)\n    if (i == 5) {\n     # print(\"I am here\")\n     # print(sum(value))\n      return(total <- sum(value))\n      }\n    \n  }\n} \n\n\nScoring_Word_Unique <- function(word){\n\n # print(word)\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n  unique_letter_vec <- unique(letter_vec)\n  #print(unique_letter_vec)\n  #print(length(unique_letter_vec))\n  \n  value <- 0\n  if (length(unique_letter_vec) == 0) {\n    return(value)\n  } else{\n      for (i in 1:length(unique_letter_vec)) {\n      position <- unique_letter_vec[i] == char_frequencies$letters\n      value[i] <- y[position]\n    # print(i)\n    # print(value)\n    if (i == length(unique_letter_vec)) {\n      # print(\"I am here\")\n      # print(sum(value))\n      return(total <- sum(value))\n    }\n    \n  }\n  }\n}\n\nI did run through most of the code with five words initially, and then later the whole word list, when I was more confident that things worked.\nI calculate how often each letter appears in the list and create the scaled version. I created two incredibly ugly graphs: one of the raw counts for each letter and one of the scaled frequencies. This is also a moment to do a quick reality check on the results- are the most and least common letters what you’d expect?\n\nstart_time <- Sys.time()\n\nletters <- unlist(strsplit(sgb.words[,1], split = \"\"))\nchar_frequencies <- as.data.frame(table(letters))\n#char_frequencies\n\nggplot(char_frequencies, \n        aes(x = fct_reorder(char_frequencies[,1], char_frequencies[,2])\n                              , char_frequencies[,2] )) +\n   geom_col() +\n   theme_classic()\n\n\n\ncommon <- max(char_frequencies[,2])\ny = (char_frequencies[,2]/common)\n\nggplot(char_frequencies, \n       aes(x =  fct_reorder(char_frequencies[,1], char_frequencies[,2]), y )) +\n  geom_col() +\n  theme_classic()\n\n\n\n\nNow I calculate the scores for the (hand-picked) words I’ve been playing with. I also hand-calculated these scores using the values from char_frequencies to ensure my scoring functions did what I thought they were.\nI initialized an object to store the words, scores, and guesses. You can also tell that I had no idea what data types my objects were since I called them a list. small_list is a matrix/array of characters, and none of my zeros are numbers. I wanted a dataframe, but I didn’t know how to do that. I didn’t have a strong reason to prefer a dataframe other than it was widely used in the courses I was taking at Datacamp.\nThis chunk also pulls out a single word and sends it to score to check that it works before I loop through the entire object and calculate all the scores.\nYou can also see I hard-coded the number of words (again… I did this in the prior code chunk too.)\n\n#calculate the score for crone\ncrone_score <- Scoring_Word(\"crone\")\n#might_score <- Scoring_Word (\"might\")\n#sadly_score <- Scoring_Word (\"sadly\")\nnum_words <- 5756\n#num_words <- 5\nsmall_list <- cbind(word_name = sgb.words[1:num_words,1], \n                    score =rep(0, times = num_words), \n                    unique_score = rep(0, times = num_words),\n                    post_word_one_unique = rep(0, times = num_words),\n                    post_word_two_unique = rep(0, times = num_words),\n                    post_word_three_unique = rep(0, times = num_words)\n                                                )\nword <- small_list[[1,1]]\nScoring_Word(word)\n\n[1] 3.40422\n\nind2 <- 0\n\nfor (ind2 in 1:num_words){\n  #print(small_list[[ind2,1]])\n  score_ind2 <- Scoring_Word(small_list[[ind2,1]])\n  small_list[[ind2,2]] <- score_ind2\n}\n\n#u_crone_score <- Scoring_Word_Unique(\"crone\")\n#u_there_core <- Scoring_Word_Unique (\"there\")\n#sadly_score <- Scoring_Word (\"sadly\")\n\nind2 <- 0\nfor (ind2 in 1:num_words){\n # print(small_list[[ind2,1]])\n  score_ind2 <- Scoring_Word_Unique(small_list[[ind2,1]])\n # print(score_ind2)\n  small_list[[ind2,3]] <- score_ind2\n}\n\nIn my attempt to sort the word scores and pick out the highest-scoring works, I created an unnecessary number of temporary variables. I forced one of these objects to be a dataframe, but I didn’t check the types of the individual components. Note that all my numbers are still characters. It is funny that things worked even though they were the wrong type.\n\nsmall_list1 <- small_list\nsmall_df <- as.data.frame(small_list1)\ntop_words <- small_df %>%\n arrange(desc(unique_score))\n\nword_1 <- top_words$word_name[1]\n\nNow I calculate the second and third guesses. I wanted to penalize duplicate letters, so I used the unique letter scoring function and removed the letters from the first guess. I couldn’t figure out how to do that automatically, so I hardcoded to remove the letters “a”, “r”, “o”, “s”, and “e” from the words before I sent them to be scored. This is precisely the kind of situation where you can get bogged down doing things “properly” and end up stuck. I quickly attempted to figure it out and then did it incorrectly. You can also see that I have a bunch of stuff commented out that didn’t work and a bunch of print statements for debugging. This is not pretty code.\nThen I loop through the list again and repeat for the last guess. Again, hardcoded in the letters to remove from the first and second guesses.\n\n#now we need a function that sees if a word has the letters of the word_1\n#and removes them and then calculates the word score\n#top word is arose\n# Word 1= arose -----\nind3 <- 1\nfor (ind3 in 1:num_words) {\n # print(top_words$word_name[ind3])\n  test <- small_list[[ind3,1]]\n  lvec <- gsub(\"[a r o s e]\", \"\", test)  #this actually works.  How do I use the string?\n  #lvec <-  unlist(strsplit(word_1, split = \"\"))\n  #lvec<- \"t|h|e|i|r\" #how do I contruct this automatically\n\n  #new_let <- str_remove_all(pattern= lvec, string= test)\n # print(lvec)\n  score_ind3 <- Scoring_Word_Unique(lvec)\n # print(\"writing score\")\n # print(c(ind3, \" \", score_ind3, \"for the word \", test, \"sent as \", lvec))\n  \n  small_list[[ind3,4]] <- score_ind3\n  #print (c(\"output of small list \", top_words[[ind3,4]]))\n}\n\nsmall_df2 <- as.data.frame(small_list)\ntop_words2 <- small_df2 %>%\n  arrange(desc(post_word_one_unique))\n\n\nword_2 <- top_words2$word_name[1]\n\n# top word 2 is until\n\nind4 <- 1\nfor (ind4 in 1:num_words) {\n  # print(top_words$word_name[ind3])\n  test <- small_list[[ind4,1]]\n  lvec <- gsub(\"[u n t i l a r o s e]\", \"\", test)  #this actually works.  How do I use the string?\n  #lvec <-  unlist(strsplit(word_1, split = \"\"))\n  #lvec<- \"t|h|e|i|r\" #how do I contruct this automatically\n  \n  #new_let <- str_remove_all(pattern= lvec, string= test)\n  # print(lvec)\n  score_ind4 <- Scoring_Word_Unique(lvec)\n  # print(\"writing score\")\n  # print(c(ind3, \" \", score_ind3, \"for the word \", test, \"sent as \", lvec))\n  \n  end_time <- Sys.time()\n  end_time - start_time\n  \n  small_list[[ind4,5]] <- score_ind4\n  #print (c(\"output of small list \", top_words[[ind3,4]]))\n}\n\nsmall_df3<- as.data.frame(small_list)\ntop_words2 <- small_df3 %>%\n  arrange(desc(post_word_two_unique))\n\n\nword_3 <- top_words2$word_name[1]\n\nLastly, I calculated the total score of these three words compared to my hand-picked words.\n\na = Scoring_Word_Unique(\"arose\") + \n  Scoring_Word_Unique(\"until\") + \n  Scoring_Word_Unique(\"dumpy\")\na\n\n[1] 8.013518\n\nb = Scoring_Word_Unique(\"crone\") +\n  Scoring_Word_Unique(\"mighty\") +\n  Scoring_Word_Unique(\"sadly\")\nb\n\n[1] 8.081767\n\n\nNote that there is an error here too. By calling Scoring_Words_Unique on individual words, I did not penalize duplicate letters. Thus “u” appears in two words. The correct scoring call should have been:\n\nc = Scoring_Word_Unique(\"aroseuntildumpy\")\nc\n\n[1] 7.654468\n\n\nBut the program works! It generated three reasonable guesses for Wordle that use common letters. (Note that by my scoring rules, the manually chosen set of words is a better choice.)"
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#critique-the-code",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-1/Wordle.html#critique-the-code",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 1",
    "section": "4. Critique the code",
    "text": "4. Critique the code\nThis step is the critical step to accelerate your learning. You need to review your code and list everything you know is not done properly and everything confusing you. This should be done at the end of every session or at the start of the next. Be honest with yourself. If you don’t understand something, put it on your list, even if your code works. The point of this exercise is to increase your coding proficiency.\nThis is my list from that code we just reviewed. I created this the next day before I started work. Note my versioning by file name.\n\nSave current code as frequency_072222 and work on a new copy. This was functional code last night, so I want to keep it.\nImport is wrong because it takes the first word as a header.\nI need more concise variable names. Also, I create a bunch of temp variables that aren’t needed.\nI manually subtract out (hard-coded) words picked in previous cycles. I need that done on the fly.\nOnce 4 is done, I’d like to write a function to generate however many guesses you ask for.\nI’d like to look at the histogram of the scores as you cycle through the guesses.\nI’m very unclear on when I need lists, dataframes, tibbles, etc., for the different functions.\nGive credit to the website where I took the string split code from.\nSome functions from the other code are out of date, so I should update them. [I got warnings in R Studio about this, which I didn’t understand.]\nUpdate scoring_word to have flexible word length.\n\nAgain, there is a lot more wrong with this code, but this is the list of things I could identify with the knowledge I had at the time.\nThe next day, I created a chart of all my variables, their sizes, and their types. I also proposed new, clearer names for them, though this wasn’t implemented until a few days later. I mostly played around with how long it took to calculate the initial score and unique score using separate or combined loops. I used sys.time() to benchmark, which didn’t seem terribly consistent in its output. However, there didn’t seem to be a huge difference between the methods, so I returned it to two loops for clarity. At the end of this day, I had four items on my task list after critiquing and reviewing. The last one was, “I need to figure out git_hub or come up with a better way of versioning than the date.”\nProving that point, I put the wrong date in all the file names the next time I worked on the code. In that session, I devoted most of the time to figuring out item 4 on my task list. I wrote a function called remove_letters, which could be used instead of hard coding. I also played around with reshaping the data using pivot_longer from tidyr. I created a histogram of word scores as letters are removed from consideration, which required the reshaped data. Reshaping data can be tricky, so this was a good opportunity to work through that process. (Again, versioning by name, this was called “frequency_072422_tidyr”, in case I really messed up.)"
  },
  {
    "objectID": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle.html",
    "href": "posts/2023-04-01-self-guided-learning-wordle-guesser-part-2/current_wordle.html",
    "title": "Self-Guided Learning through a Wordle Guess Generator: Part 2",
    "section": "",
    "text": "This is the current version of the word game guesser. I discussed how I used this project to hone my coding skills in the companion blog post to this one.\nI’m not going to walk through this in much detail, but I’m going to point out some of the major lessons I learned as I revised the code. Again, both the initial version and this version are on GitHub in all their messiness.\nI learned how to put functions in a separate file and call them from my many script. This can make long code much easier to read. Here, I’ve included the helper functions in-line and commented out the source(\"code/helper-functions.R\") in the main code. I’ve also set up switchable troubleshooting help with verbose and debug_detail parameters in my functions. Setting them to TRUE provide more info as the functions are executed.\n\n#|label: helper-functions\nConstruct_Freq_Table <- function(word_list) {\n\n#scoring code uses the counting code from\n\n#https://www.r-bloggers.com/2018/12/rrrrs-in-r-letter-frequency-in-r-package-names/  \n# making the frequency table ----\n\nletters <- unlist(strsplit(word_list[,1], split = \"\"))\nchar_frequencies <- as.data.frame(table(letters))\n\n#normalized\ncommon <- max(char_frequencies[,2])\ny = (char_frequencies[,2]/common)\nchar_frequencies$normalized <- y\nreturn(char_frequencies)\n}\n\nScoring_Word <- function(word, freqs = char_frequencies,\n                         verbose = FALSE, debug_detail = FALSE){\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n    if (verbose == TRUE)\n    {message(\"I'm in Scoring_words message and scoring: \", word)}\n  \n  value <- 0\n  for (i in 1:length(letter_vec)) {\n    position <- letter_vec[i]== freqs$letters\n    value[i] <- freqs$normalized[position]\n    if (debug_detail == TRUE)\n    {\n      print(\"I am in the scoring loop calculating value: \")\n      print(i)\n      print(sum(value))\n      \n    }\n    \n    if (i == length(letter_vec)) {\n      \n      return(total <- sum(value))\n    }\n    \n  }\n  }\n  \n\nScoring_Word_Unique <- function(word, freqs = char_frequencies, \n                                verbose = FALSE, debug_detail = FALSE){\n  # This does only score on unique letters\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n  unique_letter_vec <- unique(letter_vec)\n  #unique_letter_vec <- letter_vec\n  if (verbose == TRUE)\n  {message(\"I'm in Scoring_words_Unique and scoring: \", word)}\n  \n  value <- 0\n  if (length(unique_letter_vec) == 0) {\n    return(value)\n  } else{\n    for (i in 1:length(unique_letter_vec)) {\n           position <- unique_letter_vec[i] == freqs$letters\n          value[i] <- freqs$normalized[position]\n      if (debug_detail == TRUE)\n      {\n        print(\"I am in the unique scoring loop calculating value: \")\n        print(i)\n        print(sum(value))\n      }\n      \n      if (i == length(unique_letter_vec)) {\n        \n        return(total <- sum(value))\n      }\n      \n    }\n  }\n}\n\nRemoving_Letters <- function(word, chosen_word, \n                              verbose = FALSE, debug_detail = FALSE) {\n  lvec <- gsub(paste0(\"[\", chosen_word, \"]\"), \"\", word)  \n  return(lvec)}\n\nI finally did figure out how to make variables the types I wanted. I also replaced several loops with map functions from purrr. I also made a reshaped version of my dataframe using pivot_longer from tidyr. Reshaping data is a really useful skill, but might be a bit confusing at first. So I certainly wanted to make sure I could do it correctly. The reshaped data is used to make a nice density plot later.\n\n# Loading libraries and data ----\nlibrary(\"tidyverse\")\n\n\n#from https://www-cs-faculty.stanford.edu/~knuth/sgb-words.txt\nword_list <- \n  read.table(\"C:/Users/drsin/OneDrive/Documents/R Projects/Word-Games/input/sgb-words.txt\") \n\n# Functions ----\n#source(\"code/helper-functions.R\")\n\n# calculate letter frequencies from word list\nchar_frequencies <- Construct_Freq_Table(word_list)\n\n# Initialize the word_scores dataframe ----\nnum_words <- nrow(word_list)\n#num_words <- 5\nword_scores <- data.frame(word_name = word_list[1:num_words,1],\n                    word_length = rep(0, times = num_words),\n                    word_guess1 = rep(0, times = num_words),\n                    word_guess2 = rep(0, times = num_words),\n                    word_guess3 = rep(0, times = num_words),\n                    word_guess4 = rep(0, times = num_words),\n                    score = rep(0, times = num_words), \n                    score_guess1 = rep(0, times = num_words),\n                    score_guess2 = rep(0, times = num_words),\n                    score_guess3 = rep(0, times = num_words),\n                    score_guess4 = rep(0, times = num_words)\n                                                )\n#fill in word lengths.  This is so code can be expended to longer words\nword_scores$word_length <-  str_length(word_scores$word_name)\n\n# Calculates the initial scores for all words -----\n\nword_scores <- word_scores %>% \n  mutate(score = map_dbl(word_name, Scoring_Word))\n\nword_scores <- word_scores %>%\n  mutate(score_guess1 = map_dbl(word_name, Scoring_Word_Unique))\n\n\n# Finding the best first word\ntop_words <- word_scores %>%\n arrange(desc(score_guess1))\nword_1 <- top_words$word_name[1]\n\n# Scoring for second guess\nword_scores <- word_scores %>%\n  mutate(word_guess2 = \n           map_chr(word_name, Removing_Letters, chosen_word = word_1))\nword_scores <- word_scores %>%\n  mutate(score_guess2 = map_dbl(word_guess2, Scoring_Word_Unique))\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess2))\n\nword_2 <- top_words$word_name[1]\n\n# Scoring for third guess\nword_scores <- word_scores %>% \n  mutate(word_guess3 =\n           map_chr(word_guess2, Removing_Letters, chosen_word = word_2))\nword_scores <- word_scores %>%\n  mutate(score_guess3 = map_dbl(word_guess3, Scoring_Word_Unique))\n\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess3))\nword_3 <- top_words$word_name[1]\n\n# Scoring for fourth guess\nword_scores <- word_scores %>%\n  mutate(word_guess4 = \n           map_chr(word_guess3, Removing_Letters, chosen_word = word_3))\nword_scores <- word_scores %>%\n  mutate(score_guess4 = map_dbl(word_guess4, Scoring_Word_Unique))\n\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess4))\n\nword_4 <- top_words$word_name[1]\n\n# subsetting this dataframe and reshaping it.\n# This is used to make a density plot later.\nword_scores2 <- word_scores %>%\n   select(word_name, score_guess1, score_guess2, score_guess3, score_guess4)\nword_scores_reshaped <- \n  pivot_longer(word_scores2, cols = 2:5, \n               names_to = \"score_type\", values_to = \"score\")\n\nNice visualizations were definitely not part of the initial code. In the next chunk, I make some prettier visualizations.\n\n### This is now just visualizing what we've done. ------\n\n#plotting the frequency of the letters in our word_set\nggplot(char_frequencies, \n       aes(x = fct_rev(fct_reorder(letters,  normalized)), y = normalized )) +\n  geom_col() +\n  theme_classic() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Frequencies of Letters\", caption = \"from 5 letter words\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  xlab(\"Letter\") +\n  ylab(\"Frequency\") +\n    scale_y_continuous(expand = c(0, 0))\n\n\n\n## This looks at the distribution of scores as guessing occurs.  Initially, you have a\n\nword_scores_reshaped$score_type <- as.factor(word_scores_reshaped$score_type)\n\nggplot(word_scores_reshaped, aes(score, fill = score_type)) +\n  geom_density(alpha = 0.5) +\n  theme_classic() +\n  labs(title = \"Evolution of Word Scores as Guessing Progresses\",\n       caption = \"for 5 letter words\") +\n  xlab(\"Score\") +\n  ylab(\"Density\") +\n  labs(fill = \"\") +\n  theme(legend.position = c(0.7, 0.8)) +\n  scale_x_continuous( expand = c(0, 0)) +\n  scale_y_continuous( expand = c(0, 0)) \n\n\n\n## Now we are visualizing what letters are picked in each guess\nguess <- rep(\"not guessed\", times = 26)\nchar_frequencies <- cbind(char_frequencies, guess)\n\n# this is done in reverse order because some letters are guessed in more than\n# one word and I'd like them marked at the earliest guess.\nletter_vec <-  unlist(strsplit(word_4, split = \"\"))\nprint(letter_vec)\n\n[1] \"w\" \"h\" \"a\" \"c\" \"k\"\n\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 4\"\n}\n\nletter_vec <-  unlist(strsplit(word_3, split = \"\"))\nprint(letter_vec)\n\n[1] \"d\" \"u\" \"m\" \"p\" \"y\"\n\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 3\"\n}\n\nletter_vec <-  unlist(strsplit(word_2, split = \"\"))\nprint(letter_vec)\n\n[1] \"u\" \"n\" \"t\" \"i\" \"l\"\n\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 2\"\n}\n\n\nletter_vec <-  unlist(strsplit(word_1, split = \"\"))\nprint(letter_vec)\n\n[1] \"a\" \"r\" \"o\" \"s\" \"e\"\n\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 1\"\n}\n\n\nggplot(char_frequencies, aes(\n  x = fct_rev(fct_reorder(letters,  normalized)),\n  y = normalized,\n  fill = guess)) +\n  geom_col() +\n  ggtitle(\"When Letters are Guessed\") +\n  ylab(\"Normalized Counts\") +\n  xlab(\"Letter\") +\n  theme_classic() +\n  theme(legend.position = c(0.6, 0.6)) +\n  scale_y_continuous(expand = c(0, 0))\n\n\n\n\nSo that’s the current state of this project. This was a really useful project for me and it really strengthened by R and Tidyverse skills.\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {Self-Guided {Learning} Through a {Wordle} {Guess}\n    {Generator:} {Part} 2},\n  date = {2023-04-01},\n  url = {https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “Self-Guided Learning Through a Wordle\nGuess Generator: Part 2.” April 1, 2023. https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2."
  },
  {
    "objectID": "posts/2023-04-02-chart-challenge-2/parks.html",
    "href": "posts/2023-04-02-chart-challenge-2/parks.html",
    "title": "30 Day Chart Challenge -Arlington Parks",
    "section": "",
    "text": "When I looked at Twitter this morning, my feed was filled with amazing charts. Apparently, April is month for the #30DayChartChallenge. More info can be found at the challenge’s Github page. Each day, the challenge specifies a type of chart, but not a dataset. Today’s challenge is to create a waffle chart. I’d never heard of a waffle chart, but luckily, R has a package for that!\nKeeping it simple and just using tidyverse and waffle packages today. (Spoiler, I had incredible difficulties with this package.)\n\nlibrary(waffle)\nlibrary(tidyverse)\n\nA waffle chart is similar to a pie chart, but since it is constructed from squares, instead of wedges, it is a bit easier to correctly judge the relative areas.\nI discovered that Arlington County has a website with a bunch of open source data, so I poked around there to find a dataset for today’s challenge. I decided to use the dataset on parks and acreage. In addition to having local and federally owned parks, Arlington is park of a consortium of Northern Virginia jurisdictions that also operate regional parks.\n\nparks <- read_csv(\"parks.csv\")\n\nRows: 10 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (6): Profile Year, County Owned Parkland (Acreage), NOVA Parks (Acreage)...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset contains 3 years worth of data (2019-2021) and the total number of acres owned by the county, NOVA parks, and the National Park Service. It also includes the number of parks own by NOVA parks and the county, but not the number of NPS parks. I did try to find the number of NPS parks and the answer isn’t easily obtainable. The NPS owns one park in Arlington (Arlington House), but there are a couple of multi-state trails that might go through the county, but I wasn’t interested in pulling up maps to check.\nThe dataset comes as an excel sheet and the column names aren’t nice. I’ve been working with so many datasets designed for R or SQL that it was a shock to see long column names with spaces and punctuation. I had to look up how to handle that! The answer is backticks, as below.\n\nparks_2021 <- parks %>%\n  filter(`Profile Year` == 2021)\n\nI’m going to rename the columns and in this filtered dataset. There isn’t much year to year change in this dataset (there is one extra park in 2020), so I’m not going to do anything with the entire dataset. If I were, I’d rename the parent dataset.\n\nparks_2021 <- parks_2021 %>%\n  transmute(year = `Profile Year`,\n         county_acres = `County Owned Parkland (Acreage)`,\n         NOVA_acres = `NOVA Parks (Acreage)`,\n         NPS_acres = `National Parks Service (Acreage)`) \n\nparks_2021 <- parks_2021 %>%\n  select(-year)\n\nNow let’s get waffling!\nAllegedly, you can both pass waffle dataframes or use the provided geom_waffle, but neither was successful for me. With respect to the geom_waffle, I found a suggestion to install waffle from the github repo and restart R Studio, but that didn’t work for me. Others stated that re-installing R Studio fixed the problem, but my commitment to waffle charts is not that great.\nAs to passing it dataframes, waffle constantly complained about 'list' object cannot be coerced to type 'double' even when using code from other folk’s tutorial. Passing waffle a simple vector did work.\n\n# Vector\nx <- c(30, 25, 20, 5)\n\n# Waffle chart\nwaffle(x, rows = 8)\n\n\n\n\nSo, I converted my dataframe to a vector. First, I reshaped it to long rather than wide. (Neither the long nor the wide df waffled.)\n\nparks_2021_long <- pivot_longer(parks_2021, cols = 1:3, names_to = \"owner\", values_to = \"acreage\")\n\nThen I converted it to a vector. This should be a named vector of numbers.\n\nparks_2021_vec = deframe(parks_2021_long)\nclass(parks_2021_vec)\n\n[1] \"numeric\"\n\nprint(parks_2021_vec)\n\ncounty_acres   NOVA_acres    NPS_acres \n         924          136          417 \n\nstr(parks_2021_vec)\n\n Named num [1:3] 924 136 417\n - attr(*, \"names\")= chr [1:3] \"county_acres\" \"NOVA_acres\" \"NPS_acres\"\n\n\nLet’s waffle it. When I first waffled it, I got 4 categories instead of 3. I found an example that said you needed to explicitly pass it 3 colors or else it would fill in the blank space with a 4th color. Then you get the correct labels, but no chart!\n\n#This waffles, it seems like nonsense to me\n\nwaffle(parks_2021_vec, colors = c(\"#FFC0CB\", \"#FFC0AB\", \"green\"))\n\n\n\n\nSo now we reached the sad state of affairs where I type in the values to make this work. And that also does not work.\n\nx <- c(county = 924, nova = 136, nps = 417)\n\n# Waffle chart\nwaffle(x , rows = 10)\n\n\n\n\nSmall numbers work\n\ny <- c(county = 9.24, nova = 1.36, nps = 4.17)\n\n# Waffle chart\nwaffle(y ,  rows = 10)\n\n\n\n\nIf I convert everything to percentages…\n\ntotal = 924 + 136 + 417\ny <- c(county = (924/total)*100, nova = (136/total)*100, nps = (417/total)*100)\n\n# Waffle chart\nwaffle(y ,  rows = 10)\n\n\n\n\nI don’t find any documentation about the size of the numbers. It is not a requirement that the totals must add up to 100 (100%); small numbers adding up to anything works. Waffle charts are not only for proportional data, but can also be used to track progress. There is nothing in the documentation on CRAN that gives a clue about this, nor did I see anything in the tutorials I looked at.\nI’m going to pretty up the chart and call it a day. I thought this would take me about 20 minutes to make a nice chart and instead I’ve spent several hours and I don’t even understand what went wrong. Also, the named vector does work when I adjust the size of the numbers to “smaller” values. I picked nice forest colors since we are talking about parks.\n\nparks_2021_percent = (parks_2021_vec / total) * 100\n\n\nwaffle(parks_2021_percent, colors = c(\"darkgreen\", \"darkseagreen\", \"darkolivegreen\"), title = \"Who owns the parks in Arlington, Virginia?\")\n\n\n\n\nI don’t really understand the waffle package. I don’t find the graphic particularly understandable. I’d like there to be some sort of indication about what each square represents. And I find it very annoying that there are not 100 squares. I know this is a rounding issue, but given that the dataset, by the nature of how it was created, should equal 100%, the chart is just confusing. And for what it is worth, I had to repeatedly restart RStudio, because code chunks would just fail to do anything. They’d run, but there would be no output, not even warnings or errors.\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {30 {Day} {Chart} {Challenge} {-Arlington} {Parks}},\n  date = {2023-04-02},\n  url = {https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “30 Day Chart Challenge -Arlington\nParks.” April 2, 2023. https://lsinks.github.io/posts/2023-04-02-chart-challenge-2/parks."
  },
  {
    "objectID": "posts/2023-04-03-chart-challenge-3/day3.html",
    "href": "posts/2023-04-03-chart-challenge-3/day3.html",
    "title": "30 Day Chart Challenge- Flora and Fauna",
    "section": "",
    "text": "It is Day 3 of the #30DayChartChallenge. More info can be found at the challenge’s Github page. Today’s theme is flora and fauna. I found a trove of fascinating data at Global Assessment of Reptile Distributions. I chose the dataset on body size/ mass from the paper: “Different solutions lead to similar life history traits across the great divides of the amniote tree of life.” by Shai Meiri, Gopal Murali, Anna Zimin, Lior Shak, Yuval Itescu, Gabriel Caetano, and Uri Roll (Journal of Biological Research-Thessaloniki), 202128: 3.\nOkay, let’s go. I’m going to keep the libraries to a minimum. That’s always my goal, but yet I ended up with 6!\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(gt)\nlibrary(ggthemes)\nlibrary(cowplot)\nlibrary(magick)\n\n\nfauna <- read_csv(\"animals.csv\", show_col_types = FALSE)\n\nI’m going to change the class, clade, order, family and bionomial_2020 to factors. I’m keeping those columns and the mass and discarding the rest.\n\nfauna_cleaned <- fauna %>%\n  select(Class:`body mass (g)`) %>%\n  select(-`binomial_(original files)`) %>%\n  rename(mass_g = `body mass (g)`, name = binomial_2020) %>%\n  mutate(Class = factor(Class),\n         Clade = factor(Clade),\n         order = factor(order),\n         family = factor(family),\n         name = factor(name))\n\nSo, let’s see what kind of data we have.\n\ntable1 <- fauna_cleaned %>%\n  count(Class)\n\ngt(table1)\n\n\n\n\n\n  \n    \n    \n      Class\n      n\n    \n  \n  \n    Aves\n9534\n    Mammalia\n5840\n    Reptilia\n11240\n  \n  \n  \n\n\n\n\nWe have data on more than just reptiles, the dataset includes information about birds and mammals as well. But I’m only interested in reptiles.\n\nreptiles <- fauna_cleaned %>%\n  filter(Class == \"Reptilia\")\n\n\ntable2 <- reptiles %>%\n  count(Clade, order)\n\ngt(table2)\n\n\n\n\n\n  \n    \n    \n      Clade\n      order\n      n\n    \n  \n  \n    Crocodylia\nCrocodylia\n24\n    Rhynchocephalia\nRhynchocephalia\n1\n    Squamata\nSquamata (Amphisbaenia)\n195\n    Squamata\nSquamata (Sauria)\n6868\n    Squamata\nSquamata (Serpentes)\n3837\n    Testudines\nTestudines\n315\n  \n  \n  \n\n\n\n\nEveryone knows that turtles are the best type of reptile, so let’s filter even further.\n\nturtles <- reptiles %>% \n  filter(Clade == \"Testudines\")\n\ntable3 <- turtles %>%\n  count(order, family)\n\ngt(table3)\n\n\n\n\n\n  \n    \n    \n      order\n      family\n      n\n    \n  \n  \n    Testudines\nCarettochelyidae\n1\n    Testudines\nChelidae\n53\n    Testudines\nCheloniidae\n6\n    Testudines\nChelydridae\n3\n    Testudines\nDermatemydidae\n1\n    Testudines\nDermochelyidae\n1\n    Testudines\nEmydidae\n47\n    Testudines\nGeoemydidae\n69\n    Testudines\nKinosternidae\n24\n    Testudines\nPelomedusidae\n18\n    Testudines\nPodocnemididae\n8\n    Testudines\nTestudinidae\n54\n    Testudines\nTrionychidae\n30\n  \n  \n  \n\n\n\n\nLet’s take a look at how big (or mighty, as some might say) the different families of turtles are. There is a very large range of masses so I’m using a log scale.\n\nggplot(turtles, aes(x = family, y = mass_g, color = family)) +\n  scale_y_log10() +\n  geom_boxplot() +\n  ggtitle(\"Mightiness of Different Families of Turtle and Tortoise\") +\n  ylab(\"mass (g)\") +\n  theme(legend.position = \"none\" , \n        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n\n\n\n\nThe heaviest turtles are the giantic leatherback turtles, a species of SEA TURTLE that weigh hundred of kg (around 1,000 lbs). The smallest turtle is the African dwarf mud turtle (Pelusios nanus), family Pelomedusidae, which full grown weighs under 100 grams.\nNow let’s look at everyone’s favorite family of turtles, Emydidae. This family is often known as pond or marsh turtles. Filter them out, and add a category for Eastern Box Turtles. I called the variable box_turtle, but I’m only marking Eastern. There are other types of box turtles though not all of them are in Emydidae. Asian box turtle species were reassigned to the family Geoemydidae.\nThe common name box turtle, arises from the fact that these species have a hinge on the bottom shell, and can close up/ box up completely. Other turtles and tortoises can only pull their bits within their shell.\n\n\n\nA closed Eastern Box Turtle\n\n\n\npond_turtles <- turtles %>%\n  filter(family == 'Emydidae') %>%\n  mutate(box_turtle = ifelse(name == \"Terrapene carolina\", TRUE, FALSE)) \n\nOkay, let’s look at mightiness of the turtles in this family.\n\nturtle_plot <- pond_turtles %>%\n  ggplot(aes(x = fct_reorder(name, mass_g), y = mass_g, fill = box_turtle)) +\n  scale_fill_manual(values=c(\"#999999\", \"#E69F00\")) +\n  geom_col(width = 0.7, position = position_dodge(10)) +\n  coord_flip() +\n  ylab(\"mass (g)\") +\n  xlab(\"\") +\n  ggtitle(\"Mightiness of Different Turtles in family Emydidae\") +\n  labs(caption = \"Data from https://doi.org/10.1186/s40709-021-00134-9\") +\n  theme_classic() +\n  theme(axis.text = element_text(size = 6)) +\n  theme(legend.position = \"none\")\n\n\n#found how to add an image to my graph on stack overflow\n#https://stackoverflow.com/questions/63442933/how-can-i-add-a-logo-to-a-ggplot-visualisation\n\nimg <- image_read(\"pqtk5r.jpg\")\n\n# Set the canvas where you are going to draw the plot and the image\nggdraw() +\n# Draw the plot in the canvas setting the x and y positions, which go from 0,0\n# (lower left corner) to 1,1 (upper right corner) and set the width and height of\n# the plot. It's advisable that x + width = 1 and y + height = 1, to avoid clipping # the plot\ndraw_plot(turtle_plot,x = 0, y = 0.15, width = 1, height = 0.85) +\n# Draw image in the canvas using the same concept as for the plot. Might need to \n# play with the x, y, width and height values to obtain the desired result\ndraw_image(img, x = 0.6, y = 0.35, width = 0.45, height = 0.45) \n\n\n\n\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {30 {Day} {Chart} {Challenge-} {Flora} and {Fauna}},\n  date = {2023-04-03},\n  url = {https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “30 Day Chart Challenge- Flora and\nFauna.” April 3, 2023. https://lsinks.github.io/posts/2023-04-03-chart-challenge-3/day3."
  },
  {
    "objectID": "posts/2023-04-04-chart-challenge-4/day4.html",
    "href": "posts/2023-04-04-chart-challenge-4/day4.html",
    "title": "30 Day Chart Challenge- Endangered Species",
    "section": "",
    "text": "It is Day 4 of the #30DayChartChallenge. More info can be found at the challenge’s Github page. Today’s theme is history. But this is a subtheme of “comparisions”, so I’d like to avoid doing a simple time series.\nI decided to look at the endangered species list the US Fish and Wildlife Service maintains. They have a bunch of data spread over multiple tables. I decided to look at the 5 year review data. A 5 year review is the assessment to decide if a species remains list or delisted. The dataset also contains the year the species was first listed. So I’d like to compare how many species have been listed vs. delisted.\nThe key to the different listing types is found here.\n\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(skimr)\nlibrary(waffle)\n\nToday, I’m was going to load the data directly from the website. I’ve been downloading it and reading it in from a local folder, but I thought it would be nice to download directly. However, the data uses a “blob:” url, which is not donwloadable directly. There is a way around this but then you have to process some JSON data. I”ll come back to this later, but for now, I’m just going to use a csv.\n\nendangered_df <- read_csv(\"five_year.csv\", show_col_types = FALSE)\n\n\nendangered_df_sub <- endangered_df %>%\n  select(name = `Common Name`, \n         status = `ESA Listing Status`, \n         date = `Listing Date`,\n         rec = `5YSR Recommendation`)\n\nLet’s see what kind of categories we have.\n\nendangered_df_sub <- endangered_df_sub %>%\n  mutate(status = factor(status), rec = factor(rec))\n\nSkim this bad boy.\n\nskim(endangered_df_sub) %>% gt()\n\n\n\n\n\n  \n    \n    \n      skim_type\n      skim_variable\n      n_missing\n      complete_rate\n      character.min\n      character.max\n      character.empty\n      character.n_unique\n      character.whitespace\n      factor.ordered\n      factor.n_unique\n      factor.top_counts\n      numeric.mean\n      numeric.sd\n      numeric.p0\n      numeric.p25\n      numeric.p50\n      numeric.p75\n      numeric.p100\n      numeric.hist\n    \n  \n  \n    character\nname\n0\n1\n3\n51\n0\n1159\n0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n    factor\nstatus\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n8\nE: 1173, T: 316, DM: 35, DNS: 3\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n    factor\nrec\n0\n1\nNA\nNA\nNA\nNA\nNA\nFALSE\n7\nNo : 1389, Del: 49, Dow: 40, Del: 27\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n    numeric\ndate\n0\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1993.5\n12.4735\n1967\n1987\n1993\n1999\n2017\n▂▃▇▂▃\n  \n  \n  \n\n\n\n\nrec\n\nsummary(endangered_df_sub$rec)\n\n                    Delist: The listed entity does not meet the statutory definition of a species \n                                                                                                8 \nDelist: The species does not meet the definition of an endangered species or a threatened species \n                                                                                               49 \n                                                                   Delist: The species is extinct \n                                                                                               27 \n                                                                                    Downlist to T \n                                                                                               40 \n                                                                              No change in Status \n                                                                                             1389 \n                                                                        Revision of listed entity \n                                                                                                2 \n                                                                                      Uplist to E \n                                                                                               18 \n\n\nThe recommendations don’t always match the current status. I’m assuming the recommendations will be enacted/adopted eventually, so I am using them as the correct current status.\nWe have 7 levels in recommendations. We need to consolidate them. I’m going to combine “Delist: The listed entity does not meet the statutory definition of a species” and “Delist: The species does not meet the definition of an endangered species or a threatened species” into a level called delisted. The delisting because the species is extinct will be made into a level called extinct later.\n\nendangered_df_sub <- endangered_df_sub %>%\n  mutate(condensed = fct_collapse(rec, delisted = c(\"Delist: The listed entity does not meet the statutory definition of a species\",\n    \"Delist: The species does not meet the definition of an endangered species or a threatened species\")\n  ))\n\nI’m going to count both “Downlist to threatened” and “uplist to Endangered” as endangered. I don’t know the original listing level, so it doesn’t make too much difference to me.\n\nendangered_df_sub <- endangered_df_sub %>%\n  mutate(condensed = fct_collapse(condensed, endangered = c(\"Downlist to T\",\n    \"Uplist to E\")  ))\n\nNow, I’m pulling in the status for the entries that have “No change in Status” as the recommendation. I’m using a case_when and listing every combination. I could get this done if fewer lines if I used or statements (E or T is endangered), but I left it more granular in case I wanted to come back and change the levels. Maybe later I do care about the different between threatened and endangered and want to break them out separately.\n\nendangered_df_sub <- endangered_df_sub %>%\n  mutate(condensed = case_when(\n    condensed == \"No change in Status\" & status == \"E\" ~ \"endangered\",\n    condensed == \"No change in Status\" & status == \"T\" ~ \"endangered\",\n    condensed == \"No change in Status\" & status == \"RT\" ~ \"delisted\",\n    condensed == \"No change in Status\" & status == \"D3A\" ~ \"extinct\",\n    condensed == \"No change in Status\" & status == \"DM\" ~ \"delisted\",\n    condensed == \"No change in Status\" & status == \"DP\" ~ \"delisted\",\n    condensed == \"No change in Status\" & status == \"DR\" ~ \"delisted\",\n    condensed == \"No change in Status\" & status == \"DNS\" ~ \"delisted\",\n    condensed != \"No change in Status\" ~ condensed)\n    )\n\nNow I’m going to group my extincts.\n\nendangered_df_sub <- endangered_df_sub %>%\n  mutate(condensed = \n           fct_collapse(condensed, extinct = \n                          c(\"Delist: The species is extinct\", \"extinct\")))\n\nI’m not sure what : Revision of listed entity means. I’m going to see if there are comments back in the full dataset.\n\nendangered_df %>% \n  filter(`5YSR Recommendation` == \"Revision of listed entity\") %>% gt()\n\n\n\n\n\n  \n    \n    \n      Scientific Name\n      Common Name\n      Where Listed\n      ESA Listing Status\n      Lead Region\n      Listing Date\n      Most Recently Completed 5YSR\n      5YSR Recommendation\n      Notice of In Progress 5YSR\n      Notice Date of In Progress 5YSR\n      Group\n    \n  \n  \n    Rangifer tarandus ssp. caribou\nCaribou DPS, Southern Mountain\n<div>Southern Mountain DPS</div>\nE\n1\n1983\n2019-10-02\nRevision of listed entity\nNo Five Year Review In Progress\nNA\nMammals\n    Cereus eriophorus var. fragrans\nPrickly-apple, fragrant\n<div></div>\nE\n4\n1985\n2021-10-19\nRevision of listed entity\nNo Five Year Review In Progress\nNA\nFlowering Plants\n  \n  \n  \n\n\n\n\nI’m not seeing any explanation. There is not an entry in the code key either.\nOkay, now for a visualization. This actually seems perfect for a waffle. I’ve had bad luck with the waffle package, but know how to make it output something now. So, I will try waffling again. I did try a different package (ggwaffle) that also doesn’t work. It does let you use a dataframe, but it also doesn’t handle large numbers well. It soes let you downsample the data if the numbers are too large, but I’d rather just process the data myself to make it waffle.\nSo, first I need to summarize the data to get the counts per class.\n\nprogress <- endangered_df_sub %>%\n  count(condensed)\n\nprogress %>% \n  gt() %>%\n  cols_label(condensed = \"Status\", n = \"Number of species\") %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Progess of Endangered/Threatened species\")\n\n\n\n\n\n  \n    \n      Progess of Endangered/Threatened species\n    \n    \n    \n      Status\n      Number of species\n    \n  \n  \n    extinct\n27\n    delisted\n64\n    endangered\n1440\n    Revision of listed entity\n2\n  \n  \n  \n\n\n\n\nNow let’s change to percentages for optimal waffling\n\nnum_species <- nrow(endangered_df_sub)\nprogress_percent <- progress %>%\n  mutate(n = ( n/num_species) * 100)\n\nprogress_percent <- progress_percent %>%\n  mutate(n = round(n,1))\n\ngt(progress_percent) %>%\ncols_label(condensed = \"Status\", n = \"% of species\") %>%\n  opt_stylize(style = 6, color = \"blue\", add_row_striping = TRUE) %>%\n  tab_header(title = \"Progess of Endangered/Threatened species\") \n\n\n\n\n\n  \n    \n      Progess of Endangered/Threatened species\n    \n    \n    \n      Status\n      % of species\n    \n  \n  \n    extinct\n1.8\n    delisted\n4.2\n    endangered\n93.9\n    Revision of listed entity\n0.1\n  \n  \n  \n\n\n\n#Values below 1 won't show in a waffle graph anyway, so remove them.\nprogress_percent <- progress_percent %>%\n  filter(n >= 1)\n\nThe waffle package won’t work with dataframes for me, so make it a vector.\n\nprogress_vec = deframe(progress_percent)\n\n\nwaffle::waffle(progress_vec, colors = c(\"black\", \"darkgreen\", \"darkred\"),\n               title = \"How has the US done with our Endangered species?\",\n               xlab = \"1 square = 1%\") \n\n\n\n\n\n\n\nCitationBibTeX citation:@online{e.sinks2023,\n  author = {Louise E. Sinks},\n  title = {30 {Day} {Chart} {Challenge-} {Endangered} {Species}},\n  date = {2023-04-04},\n  url = {https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nLouise E. Sinks. 2023. “30 Day Chart Challenge- Endangered\nSpecies.” April 4, 2023. https://lsinks.github.io/posts/2023-04-04-chart-challenge-4/day4."
  },
  {
    "objectID": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html",
    "href": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html",
    "title": "A Tidymodels Tutorial",
    "section": "",
    "text": "As I’ve started working on more complicated machine learning projects, I’ve leaned into the tidymodels approach. Tidymodels is a highly modular approach, and I felt it reduced the number of errors, especially when evaluating many machine models and different preprocessing steps. (This is, in fact, a stated goal of the tidymodels ecosystem.)\nThroughout this tutorial, I will use the word “procedure” to describe a set of steps to go from data to final predictions. I’m doing this because tidymodels uses the word workflow for specific types of objects and functions. It would be too confusing to use workflow to also describe the process/procedure.\nBut the tidymodels ecosystem can also be very confusing. There are several component packages in tidymodels. While it is easy to explain what a recipe object (from the recipe package) does, it became increasingly difficult for me to name and describe the objects I was creating as I started building more sophisticated machine-learning procedures. And I found it even more confusing that simple and complex procedures, while going through the same basic steps (preprocess, train, evaluate, predict), created objects with different structures and data within them. I found it confusing that fit, last_fit, fit_resamples, etc., did not all produce objects that contained the same information and could be acted on by the same functions. In my first attempt at using last_fit(), I ended up scrapping the entire ML section and redoing it with fit()/predict() because I couldn’t figure out how to get the predictions out of the object created by last_fit().\nAdding to my woes was the fact that attempting to view/print/ examine these objects, especially in notebook environments, often caused the entire project to time out. RStudio generally handles these objects more gracefully, but I’ve also crashed it hard. It also isn’t consistent whether an object will lock-up RStudio or not. Once RStudio has locked up, restarting the program leads to an increasing number of freezes/locking up, until the computer is restarted.\nI’ve also manually numbered my code blocks and used that for referencing. I believe it is possible to hyperlink code chunks in Quarto, but I plan to replicate this project in an online notebook environment where that isn’t possible. The manual numbering will make it easier to cross-reference the two. I found online notebooks really did not like displaying many tidymodels objects. That’s also why there are timers around many of the display calls.\nSo here I’m going to go through three different procedures for modeling. I will compare and contrast the objects created as we move through the different procedures."
  },
  {
    "objectID": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#fitpredict",
    "href": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#fitpredict",
    "title": "A Tidymodels Tutorial",
    "section": "fit()/predict()",
    "text": "fit()/predict()\nFirst, I fit the model on the training data to get the fit and then I pass that fit and the test data to predict() to get the predictions for test.\n\n# Code block 10: Run fit/ predict on workflow\nwflow_fit <- fit(wf_simple, data = train_data)\nwflow_predict <- predict(wflow_fit, new_data = test_data)\nwflow_predict2 <- predict(wflow_fit, new_data = test_data, type = \"prob\" )\n\nWhat comes out of predict is super simple to understand. It is a list of predictions. No complicated nested list objects here. If I want probabilities instead of hard classification, I pass predict() the argument type = \"prob\" to get the probabilities instead.\n\n# Code block 11:  Examine the output of predict\nhead(wflow_predict)\n\n# A tibble: 6 × 1\n  .pred_class\n  <fct>      \n1 0          \n2 0          \n3 0          \n4 0          \n5 0          \n6 0          \n\nhead(wflow_predict2)\n\n# A tibble: 6 × 2\n    .pred_1 .pred_0\n      <dbl>   <dbl>\n1 0.00367     0.996\n2 0.00144     0.999\n3 0.0000262   1.00 \n4 0.00461     0.995\n5 0.0000279   1.00 \n6 0.00138     0.999\n\n\nWhat about our model? Maybe I want model coefficients or to see which features are most important. There is a lot of information here, but it isn’t very well structured. Again, this is a nested list. RStudio is displaying this nicely and the details can be seen using View().\n\n# Code block 12: Examine the outcome of fit \nwflow_fit\n\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n3 Recipe Steps\n\n• step_dummy()\n• step_normalize()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n            (Intercept)                lat_trans               long_trans  \n                7.06537                 -0.10230                 -0.01413  \n         distance_miles                      age                     hour  \n                0.06526                 -0.26818                 -0.82812  \n                weekday                  amt_log     category_food_dining  \n               -0.12721                 -1.87149                 -0.00929  \n category_gas_transport     category_grocery_net     category_grocery_pos  \n               -0.62772                 -0.29571                 -0.67063  \ncategory_health_fitness            category_home       category_kids_pets  \n                0.06286                  0.10517                  0.01683  \n      category_misc_net        category_misc_pos   category_personal_care  \n               -0.42138                 -0.13380                 -0.05152  \n  category_shopping_net    category_shopping_pos          category_travel  \n               -0.38932                 -0.16399                  0.18122  \n\nDegrees of Freedom: 254704 Total (i.e. Null);  254684 Residual\nNull Deviance:      16570 \nResidual Deviance: 11910    AIC: 11950\n\n\nWhile you can use standard R operations for interacting with lists and nested data to extract the desired information from wflow_fit, it is much easier to use the broom package. Broom is part of the core tidymodels installation, so it does not need to be installed separately. To get the model coefficients and p-values in tibble form, use tidy(). For high-level statistics about the model, use glance(). Just remember that the information you extract from the output of fit() relates to the model as applied to the training data. For information about the model performance as applied to the test data, you need to use the output of predict(). Since this output is only a vector of predictions, you need to bind it to the test dataframe and then perform analysis on the new object.\nSo it is pretty straightforward to get our model coefficients:\n\n# Code block 13: Summarize wflow_fit with tidy\nwflow_fit %>% tidy() #summarizes information about model components\n\n# A tibble: 21 × 5\n   term                   estimate std.error statistic   p.value\n   <chr>                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)             7.07       0.0703   101.    0        \n 2 lat_trans              -0.102      0.0305    -3.36  7.94e-  4\n 3 long_trans             -0.0141     0.0306    -0.462 6.44e-  1\n 4 distance_miles          0.0653     0.0318     2.05  4.02e-  2\n 5 age                    -0.268      0.0289    -9.27  1.87e- 20\n 6 hour                   -0.828      0.0397   -20.9   1.27e- 96\n 7 weekday                -0.127      0.0288    -4.41  1.03e-  5\n 8 amt_log                -1.87       0.0510   -36.7   2.76e-294\n 9 category_food_dining   -0.00929    0.0599    -0.155 8.77e-  1\n10 category_gas_transport -0.628      0.0593   -10.6   3.62e- 26\n# ℹ 11 more rows\n\n\nOr to get details of the model performance:\n\n# Code block 14: model info from wflow_fit with glance\nwflow_fit %>% glance() #reports information about the entire model\n\n# A tibble: 1 × 8\n  null.deviance df.null logLik    AIC    BIC deviance df.residual   nobs\n          <dbl>   <int>  <dbl>  <dbl>  <dbl>    <dbl>       <int>  <int>\n1        16568.  254704 -5956. 11953. 12173.   11911.      254684 254705"
  },
  {
    "objectID": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#last_fit",
    "href": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#last_fit",
    "title": "A Tidymodels Tutorial",
    "section": "last_fit()",
    "text": "last_fit()\nSo, from the tidymodels webpage, last_fit() is described as “last_fit() emulates the process where, after determining the best model, the final fit on the entire training set is needed and is then evaluated on the test set.” (Actually this is from the tune subpage, which is important, though I didn’t realize it.)\nI pass the workflow to last_fit() along with the data split object (with the info about testing and training) and the metrics set. In theory, the result should be the same as from fit()/predict() above.\n\n# Code block 15: Using lastfit() in hard classifier mode\nlast_fit_results <- last_fit(wflow_fit, data_split, metrics = fraud_metrics_hard)\n\nSo, I look at the results just as I did with predict in Code Block 11. And RStudio sometimes locks up. Other times, it produces a high-level overview as expected.\n\n# Code block 16: creating a workflow set\nstart_time_display <- Sys.time()\nhead(last_fit_results) \n\n# Resampling results\n# Manual resampling \n# A tibble: 1 × 6\n  splits                 id            .metrics .notes   .predictions .workflow \n  <list>                 <chr>         <list>   <list>   <list>       <list>    \n1 <split [254705/84902]> train/test s… <tibble> <tibble> <tibble>     <workflow>\n\nend_time_display <- Sys.time()\nprint(paste(\"last_fit_results: \", end_time_display - start_time_display))\n\n[1] \"last_fit_results:  0.0769269466400146\"\n\n\nSo how to get the predictions out? According to the manual page for last_fit(), the output is “A single row tibble that emulates the structure of fit_resamples(). However, a list column called .workflow is also attached with the fitted model (and recipe, if any) that used the training set.” I also see that last_fit() is actually from the tune package and not from parsnip as I expected. Nothing I’m doing here involves tuning hyperparameters at all. I expected that is was a parsnip object both thematically and because you interact with last_fit() using extract_fit_parsnip(), see Code Block 23.\nLooking fit_resamples() isn’t very helpful for answering this question. (Oh, but it is. It just took me another few paragraphs of writing to realize it.)\nI did find a Stackoverflow discussion that provided the answer in their code: last_fit1_pred <- last_fit1[[5]][[1]]\nThat’s not very straightforward!\nPull out the predictions from last_fit_pred.\n\n# Code block 17: extracting predictions from last_fit\nlast_fit_pred <- last_fit_results[[5]][[1]]\n\nLook at the head() of this object.\n\n# Code block 18: Examine the outcome of lastfit by head\nhead(last_fit_pred)\n\n# A tibble: 6 × 4\n  .pred_class  .row is_fraud .config             \n  <fct>       <int> <fct>    <chr>               \n1 0               1 0        Preprocessor1_Model1\n2 0               2 0        Preprocessor1_Model1\n3 0               8 0        Preprocessor1_Model1\n4 0              12 0        Preprocessor1_Model1\n5 0              13 0        Preprocessor1_Model1\n6 0              14 0        Preprocessor1_Model1\n\n\nLook at the head() of the object from predict().\n\n# Code block 19: Examine the outcome of predict by head\nhead(wflow_predict)\n\n# A tibble: 6 × 1\n  .pred_class\n  <fct>      \n1 0          \n2 0          \n3 0          \n4 0          \n5 0          \n6 0          \n\n\nUse identical() to compare the two hard predictions and verify they are the same.\n\n# Code block 20: showing that predict and the predictions in last_fit are the same\nidentical(last_fit_pred$.pred_class, wflow_predict$.pred_class)\n\n[1] TRUE\n\n\nNow, let the realization of what all the stuff about the tune package means hit you. We now know the full secrets of last_fit(). It turns out that any of the helper functions for tuning functions from the tune package work on last_fit() because it is a tune function. I don’t find the documentation for either the helper functions or last_fit() make that connection clear. I think that is what the reference to fit_resamples() on the last_fit() page is getting at.\nTidy Modeling with R also contains an example of using collect_predictions with last_fit(), but most examples are with tuning functions, so obviously from the tune family. One of the tutorials on the main tidymodels webpage does as well. But in general, extracting predictions from the test data is not demonstrated, just collecting metrics and analyzing model performance. So it is hard to google your way to the answer. This is the kind of situation I’ve struggled with throughout learning tidymodels and part of what motivated me to write this tutorial.\nSo now I get the predictions the easy way.\n\n# Code block 21: Examine the outcome of lastfit by head\nhead(last_fit_pred)\n\n# A tibble: 6 × 4\n  .pred_class  .row is_fraud .config             \n  <fct>       <int> <fct>    <chr>               \n1 0               1 0        Preprocessor1_Model1\n2 0               2 0        Preprocessor1_Model1\n3 0               8 0        Preprocessor1_Model1\n4 0              12 0        Preprocessor1_Model1\n5 0              13 0        Preprocessor1_Model1\n6 0              14 0        Preprocessor1_Model1\n\nlast_fit_results %>% collect_predictions()\n\n# A tibble: 84,902 × 5\n   id               .pred_class  .row is_fraud .config             \n   <chr>            <fct>       <int> <fct>    <chr>               \n 1 train/test split 0               1 0        Preprocessor1_Model1\n 2 train/test split 0               2 0        Preprocessor1_Model1\n 3 train/test split 0               8 0        Preprocessor1_Model1\n 4 train/test split 0              12 0        Preprocessor1_Model1\n 5 train/test split 0              13 0        Preprocessor1_Model1\n 6 train/test split 0              14 0        Preprocessor1_Model1\n 7 train/test split 0              16 0        Preprocessor1_Model1\n 8 train/test split 0              17 0        Preprocessor1_Model1\n 9 train/test split 0              19 0        Preprocessor1_Model1\n10 train/test split 0              25 0        Preprocessor1_Model1\n# ℹ 84,892 more rows\n\n\nAnd can evaluate the model performance.\n\n# Code block 22: collecting metrics from lastfit collect_metrics()\nlast_fit_results %>% collect_metrics()\n\n# A tibble: 1 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.995 Preprocessor1_Model1\n\n\nAnd extract the fit. This extract_fit_parsnip() result is an identical parsnip object as the workflow_fit object we got from fit() and can be handled the same way (i.e. via broom). You can refer back to Code Block 13 to see the results are the same. This is perhaps the key takeaway; these larger, more complex objects contain the simpler objects (workflows, parsnip objects) and they should be extracted and handled normally. Understanding this will make understanding how to handle a workflow_set() much easier.\n\n# Code block 23: extract model coefficients from last_fit() \nlast_fit_results %>% extract_fit_parsnip() %>% tidy()\n\n# A tibble: 21 × 5\n   term                   estimate std.error statistic   p.value\n   <chr>                     <dbl>     <dbl>     <dbl>     <dbl>\n 1 (Intercept)             7.07       0.0703   101.    0        \n 2 lat_trans              -0.102      0.0305    -3.36  7.94e-  4\n 3 long_trans             -0.0141     0.0306    -0.462 6.44e-  1\n 4 distance_miles          0.0653     0.0318     2.05  4.02e-  2\n 5 age                    -0.268      0.0289    -9.27  1.87e- 20\n 6 hour                   -0.828      0.0397   -20.9   1.27e- 96\n 7 weekday                -0.127      0.0288    -4.41  1.03e-  5\n 8 amt_log                -1.87       0.0510   -36.7   2.76e-294\n 9 category_food_dining   -0.00929    0.0599    -0.155 8.77e-  1\n10 category_gas_transport -0.628      0.0593   -10.6   3.62e- 26\n# ℹ 11 more rows"
  },
  {
    "objectID": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#handling-a-model-with-no-hyperparameters",
    "href": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#handling-a-model-with-no-hyperparameters",
    "title": "A Tidymodels Tutorial",
    "section": "Handling a model with no hyperparameters",
    "text": "Handling a model with no hyperparameters\nNormally, we’d want to extract the best recipe/model combination from this set. I’ll do that here. Again, I’m using j-index as my metric and from the output of Code Block 25, we see down_logreg is the best performing model. I extract that workflow from the set of results, and pass it to last_fit().\n\n# Code Block 27: Validating the best model with the test data\nvalidation_results <- tune_results %>%\n  extract_workflow(\"down_logreg\") %>%\n  last_fit(split =  data_split, metrics = fraud_metrics)\n\nNow we can use the same helper functions we did when we used last_fit() on the simple workflow, because we are working with a simple workflow! We pulled just the one workflow we wanted out.\nYou can see now that in addition to the hard classification we got from last_fit() before we also get the probabilities. This is driven by the metrics that make up the metrics set (see the yardstick section for more information). I use these predictions to create the ROC curve as well.\n\n# Code Block 28: Metric for best model with the test data\nhead(collect_predictions(validation_results))\n\n# A tibble: 6 × 7\n  id               .pred_1 .pred_0  .row .pred_class is_fraud .config           \n  <chr>              <dbl>   <dbl> <int> <fct>       <fct>    <chr>             \n1 train/test split  0.552    0.448     1 1           0        Preprocessor1_Mod…\n2 train/test split  0.197    0.803     2 0           0        Preprocessor1_Mod…\n3 train/test split  0.0329   0.967     8 0           0        Preprocessor1_Mod…\n4 train/test split  0.472    0.528    12 0           0        Preprocessor1_Mod…\n5 train/test split  0.0254   0.975    13 0           0        Preprocessor1_Mod…\n6 train/test split  0.312    0.688    14 0           0        Preprocessor1_Mod…\n\nvalidation_results %>% \n  collect_predictions() %>% \n  roc_curve(is_fraud, .pred_1) %>% \n  autoplot() + \n  ggtitle(\"ROC Curve\")"
  },
  {
    "objectID": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#handling-a-model-with-hyperparameters",
    "href": "posts/2023-04-10-tidymodels/tidymodels_tutorial.html#handling-a-model-with-hyperparameters",
    "title": "A Tidymodels Tutorial",
    "section": "Handling a model with hyperparameters",
    "text": "Handling a model with hyperparameters\nSuppose the best model was the elastic net. I tuned the hyperparameters when I did the fitting in workflow_map(). How do I deal with that?\nFirst, I need to extract the best set of hyperparameters. Here we aren’t extracting the workflow, we are extracting the workflow set result, which is our set of hyperparameters. This is a really simple object, so you can view it without fear.\n\n# Code Block 29: getting-hyperparameters\nbest_hyperparam <- tune_results %>% \n    extract_workflow_set_result(\"down_glmnet\") %>%\n    select_best(metric = \"j_index\")\n\nbest_hyperparam\n\n# A tibble: 1 × 3\n      penalty mixture .config             \n        <dbl>   <dbl> <chr>               \n1 0.000000137   0.570 Preprocessor1_Model4\n\n\nOur workflow for the glmnet is incomplete because it has tune() for the two hyperparameters, instead of the values. We know the best values (at least from the limited parameter space we explored.) I first extract_workflow() just as I did for the no hyperparameter case and then call finalize_workflow(best_hyperparam). This updates the workflow hyperparameters with the values we found. Everything is identical to the no hyperparameter case or the simple workflow/ last-fit() case. Realizing how/when to extract or reduce the more complex objects to the simpler objects is key to using tidymodels effectively.\n\n# Code Block 30: last_fit for a workflow with hyperparameter\nvalidation_results <- tune_results %>%\n  extract_workflow(\"down_glmnet\") %>%\n  finalize_workflow(best_hyperparam) %>%\n  last_fit(split =  data_split, metrics = fraud_metrics)\n\nNow we can handle this object exactly as before.\n\n# Code Block 31: Metric for best model with the test data\nhead(collect_predictions(validation_results))\n\n# A tibble: 6 × 7\n  id               .pred_1 .pred_0  .row .pred_class is_fraud .config           \n  <chr>              <dbl>   <dbl> <int> <fct>       <fct>    <chr>             \n1 train/test split  0.551    0.449     1 1           0        Preprocessor1_Mod…\n2 train/test split  0.217    0.783     2 0           0        Preprocessor1_Mod…\n3 train/test split  0.0342   0.966     8 0           0        Preprocessor1_Mod…\n4 train/test split  0.474    0.526    12 0           0        Preprocessor1_Mod…\n5 train/test split  0.0263   0.974    13 0           0        Preprocessor1_Mod…\n6 train/test split  0.316    0.684    14 0           0        Preprocessor1_Mod…\n\nvalidation_results %>% \n  collect_predictions() %>% \n  roc_curve(is_fraud, .pred_1) %>% \n  autoplot() + \n  ggtitle(\"ROC Curve\")\n\n\n\n\nSo that’s it. I hope this clarifies some of the different procedures you can use to fit models in the tidymodels framework."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog Entries",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nA Tidymodels Tutorial\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\ntidymodels\n\n\nMachine Learning\n\n\n\n\nExploring the different steps for modeling\n\n\n\n\n\n\nApr 10, 2023\n\n\n21 min\n\n\n\n\n\n\n  \n\n\n\n\n30 Day Chart Challenge- Endangered Species\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\nCode-Along\n\n\n30DayChartChallenge\n\n\nwaffle\n\n\n\n\nHow many species have been delisted?\n\n\n\n\n\n\nApr 4, 2023\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\n30 Day Chart Challenge- Flora and Fauna\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\nCode-Along\n\n\nturtle\n\n\n30DayChartChallenge\n\n\n\n\nHow Large are Different Types of Turtles?\n\n\n\n\n\n\nApr 3, 2023\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\n30 Day Chart Challenge -Arlington Parks\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\nCode-Along\n\n\nWaffle\n\n\n30DayChartChallenge\n\n\n\n\nWho Owns the Parks in Arlington Virgina?\n\n\n\n\n\n\nApr 2, 2023\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nSelf-Guided Learning through a Wordle Guess Generator: Part 1\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\n\n\nSkills improvement with a Wordle Guess Generator\n\n\n\n\n\n\nApr 1, 2023\n\n\n16 min\n\n\n\n\n\n\n  \n\n\n\n\nSelf-Guided Learning through a Wordle Guess Generator: Part 2\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\n\n\nCurrent version of a Wordle Guess Generator\n\n\n\n\n\n\nApr 1, 2023\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\nOne Class SVM\n\n\n\n\n\n\n\nR\n\n\nR-code\n\n\nCode-Along\n\n\nMachine Learning\n\n\ncaret\n\n\nSVM\n\n\nClassifiers\n\n\n\n\nOne Class SVM for Imbalanced Classes\n\n\n\n\n\n\nMar 30, 2023\n\n\n7 min\n\n\n\n\n\n\n  \n\n\n\n\nTidy Tuesday: Daylight Savings Time\n\n\n\n\n\n\n\nR\n\n\nTidyTuesday\n\n\nR-code\n\n\nCode-Along\n\n\nData-Viz\n\n\nggimage\n\n\nmaps\n\n\n\n\nTidyTuesday: Exploring Time Zones and Daylight Savings Time\n\n\n\n\n\n\nMar 28, 2023\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nTidyTuesday Week 12: Programming Languages Revisited\n\n\n\n\n\n\n\nR\n\n\nTidyTuesday\n\n\nR-code\n\n\nCode-Along\n\n\nData-Viz\n\n\nskimr\n\n\n\n\nTidyTuesday: Polishing\n\n\n\n\n\n\nMar 24, 2023\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nTwitter Cards\n\n\n\n\n\n\n\nQuarto\n\n\n\n\nMaking Twitter Cards\n\n\n\n\n\n\nMar 24, 2023\n\n\n0 min\n\n\n\n\n\n\n  \n\n\n\n\nTidyTuesday Week 12: Programming Languages\n\n\n\n\n\n\n\nR\n\n\nTidyTuesday\n\n\nR-code\n\n\nCode-Along\n\n\n\n\nTidyTuesday: How to comment in Various Programming Languages\n\n\n\n\n\n\nMar 21, 2023\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\nCreating a Blog\n\n\n\n\n\n\n\nQuarto\n\n\nR\n\n\nturtle\n\n\n\n\nTrying to create a Quarto Blog\n\n\n\n\n\n\nMar 14, 2023\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  }
]