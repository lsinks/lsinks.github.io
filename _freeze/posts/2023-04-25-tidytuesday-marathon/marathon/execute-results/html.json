{
  "hash": "91f219ad9e5d17d67dfb44e6fd048a25",
  "result": {
    "markdown": "---\ntitle: \"TidyTuesday Week 17: London Marathon\"\ndescription: \"TidyTuesday: Exploring the London Marathon\"\ntwitter-card:\n  image: \"thumbnail.png\"\nauthor:\n  - name: Louise E. Sinks\n    url: https://lsinks.github.io/\ndate: 04-25-2023\ncategories: [R, TidyTuesday, R-code, Data-Viz] # self-defined categories\ncitation:\n  url: https://lsinks.github.io/posts/2023-04-25-tidytuesday-marathon/marathon \nimage: \"thumbnail.png\"\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\nToday's [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-04-25/readme.md) is based on a dataset about the London Marathon. The data is via a [package by Nicola Rennie](https://github.com/nrennie/LondonMarathon) and there is an accompanying [tutorial about how to scrape data from the web](https://nrennie.rbind.io/blog/web-scraping-rvest-london-marathon/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(gt)\nlibrary(skimr)\n```\n:::\n\n\nLoad the data with the TidyTuesday package in the usual way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load(2023, week = 17)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Compiling #TidyTuesday Information for 2023-04-25 ----\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- There are 2 files available ---\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Starting Download ---\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 2: `winners.csv`\n\tDownloading file 2 of 2: `london_marathon.csv`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Download complete ---\n```\n:::\n\n```{.r .cell-code}\nwinners <- tuesdata$winners\nlondon_marathon <- tuesdata$london_marathon\n```\n:::\n\n\nThere are two dataframes today: a winner's dataframe and info about the marathon in general. Looking at the winner's first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>% skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |163        |\n|Number of columns        |5          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |3          |\n|difftime                 |1          |\n|numeric                  |1          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Category      |         0|             1|   3|  16|     0|        4|          0|\n|Athlete       |         0|             1|   9|  26|     0|       99|          0|\n|Nationality   |         0|             1|   5|  14|     0|       24|          0|\n\n\n**Variable type: difftime**\n\n|skim_variable | n_missing| complete_rate|min       |max        |median   | n_unique|\n|:-------------|---------:|-------------:|:---------|:----------|:--------|--------:|\n|Time          |         0|             1|5187 secs |16143 secs |02:07:55 |      158|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|    sd|   p0|    p25|  p50|  p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|-----:|----:|------:|----:|----:|----:|:-----|\n|Year          |         0|             1| 2001.61| 11.83| 1981| 1991.5| 2002| 2012| 2022|▇▇▇▇▇ |\n:::\n:::\n\n\nAll the data is complete.\n\n`Category` and `Nationality` should probably be factors rather than characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners <- winners %>%\n  mutate(Category = as.factor(Category), Nationality = as.factor(Nationality))\n\nglimpse(winners)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 163\nColumns: 5\n$ Category    <fct> Men, Men, Men, Men, Men, Men, Men, Men, Men, Men, Men, Men…\n$ Year        <dbl> 1981, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989…\n$ Athlete     <chr> \"Dick Beardsley (Tie)\", \"Inge Simonsen (Tie)\", \"Hugh Jones…\n$ Nationality <fct> United States, Norway, United Kingdom, United Kingdom, Uni…\n$ Time        <time> 02:11:48, 02:11:48, 02:09:24, 02:09:43, 02:09:57, 02:08:1…\n```\n:::\n:::\n\n\nWhen I check to make sure everything is correct after making the factors, I see that some athletes have (Tie) after their name. If I do something with the runner's names later (or if I care about ties) then I need to handle this.\n\nThere are four categories of races in our dataset- `Men`, `Wheelchair Men`, `Wheelchair Women`, `Women`.\n\nI'm going to do some simple comparisons first. I'm looking for something interesting to focus on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Men\" | Category == \"Women\") %>%\n  ggplot(aes(Category, Time)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Wheelchair Men\" | Category == \"Wheelchair Women\") %>%\n  ggplot(aes(Category, Time)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nMen are faster than women, in both classes of races.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  ggplot(aes(Category, Time)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWheelchair races are faster than the running races. The Men/Women's races are much closer than the Wheelchair races, and don't have outliers.\n\nI'm interested in ties. How many ties have there been? I'm going to make a column called \"Tied\" and remove (Tied) from the names. There are a few different ways to do this, but I'm going to use `tidyr::separate()`. I'm going to take the space too, when I separate out the name and (tie), so my name column is cleanly formatted. This is going to generate a bunch of NAs in the Tied column, but I'll handle that in the next code chunk. I'm using `\" (\"` as my separator, so the Name column will not have the trailing space. The Tied column will have \"Tie)\" and a bunch of NAs, but I'll clean this up in the next step. I've left warnings on for this code chunk, so you can see that the NAs are flagged for your notice.\n\nRemember that special characters like `(` need to be escaped out, so the appropriate regular expression for the separator is `\" \\\\(\"`.\n\nAs a side note, as of winter 2022, [separate has been superseded by a family of functions separate_wider\\_\\*](https://tidyr.tidyverse.org/reference/separate.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_tied <- winners %>%\n  separate(Athlete, into = c(\"Name\", \"Tied\"), \" \\\\(\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 161 rows [3, 4, 5, 6, 7,\n8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, ...].\n```\n:::\n:::\n\n\nNow I'm going to clean up the Tied column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_tied <- winners_tied %>%\n  mutate(Tied = ifelse(is.na(Tied) == TRUE, FALSE, TRUE))\n```\n:::\n\n\nSo how many ties are there?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_tied %>% filter(Tied == TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  Category  Year Name           Tied  Nationality   Time    \n  <fct>    <dbl> <chr>          <lgl> <fct>         <time>  \n1 Men       1981 Dick Beardsley TRUE  United States 02:11:48\n2 Men       1981 Inge Simonsen  TRUE  Norway        02:11:48\n```\n:::\n:::\n\n\nJust those first two, from the very first race. According to wikipedia, [they crossed the finish line holding hands](https://en.wikipedia.org/wiki/London_Marathon)!\n\nAnyone win more than once?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_tied %>%\n  group_by(Name) %>%\n  count(Name, sort = TRUE) %>%\n  filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 34 × 2\n# Groups:   Name [34]\n   Name                     n\n   <chr>                <int>\n 1 David Weir               8\n 2 Tanni Grey-Thompson      6\n 3 David Holding            4\n 4 Eliud Kipchoge           4\n 5 Francesca Porcellato     4\n 6 Ingrid Kristiansen       4\n 7 Tatyana McFadden         4\n 8 António Pinto            3\n 9 Dionicio Cerón           3\n10 Heinz Frei               3\n# ℹ 24 more rows\n```\n:::\n:::\n\n\nMore than I expected! [David Weir](https://en.wikipedia.org/wiki/David_Weir_(athlete)) has won the most London Marathons, with 8 wins in the Men's Wheelchair race category. How has his race time changed over the years?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners_tied %>%\n  filter(Name == \"David Weir\") %>%\n  ggplot(aes(Year, Time)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIt looks like his first race was much slower than the other times he has won. It turns out he has competed in the London Marathon 23 times, and [placed 5th in the 2023 Marathon](https://www.the-sun.com/sport/7942457/london-marathon-2023-results-time-winner-men-women-wheelchair/) which happened this weekend. His time on Saturday was 01:32:45. This is interesting, because it is quite similar to his more recent races.\n\nHas the field for this race gotten faster?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Wheelchair Men\") %>%\n  ggplot(aes(Year, Time)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nYes, and quite clearly too! How many years would he have won with this year's time?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_2023 <- as.difftime(\"01:32:45\", format = \"%H:%M:%S\", units = \"auto\")\nslow_wins <- winners %>%\n  filter(Category == \"Wheelchair Men\" & Time >= time_2023) \nfast_wins <- winners %>%\n  filter(Category == \"Wheelchair Men\" & Time < time_2023) \n```\n:::\n\n\nSo 12 years the wins were faster than his time this year, but 27 years were slower. And just to note, 6 of those 12 faster wins are held by David Weir...\n\nLet's throw together a visual for this and make it out TidyTuesday viz. Should be simple, right?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Wheelchair Men\") %>%\n  ggplot(aes(Year, Time)) +\n  geom_point() +\n  geom_hline(yintercept = time_2023)\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nHmm. ggplot is not playing well with our difftimes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(time_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 'difftime' num 1.54583333333333\n - attr(*, \"units\")= chr \"hours\"\n```\n:::\n\n```{.r .cell-code}\nstr(winners$Time[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 'hms' num 02:11:48\n - attr(*, \"units\")= chr \"secs\"\n```\n:::\n:::\n\n\nApparently, our race time from winners is actually hms and not difftime. Skim reported it was a difftime. Our difftime has units of hours, while Time has units of seconds. This is probably due to be setting units to \"auto\" when I did the conversion. Interesting that dplyr filtering handles this smoothly, but ggplot doesn't.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_2023 <- as.difftime(\"01:32:45\", format = \"%H:%M:%S\", units = \"sec\")\nstr(time_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 'difftime' num 5565\n - attr(*, \"units\")= chr \"secs\"\n```\n:::\n:::\n\n\nI'm going to create a TRUE/FALSE column for if David Weir won that I will color code the win by.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Wheelchair Men\") %>%\n  mutate(Weir = ifelse(Athlete == \"David Weir\", TRUE, FALSE)) %>%\n  ggplot(aes(Year, Time, color = Weir)) +\n  geom_point() +\n  geom_hline(yintercept = time_2023)\n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nOkay, now lets clean up the formatting. I need to:\n\n1.  Apply a theme. I like `theme_classic()` or `theme_pander()` as a clean base for my graphs.\n\n2.  Remove the legend. This needs to go after the theme_classic/pander() call or the legend will reappear.\n\n3.  Add title, subtitle and data source\n\n4.  Fix the y-axis units\n\n5.  Change the colors for the David Weir points.\n\n6.  Label my horizontal line.\n\n#4 is apparently quite challenging. Apparently, the time axis should be displayed as hms, so it isn't clear to me why fractional seconds are shown. I tried a bunch of different suggestion from the web, but [the top answer to this question is what worked](https://stackoverflow.com/questions/50172591/use-scale-y-time-to-convert-ms-to-minutes-and-seconds-in-boxplot-ggplot).\n\nIt actually doesn't matter if the aesthetic is difftime or hms. The key is that the label section of scale_y\\_time needs a formatted string generated from strftime.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwinners %>%\n  filter(Category == \"Wheelchair Men\") %>%\n  mutate(Weir = ifelse(Athlete == \"David Weir\", TRUE, FALSE)) %>%\n\n  ggplot(aes(Year, Time, color = Weir)) +\n  geom_point() +\n  scale_color_manual(values = c(\"black\", \"cyan2\")) +\n  geom_hline(yintercept = (time_2023),\n             color = \"cyan4\") +\n  annotate(\n    \"text\",\n    x = 1990,\n    y = time_2023 - 200,\n    label = \"David Weir's 2023 time\",\n    color = \"cyan4\"\n  ) +\n  scale_y_time(name = \"Winning Time\", labels = function(l) strftime(l, '%H:%M:%S')) +\n  labs(title = \"Race times for the London Marathon: Men's Wheelchair Race\",\n       subtitle = \"compared to David Weir's wins\",\n       caption = \"data from https://github.com/nrennie/LondonMarathon\") +\n  theme_classic(12) +\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](marathon_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "marathon_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}