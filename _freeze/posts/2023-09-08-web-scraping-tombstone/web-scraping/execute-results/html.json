{
  "hash": "3760069f72bee65eb7e00dad9d987693",
  "result": {
    "markdown": "---\ntitle: \"An Introduction to Web Scraping Using rvest\"\ndescription: \"Web scraping data with rvest to enhance the information in the Tombstone Project.\" \ntwitter-card:\n  image: \"thumbnail.jpg\"\nauthor:\n  - name: Louise E. Sinks\n    url: https://lsinks.github.io/\ndate: 09-08-2023\ncategories: [R, R-code, Data-Viz, tombstone, regex, web scraping, rvest, data cleaning, TidyTuesday] # self-defined categories\ncitation:\n  url: https://lsinks.github.io/posts/2023-09-08-web-scraping-tombstones/web-scraping\nimage: \"thumbnail.jpg\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n## **Tombstone Project Overview**\n\nI'm working on a project for my father that will culminate in a website for his genealogy research. [There are a couple of different parts](https://lsinks.github.io/currentprojects.html) that I'm working on independently. In a [previous part of the project](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html), I matched an Excel sheet with GPS coordinates and some biographic data with photos of various tombstones. I then used that data to make a [leaflet map of various family grave sites](https://lsinks.github.io/posts/2023-08-14-mapping-tombstone/tombstone_mapping_leaflet.html).\n\nI wanted to add more information beyond the information on the tombstone. My father suggested that I add information from applications he submitted for membership into the SAR. SAR, Sons of the American Revolution, is a society of men who can trace their lineage back to someone who served in the American Revolutionary War. Some of the application material is available on their website. He indicated that adding the links to his spreadsheet would be a lot of typing. I saw this material was openly available on the SAR website, so this would be an ideal task to solve with web scraping. (It turns out that there aren't that many links after all, but it was helpful as a learning exercise.\n\nThis blog post deals with scraping the data from the website, wrangling it into a format where it could be matched against my father's spreadsheet, and then looking for matches. (Every part of this series has ended up being more data wrangling and cleaning than I could have envisioned with just a touch of whatever neat thing I actually wanted to do.) I'll also talk a bit about including some code from Google Bard.\n\nThe thumbnail for this post is the gravestone of Ebenezer Frost, one of the potential matches. You can see why birth and death dates are difficult to extract from the stone.\n\n## Loading Libraries and Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # who doesn't want to be tidy?\nlibrary(here) # relative file paths\nlibrary(rvest) # web scraping package\nlibrary(gt) # for nicer tables\n```\n:::\n\n\nThis is my father's spreadsheet after some clean-up. I go into the process in detail [here](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_file <-\n  readRDS(\n    here(\n      \"posts\",\n      \"2023-08-04-data-cleaning-tombstone\",\n      \"tombstones_matched_final.RDS\"\n    )\n  )\n```\n:::\n\n\n## Conceptual Overview of Web Scraping\n\nWeb scraping is extracting data from a website. If you vaguely know what web scraping is, you probably envision high-volume automated processes that extract large quantities of data. This type of web scraping has some ethical and legal concerns, which I'll discuss in a later section. However, many of the tools and processes you need to understand to web scrape effectively can be practiced in a low-volume, non-automated way. This is the skill set I'm going to focus on in this tutorial.\n\n1.  Acquire the webpage\n2.  Identify the HTML elements you wish to extract\n3.  Clean and wrangle the data into a format you can work with\n4.  Automate by looping through web pages to acquire additional information\n\n### Ethics and Legality of Web Scraping\n\nDo your research before you start a web scraping project, particularly if you intend to collect a high volume of data. If there is an alternate way to get the data, such as through an API, you should probably use that method over web scraping. Small-volume, publically accessible data scraped for non-commercial use is likely fine, both legally and ethically.\n\nR for Data Science (2e) by Hadley Wickham, Mine Ã‡etinkaya-Rundel, and Garrett Grolemund has a really nice overview of [potential issues to consider before starting a web scraping project](https://r4ds.hadley.nz/webscraping). Luke Barousse has a great [YouTube video about a web scraping project he did that scraped data from LinkedIn](https://www.youtube.com/watch?v=1kU_ASADlPY) that ended with his account access being restricted.\n\nThe data involved in this project involves information about people long dead, except for information I've shared about myself or my father, which I have permission to share. This is a very small project involving collecting data from a single webpage and is for non-commercial use.\n\n### Anatomy of a Webpage: Why do I need to know about CSS Selectors?\n\nModern webpages consist of HTML tags, which define the structure; CSS files, which define the style; and JavaScript files, which create interactivity. HTML tags are usually a pair of tags that enclose content and attributes. The html element is the tag, content, and attributes. The opening tag looks like `<tag>` while the closing tag looks like `</tag>`. In between the tags, you can have content, attributes, and other tags. HTML is hierarchical, and the relationship between tags is described using the language of families. The tag within a tag would be a child. The higher level tag would be a parent. Sibling tags are children of the same parent tag. All of this is important because to select the information you want, you will often need to describe the hierarchy to get to the correct content.\n\nThe formatting and styling of a webpage are generated with cascading styling sheets (CSS). These files describe how specific elements of the HTML should look. For example, you might want to make the h1 header quite large. You would do that in the CSS file with code like this:\n\n`h1 {   font-size 72px; }`\n\nThe CSS file selects the HTML elements using something called CSS selectors. The format of CSS selectors allows you to create complicated selectors- for example, to select the first entry of a list or all children of a table. Many web scraping tools use CSS selectors to extract the desired elements from the webpage. I initially found this confusing since I was trying to extract HTML tags, and it wasn't made clear that this was using CSS selectors. It made googling for more information difficult as well since I wasn't using the correct terminology. So, even though you may not be doing any web design, you should be familiar with CSS selectors if you intend to web scrape.\n\nThere is a cheat sheet [here](https://www.freecodecamp.org/news/css-selectors-cheat-sheet/) that shows some of the more advanced selectors and a great resource showing all different types of CSS selectors [here](https://www.w3schools.com/css/css_selectors.asp).\n\n## Web Scraping with rvest\n\nI decided to use the [rvest package](https://CRAN.R-project.org/package=rvest) for web scraping. I was introduced to it through [TidyTuesday](https://github.com/rfordatascience/tidytuesday), specifically the [London Marathon dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-04-25/readme.md), which was drawn from the [London Marathon package](https://github.com/nrennie/LondonMarathon). The author of the package, Nicola Rennie, has a tutorial on how she used [web scraping to create the package](https://nrennie.rbind.io/blog/web-scraping-rvest-london-marathon/).\n\nrvest is a tidyverse package and is installed with the installation of tidyverse. However, it is not [a core tidyverse package](https://www.tidyverse.org/packages/) and does need to be loaded separately with a call to `library()`.\n\nFor politeness's sake, I am working on a downloaded copy of the webpage. The function `read_html()` can also take a URL to read directly from a website. You don't want to repeatedly be pulling the same data from a website as you are getting your code to work. So you can either work with a downloaded copy or use read_html once and then perform all your manipulations on a copy so you don't have to pull the data again if you mess up your cleaning/wrangling.\n\nThere is a simple example on the [webscraping using rvest](https://rvest.tidyverse.org/articles/rvest.html). This vignette illustrates basic HMTL and CSS selectors to extract them. The rvest webpage recommends using the [SelectorGadget](https://rvest.tidyverse.org/articles/selectorgadget.html) to identify the elements you want to extract. There are also instructions at the [SelectorGadget homepage](https://selectorgadget.com/). I didn't use SelectorGadget when writing my code, but I did go back and try it when I was writing the tutorial, and I didn't have much luck. I think you still need to know a decent amount about HTML in order to be able to get useful answers from it. In my case, I don't think there is a selector to extract only the information I wanted. I think you have to select lots of information and do additional extracting in the code.\n\n### Reading in the Web Page\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsar <-\n  read_html(\"Display Member - 121743 - John Douglas Sinks Ph.D..html\")\n```\n:::\n\n\nWhat I have now in sar is an XML document object. This seems like a simple list, but it is actually a very complicated object consisting of multiple nested lists.\n\n### Deciding which HTML elements to Extract\n\nThe next part is the part that I haven't found a great tutorial on that I can refer you to. Nor do I have a great idea of how to teach this- other than trial and error. This has been the main block to publishing this section of the project. So, I will walk through what I did as an example.\n\nOkay, so how did I actually find the proper CSS selector to extract the HTML elements I wanted, given that GadgetSelector didn't work well?\n\nI viewed the source code for the webpage (usually by right-clicking in the browser and clicking view source) and just looked for the elements I wanted.\n\nMost tutorials on CSS selectors illustrate them with very simple HTML pages; the rvest vignette is a perfect case in point. However, when you actually go to scrape a page, there is a huge jump in (apparent) complexity.\n\n### A Real Webpage- Rendered and Source\n\nThis is what the webpage I want to scrape from looks like. It doesn't look particularly complicated. There are 74 rows in the table.\n\n\n{{< video webpage.mp4 >}}\n\n\n\nThen you view the source code:\n\n\n{{< video source.mp4 >}}\n\n\n\nThere are 2260 lines of code involved in making that webpage!\n\nSo, I searched (Ctrl-f in Chrome) in the source code page for the first name in the table, PHELPS. It shows up at line 451. This is the entire line:\n\n> \\<td\\>\\<a href=\"<https://sarpatriots.sar.org/patriot/display/335209>\"\\>\\<span style=\"display:inline;color: #003366\"\\> \\<span style=\"color:#003366\" class=\"glyphicon glyphicon-user\"\\>\\</span\\> John PHELPS \\<small\\> (P-335209)\\</small\\>\\</span\\>\\</a\\> \\</td\\>\n\nI see that it is wrapped in td tags. This means this item is being coded as a table cell element. That's good news- if all the data is actually encoded as a table, then it is much easier to extract. I can look up how a table should be formatted in HTML. I found a great resource at the W3Schools: here is [their page on tables](https://www.w3schools.com/tags/tag_td.asp).\n\nA table should be tagged as a table with `<table>` and the closing tag `</table>.`\n\nEach row should be tagged with `<tr>` and each cell with `<td>`\n\n> \\<table\\>\\\n> Â Â \\<tr\\>\\\n> Â Â Â Â \\<td\\>Cell A\\</td\\>\\\n> Â Â Â Â \\<td\\>Cell B\\</td\\>\\\n> Â Â \\</tr\\>\\\n> \\</table\\>\n\nKnowing this, I can now search the source code for `table`. Why do I need to do this? If there are multiple tables on the page, I want to make sure I extract the correct one. Luckily for me, there is only one table.\n\nIf you only cared about the text in a table, you could easily extract it with `html_table()`. I want the text and the links, so I need to identify selectors to get to the hyperlinks.\n\nI also know that there are a lot of hyperlinks on this page, so my selector might involve children of the table, or it might involve something related to the cell itself (td). I can't just choose every hyperlink, or I'd have a pile of trash to sort through.\n\nThis is how you'd pull out all the hyperlinks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_hyperlinks <- sar %>%\n  html_nodes(css = \"a\")\n\nhead(all_hyperlinks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (6)}\n[1] <a class=\"navbar-brand\" style=\"padding:10px 15px\" href=\"https://sarpatrio ...\n[2] <a href=\"https://sarpatriots.sar.org/patriot/search/\" data-toggle=\"toolti ...\n[3] <a href=\"https://sarpatriots.sar.org/member/search/\" data-toggle=\"tooltip ...\n[4] <a href=\"https://sarpatriots.sar.org/application/SearchDescendants/\" data ...\n[5] <a href=\"https://sarpatriots.sar.org/Biographies/search/\" data-toggle=\"to ...\n[6] <a href=\"https://sarpatriots.sar.org/cemetery/search/\" data-toggle=\"toolt ...\n```\n:::\n:::\n\n\nThe first few are related to the navigation information at the top of the page. So, I do want a more sophisticated selector.\n\nI need to understand how the table and rows are structured so I can construct the best selector. A row contains 5 cells. The first row is a header row.\n\n![](table_structure.png)\n\nThe `<th>` tag is a child element of `<tr>` and represents table header elements. It should be used instead of `<td>` for the header elements. Again, looking at the source code and searching for that tag, I can verify that is true. The header row could just be coded as regular table cells, in which case I would need to discard that information during the data cleaning. Again, I'm lucky, and the header is properly encoded with \\`th' tags.\n\nMy goal is to extract the patriot name and the link associated with it. There are actually 3 columns with links:\n\n1.  **Patriot Name**, which goes to another page with biographical information\n\n2.  **View Application Detail**, which goes to a page with an abbreviated genealogy.\n\n3.  **Click to Purchase**, which goes to a page allowing you to order the full application if you are a member\n\nFor my purpose, the link under Patriot Name has the most interesting information and is the one I want. But I'm going to end up with all the links, so I could use any of them.\n\nSince I know I want a hyperlink, I need to understand how that type of element is encoded. Again, the [W3Schools has a great explanation for hyperlinks](https://www.w3schools.com/tags/tag_a.asp).\n\nA hyperlink uses the `a' tag. The`a' tag has two parts: the hyperlink, which is the attribute (comes after `href =` ), and the text. The plain text part follows the URL and may also include styling. If we go back to the cell I initially extracted for PHELPS, the `href = URL` is clear. Then there are some codes for styling, and then the text John PHELPS, more styling, and then a number. The name and the number (P-335209) are both in the text of this element.\n\n> \\<td\\>\\<a href=\"<https://sarpatriots.sar.org/patriot/display/335209>\"\\>\\<span style=\"display:inline;color: #003366\"\\> \\<span style=\"color:#003366\" class=\"glyphicon glyphicon-user\"\\>\\</span\\> John PHELPS \\<small\\> (P-335209)\\</small\\>\\</span\\>\\</a\\> \\</td\\>\n\nNote that when I played with the SelectorGadget, I could never get it to give me the selector for the hyperlinks. I could get the cell element `<td>`, or I could get `<span>`, which you can see is a child of the hyperlink. Even if you could get the hyperlink, I don't know that it is possible to get just the column of hyperlinks that you wanted. I certainly couldn't make it give me just the `<span>` of the column I wanted. If you think SelectorGadget will get you to exactly and only the content you want, then you might be frustrated.\n\n### Extracting the Links with html_nodes\n\nTo get the links that I wanted, I found an [example on Stack Overflow](https://stackoverflow.com/questions/63093926/retrieve-link-from-html-table-with-rvest). (As a side note, I just learned that you could [annotate code in Quarto](https://quarto.org/docs/authoring/code-annotation.html). If you like the annotations better than free-form explanations of the code, please let me know in a comment.)\n\nI've been talking about CSS selectors, but you can also extract elements using a notation called XPATH. That is what the Stack Overflow solution uses. I believe you can build much more complicated selectors using XPATH, but for something basic, it is probably overkill. Here is an [overview/cheat sheet](https://www.scraperapi.com/blog/xpath-cheat-sheet/). Datacamp also has a [course on web scraping in R](https://app.datacamp.com/learn/courses/web-scraping-in-r) where they go through selecting with CSS selectors and XPath, but I honestly found it very confusing. I took the course twice (and did the coding for this project in between) and still couldn't solve many of the problems.\n\nAnyway, here we go:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlink_nodes <- sar %>% html_nodes(xpath = \"//table//a\")  # <1>\n#link_nodes <- sar %>% html_nodes(\"table a\")  # <2>\n\nlink_text  <- link_nodes %>% html_text()  # <3>\ntext_df = as.data.frame(link_text)        # <4>\n\nindex <- 1\nfor (index in seq(1:nrow(text_df))) {\n  text_df$url[index] <- link_nodes[index] %>%  html_attr(\"href\")\n} # <5>\n```\n:::\n\n\n1.  Select the elements we want out of the HTML using `rvest::html_nodes()`. The XPath code specifies that I want \\`a' tags that are children of the table. Store it in link_nodes.\n2.  An alternate method is to use the more standard CSS selectors, but again, we want the `<a>` elements that are children of the table. It is commented out here, but it produces identical results as 1.\n3.  The link_node contains both the URL and the text. Here, I extract the text. There are [two methods in the rvest package](https://rvest.tidyverse.org/reference/html_text.html): `html_text()` is faster but might include formatting information relating to whitespace. `html_text2()` is slower but produces cleaner output.\n4.  Now, I store the text in a dataframe.\n5.  Now, I loop through the text dataframe and add on the matching URL that we extract from link_nodes using `html_attr(\"href\")`. I had mentioned that the elements could contain attributes- attributes are additional features of the element and are expressed in the code as `attribute = value`. In this case, the format is something like `href= \"https://sarpatriots.sar.org/patriot/display/335209\"`\n\nSo now I have a dataframe with the text and the URL stored separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(text_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                    link_text\n1                                   John  PHELPS   (P-335209)\n2                                                            \n3 Click to Purchase\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n4                                  Moses   ALLEN   (P-102709)\n5                                                            \n6 Click to Purchase\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n                                                      url\n1      https://sarpatriots.sar.org/patriot/display/335209\n2  https://sarpatriots.sar.org/application/display/246742\n3 https://sarpatriots.sar.org/application/purchase/246742\n4      https://sarpatriots.sar.org/patriot/display/102709\n5  https://sarpatriots.sar.org/application/display/246757\n6 https://sarpatriots.sar.org/application/purchase/246757\n```\n:::\n:::\n\n\nThere is a bunch of whitespace (`\\n`, `\\t`) information in some of the entries (new line and tab markers). This perhaps would have been handled with `html_text2`. We've also lost some of the structure that the table had. Each hyperlink is extracted into its own row in the `text_df`, but 3 of these text_df rows correspond to one row in our webpage table. As I mentioned, I want the link associated with the Patriot name, so I can just take every third row of this text_df table and discard the rest. If I wanted a different link associated with the name, I could do that too.\n\nNow, I'm creating an index to subset my rows. (This doesn't need to be a separate variable. I'm just doing that for clarity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_index <- seq(1, nrow(text_df), 3)\n\nhead(subset_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10 13 16\n```\n:::\n:::\n\n\nThen, I am subsetting the dataframe using subset_index for the rows and taking all columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data <- text_df[subset_index,]\n\nhead(raw_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                        link_text\n1                       John  PHELPS   (P-335209)\n4                      Moses   ALLEN   (P-102709)\n7         William  HARRELL/HORRALL Jr  (P-185027)\n10      Aaron   VAN CLEVE/VAN CLEAVE   (P-310164)\n13     William   VAN CLEVE/VANCLEAVE   (P-309334)\n16           Richard   VEATCH/VEETCH   (P-310578)\n                                                  url\n1  https://sarpatriots.sar.org/patriot/display/335209\n4  https://sarpatriots.sar.org/patriot/display/102709\n7  https://sarpatriots.sar.org/patriot/display/185027\n10 https://sarpatriots.sar.org/patriot/display/310164\n13 https://sarpatriots.sar.org/patriot/display/309334\n16 https://sarpatriots.sar.org/patriot/display/310578\n```\n:::\n:::\n\n\n### Extracting the Links with html_elements\n\nThe [html_nodes() function used above has been superseded](https://rvest.tidyverse.org/reference/rename.html) by [html_elements()](https://rvest.tidyverse.org/reference/html_element.html). They should function exactly the same since the notes say that the function is merely renamed. It is generally best to use the most current version of the functions, so here is the above code updated. I've also switched to the CSS Selector instead of the XPATH, just to illustrate it produces the same results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlink_nodes2 <- sar %>%\n  html_elements(\"table a\")\n\nlink_text2  <- link_nodes2 %>%\n  html_text2()\n\ntext_df2 = as.data.frame(link_text2)\n\nindex <- 1\nfor (index in seq(1:nrow(text_df2))) {\n  text_df2$url[index] <- link_nodes2[index] %>%\n    html_attr(\"href\")\n}\n\nraw_data2 <- text_df2[subset_index, ]\n\nhead(raw_data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               link_text2\n1                  John PHELPS (P-335209)\n4                  Moses ALLEN (P-102709)\n7   William HARRELL/HORRALL Jr (P-185027)\n10  Aaron VAN CLEVE/VAN CLEAVE (P-310164)\n13 William VAN CLEVE/VANCLEAVE (P-309334)\n16       Richard VEATCH/VEETCH (P-310578)\n                                                  url\n1  https://sarpatriots.sar.org/patriot/display/335209\n4  https://sarpatriots.sar.org/patriot/display/102709\n7  https://sarpatriots.sar.org/patriot/display/185027\n10 https://sarpatriots.sar.org/patriot/display/310164\n13 https://sarpatriots.sar.org/patriot/display/309334\n16 https://sarpatriots.sar.org/patriot/display/310578\n```\n:::\n:::\n\n\nYou can see it produces the same results. I did use `html_text2()`, which did handle the whitespace issues.\n\n### More than One Selector Works\n\nMany times, there are several different selectors that work. The URLs I want are also children of the table cell elements (`<td>`), so you could use that instead of children of the table. If you were scraping over multiple pages, you might want to check and see if one selector was more universal than others. Here, I think \"table a\" is the better choice because it gives an idea of what is going on even if you don't know HTML or CSS selectors. \"td\" just isn't as obvious.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlink_nodes3 <- sar %>%\n  html_elements(\"td a\")  \n\nlink_text3 <- link_nodes3 %>%\n  html_text2()  \n\ntext_df3 = as.data.frame(link_text3) \n\nindex <- 1\nfor (index in seq(1:nrow(text_df3))) {\n  text_df2$url[index] <- link_nodes3[index] %>%\n    html_attr(\"href\")\n}\n\nraw_data3 <- text_df2[subset_index,]\n\nhead(raw_data3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               link_text2\n1                  John PHELPS (P-335209)\n4                  Moses ALLEN (P-102709)\n7   William HARRELL/HORRALL Jr (P-185027)\n10  Aaron VAN CLEVE/VAN CLEAVE (P-310164)\n13 William VAN CLEVE/VANCLEAVE (P-309334)\n16       Richard VEATCH/VEETCH (P-310578)\n                                                  url\n1  https://sarpatriots.sar.org/patriot/display/335209\n4  https://sarpatriots.sar.org/patriot/display/102709\n7  https://sarpatriots.sar.org/patriot/display/185027\n10 https://sarpatriots.sar.org/patriot/display/310164\n13 https://sarpatriots.sar.org/patriot/display/309334\n16 https://sarpatriots.sar.org/patriot/display/310578\n```\n:::\n:::\n\n\n### Web Scraping Larger Volumes of Data\n\nThis is everything I need, but if I were working on a problem where I needed to scrape multiple pages, this is what I'd do. The actual URL of the webpage is https://sarpatriots.sar.org/member/display/121743. It saved the webpage with information about my father's name, but that isn't actually in the URL. So, I'd try a few URLs with different 6-digit numbers and see if they produced web pages with the same data. They do, with the exception that some pages say, \"No known ancestors within this Online Database.\"\n\nI'd try to figure out what the range of valid numbers is. For example, 021743 isn't valid and produces a page that says, \"This is an invalid Member Number. Please check your records and try again.\"\n\nThen, I'd loop through all the valid member numbers and get the data. I'd have error handling for pages without a table. And I'd use a package like [polite](https://CRAN.R-project.org/package=polite) to make sure that the automated requests were being made using best practices.\n\n## Dataframes aren't Tibbles!\n\nTibbles and data frames are usually entirely interchangeable, but sometimes you do run into the differences. The tidyverse doesn't approve of row names or numbers, so they aren't used. Dataframes do have row numbers, and you can see that R kept the indexing of the raw_data, so the row numbers are by 3s. However, indexing is, as usual, by position. So rev_war\\$name_unclean\\[3\\] returns the name associated with the row number 7. This is annoying and makes it difficult to pull out test cases. So, this should be fixed. This issue will pop up when you use data frames but not when you use tibbles.\n\nSo, two ways to fix this:\n\n1.  Convert to a tibble using [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war_tibble <- as_tibble(raw_data)\n\nhead(rev_war_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 2\n  link_text                                        url                          \n  <chr>                                            <chr>                        \n1 \"    John  PHELPS   (P-335209)\"                  https://sarpatriots.sar.org/â€¦\n2 \"    Moses   ALLEN   (P-102709)\"                 https://sarpatriots.sar.org/â€¦\n3 \"    William  HARRELL/HORRALL Jr  (P-185027)\"    https://sarpatriots.sar.org/â€¦\n4 \"    Aaron   VAN CLEVE/VAN CLEAVE   (P-310164)\"  https://sarpatriots.sar.org/â€¦\n5 \"    William   VAN CLEVE/VANCLEAVE   (P-309334)\" https://sarpatriots.sar.org/â€¦\n6 \"    Richard   VEATCH/VEETCH   (P-310578)\"       https://sarpatriots.sar.org/â€¦\n```\n:::\n:::\n\n\n2.  Reassign the indexing of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(raw_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                        link_text\n1                       John  PHELPS   (P-335209)\n4                      Moses   ALLEN   (P-102709)\n7         William  HARRELL/HORRALL Jr  (P-185027)\n10      Aaron   VAN CLEVE/VAN CLEAVE   (P-310164)\n13     William   VAN CLEVE/VANCLEAVE   (P-309334)\n16           Richard   VEATCH/VEETCH   (P-310578)\n                                                  url\n1  https://sarpatriots.sar.org/patriot/display/335209\n4  https://sarpatriots.sar.org/patriot/display/102709\n7  https://sarpatriots.sar.org/patriot/display/185027\n10 https://sarpatriots.sar.org/patriot/display/310164\n13 https://sarpatriots.sar.org/patriot/display/309334\n16 https://sarpatriots.sar.org/patriot/display/310578\n```\n:::\n\n```{.r .cell-code}\nrownames(raw_data) = seq(length = nrow(raw_data))\n\nhead(raw_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                       link_text\n1                      John  PHELPS   (P-335209)\n2                     Moses   ALLEN   (P-102709)\n3        William  HARRELL/HORRALL Jr  (P-185027)\n4      Aaron   VAN CLEVE/VAN CLEAVE   (P-310164)\n5     William   VAN CLEVE/VANCLEAVE   (P-309334)\n6           Richard   VEATCH/VEETCH   (P-310578)\n                                                 url\n1 https://sarpatriots.sar.org/patriot/display/335209\n2 https://sarpatriots.sar.org/patriot/display/102709\n3 https://sarpatriots.sar.org/patriot/display/185027\n4 https://sarpatriots.sar.org/patriot/display/310164\n5 https://sarpatriots.sar.org/patriot/display/309334\n6 https://sarpatriots.sar.org/patriot/display/310578\n```\n:::\n:::\n\n\nI'm going to continue with the reindexed data frame.\n\n## Cleaning and Reformating the Data\n\nNow, to wrangle the text data into a usable form. I did more extensive data cleaning in the first part of the project, which you can find [here](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html).\n\nThe link_text contains the name and an ID number, like John PHELPS (P-335209). This can be split into two components using `(` as a separator. Remember that special characters like `(` need to be escaped. So the actual separator is `\" \\\\(\"`. I took the space also. Then I removed the other parenthesis with `str_replace()`. I used [transmute](https://dplyr.tidyverse.org/reference/transmute.html) to do the final mutation and select the columns I wanted moving forward.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first, clean up the names\nrev_war <- raw_data %>%\n  separate(link_text, sep = \" \\\\(\", into = c(\"name_unclean\", \"id_unclean\") ) \n\n# Clean up the ID number\nrev_war <- rev_war %>%\n  transmute(name_unclean, url, SAR_ID = str_replace(id_unclean, \"\\\\)\", \"\"))\n```\n:::\n\n\nThe names are a mess. Women have \"Mrs\" prepended. The last names are in all caps and sometimes have multiple variations separated by a /. There are also Jr and Sr at the end of some. There are different numbers of leading and trailing spaces on the names.\n\nThe whitespace, Jr/Sr, and Mrs issues are easy to deal with using tools from the stringr package. The \"Mrs\" is not useful at all, so I'm just going to replace it with\" \"via `str_replace()`. I'm going to remove the whitespace using `str_trim()`. I generally like to keep the original data so I can check the transformations, so these operations are in a new column name. I also made a suffix column for Jr/Sr and removed that info from the name column. I'm not changing the names to title case now because I'm going to use the fact that the last names are in upper case as part of my pattern matching later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#remove Mrs\nrev_war <- rev_war %>%\n  mutate(name =\n    str_replace(name_unclean, \"Mrs\", \"\")\n  ) %>%\n\n# There appear to be leading and tailing strings on the name\n  mutate(name =\n           str_trim(name, side = c(\"both\"))\n  ) %>%\n\n# Deal with Jr/Sr first\n  mutate(suffix =\n           case_when(\n             str_detect(name, \"Jr\") == TRUE ~ \"Jr\",\n             str_detect(name, \"Sr\") == TRUE ~ \"Sr\",\n             TRUE ~\"\"\n           )\n  ) %>%\n\n# Now remove the Jr and Sr from the name\n  mutate(name =\n           str_replace(name, \"Jr\", \"\")\n  ) %>%\n  mutate(name =\n           str_replace(name, \"Sr\", \"\")\n  ) %>%\n\n#double check the white space issue\n  mutate(name =\n           str_trim(name, side = c(\"both\"))\n  )\n```\n:::\n\n\nThat is all pretty straightforward.\n\nNow, how do we break this up?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war$name[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"William  HARRELL/HORRALL\"\n```\n:::\n:::\n\n\nThe obvious choice would be to use the space(s) between the name to separate the string into two parts. This fails because of names like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war$name[27]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Friderick William NAGEL/NAGLE\"\n```\n:::\n:::\n\n\nI admit I used trial and error to figure this out. First note- using `str_split()` from [stringr](https://stringr.tidyverse.org/) is not the way to go. I got hyper-focused on stringr functions since I was using the package so heavily. It creates a matrix of results in your data frame and not new columns of data. Use something from the [`separate()` family](https://tidyr.tidyverse.org/reference/separate_wider_delim.html) from tidyr instead.\n\nI decided to do this stepwise. So the `remove = FALSE` flag needs to be set in [`separate()`](https://tidyr.tidyverse.org/reference/separate.html), so I keep the original data. First, I got the first names by splitting on the pattern of space and then two or more capital letters. The two or more is necessary because of names like Friderick William. This gives the complete first name(s) and an incomplete last name because the separator is discarded. So you end up with AGEL/NAGLE, which I dumped in a column named trash. Here, I immediately deleted it, but it was handy for troubleshooting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bard gave me a hint to get the regex!\nrev_war <- rev_war %>%\n  separate(\n    name,\n    into = c(\"first_name\", \"trash\"),\n    remove = FALSE,\n    sep = \"\\\\s+[A-Z]{2,}\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Additional pieces discarded in 3 rows [4, 5, 25].\n```\n:::\n\n```{.r .cell-code}\nhead(rev_war)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         name_unclean\n1                      John  PHELPS  \n2                     Moses   ALLEN  \n3        William  HARRELL/HORRALL Jr \n4      Aaron   VAN CLEVE/VAN CLEAVE  \n5     William   VAN CLEVE/VANCLEAVE  \n6           Richard   VEATCH/VEETCH  \n                                                 url   SAR_ID\n1 https://sarpatriots.sar.org/patriot/display/335209 P-335209\n2 https://sarpatriots.sar.org/patriot/display/102709 P-102709\n3 https://sarpatriots.sar.org/patriot/display/185027 P-185027\n4 https://sarpatriots.sar.org/patriot/display/310164 P-310164\n5 https://sarpatriots.sar.org/patriot/display/309334 P-309334\n6 https://sarpatriots.sar.org/patriot/display/310578 P-310578\n                           name first_name    trash suffix\n1                  John  PHELPS       John                \n2                 Moses   ALLEN      Moses                \n3      William  HARRELL/HORRALL    William /HORRALL     Jr\n4  Aaron   VAN CLEVE/VAN CLEAVE      Aaron                \n5 William   VAN CLEVE/VANCLEAVE    William                \n6       Richard   VEATCH/VEETCH    Richard  /VEETCH       \n```\n:::\n\n```{.r .cell-code}\n# Delete the trash columns\nrev_war <- rev_war %>%\n  select(-trash)\n```\n:::\n\n\nGetting the last name was trickier because any separator I could think of would also catch the multiple first-name people. Back to stringr to use [`str_extract()`](https://stringr.tidyverse.org/reference/str_extract.html). Basically, any chunk of text with two or more capital letters in a row followed by any number of any other type of character is extracted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war <- rev_war %>%\n  mutate(Last_name = str_extract(name, \"[A-Z]{2,}.+\"))\n\nhead(rev_war)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         name_unclean\n1                      John  PHELPS  \n2                     Moses   ALLEN  \n3        William  HARRELL/HORRALL Jr \n4      Aaron   VAN CLEVE/VAN CLEAVE  \n5     William   VAN CLEVE/VANCLEAVE  \n6           Richard   VEATCH/VEETCH  \n                                                 url   SAR_ID\n1 https://sarpatriots.sar.org/patriot/display/335209 P-335209\n2 https://sarpatriots.sar.org/patriot/display/102709 P-102709\n3 https://sarpatriots.sar.org/patriot/display/185027 P-185027\n4 https://sarpatriots.sar.org/patriot/display/310164 P-310164\n5 https://sarpatriots.sar.org/patriot/display/309334 P-309334\n6 https://sarpatriots.sar.org/patriot/display/310578 P-310578\n                           name first_name suffix            Last_name\n1                  John  PHELPS       John                      PHELPS\n2                 Moses   ALLEN      Moses                       ALLEN\n3      William  HARRELL/HORRALL    William     Jr      HARRELL/HORRALL\n4  Aaron   VAN CLEVE/VAN CLEAVE      Aaron        VAN CLEVE/VAN CLEAVE\n5 William   VAN CLEVE/VANCLEAVE    William         VAN CLEVE/VANCLEAVE\n6       Richard   VEATCH/VEETCH    Richard               VEATCH/VEETCH\n```\n:::\n:::\n\n\nNow to split on /. In this dataset, we can have 1-3 possible last names. The `separate` function requires that you know how many parts you are splitting the string into. If you tell the `separate()` function that you have 3 parts, it will create a warning for any strings that don't have 3 parts. It will execute though, and it will fill in the missing parts with NAs and discard the extra parts. This actually happened when I separated out the first name above, but the discarded parts were all from the last name part, which I was trashing anyway.\n\nSeparate has been superseded by other separate functions, so I'm going to demonstrate the use of the preferred function, `separate_wider_delim()` . `separate_wider_delim()`, unlike `separate()`, will kick up an error if you don't have the right number of parts and fail to execute. However, you can run it in debug mode, and it will perform the splits and then tell you on a row-by-row basis if there were the right number of parts. I exploited this and then threw away the debugging info, removed the NAs, and changed the last names to title case. (Note that the first name column should be handled the same way since there is one name that is listed with two variations: Johannes/John .)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Now we need to split the names with /\nrev_war_test <- rev_war %>%\n  separate_wider_delim(\n    Last_name,\n    names = c(\"V1\",\n              \"V2\",\n              \"V3\"),\n    delim = \"/\",\n    too_few = c(\"debug\"),\n    too_many = c(\"debug\"),\n    cols_remove = FALSE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Debug mode activated: adding variables `Last_name_ok`, `Last_name_pieces`, and\n`Last_name_remainder`.\n```\n:::\n\n```{.r .cell-code}\nrev_war_test <- rev_war_test %>%\n  select(name_unclean, first_name, V1, V2, V3, suffix, url, SAR_ID)\n\nrev_war_test <- rev_war_test %>%\n  mutate(V2 = ifelse(is.na(V2), \"\", V2),\n         V3 = ifelse(is.na(V3), \"\", V3),\n         V1 = str_to_title(V1),\n         V2 = str_to_title(V2),\n         V3 = str_to_title(V3)\n         )\n\nrev_war_test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 Ã— 8\n   name_unclean                 first_name V1    V2    V3    suffix url   SAR_ID\n   <chr>                        <chr>      <chr> <chr> <chr> <chr>  <chr> <chr> \n 1 \"    John  PHELPS  \"         John       Phelâ€¦ \"\"    \"\"    \"\"     httpâ€¦ P-335â€¦\n 2 \"    Moses   ALLEN  \"        Moses      Allen \"\"    \"\"    \"\"     httpâ€¦ P-102â€¦\n 3 \"    William  HARRELL/HORRAâ€¦ William    Harrâ€¦ \"Horâ€¦ \"\"    \"Jr\"   httpâ€¦ P-185â€¦\n 4 \"    Aaron   VAN CLEVE/VAN â€¦ Aaron      Van â€¦ \"Vanâ€¦ \"\"    \"\"     httpâ€¦ P-310â€¦\n 5 \"    William   VAN CLEVE/VAâ€¦ William    Van â€¦ \"Vanâ€¦ \"\"    \"\"     httpâ€¦ P-309â€¦\n 6 \"    Richard   VEATCH/VEETCâ€¦ Richard    Veatâ€¦ \"Veeâ€¦ \"\"    \"\"     httpâ€¦ P-310â€¦\n 7 \"    Daniel   CHAPMAN  \"     Daniel     Chapâ€¦ \"\"    \"\"    \"\"     httpâ€¦ P-131â€¦\n 8 \"    William  HORRALL Sr \"   William    Horrâ€¦ \"\"    \"\"    \"Sr\"   httpâ€¦ P-335â€¦\n 9 \"    William   BALDWIN  \"    William    Baldâ€¦ \"\"    \"\"    \"\"     httpâ€¦ P-107â€¦\n10 \"    John  GOODALL/GOODALE â€¦ John       Goodâ€¦ \"Gooâ€¦ \"\"    \"\"     httpâ€¦ P-167â€¦\n# â„¹ 64 more rows\n```\n:::\n:::\n\n\n## Matching to Excel\n\nSo the ultimate goal is to match the URLs with names from my father's spreadsheet to save him some typing \\[6,000 words later, I might be getting close to saving him a few keystrokes. :) \\]\n\nI'm not going to go into too much detail here since the main point of this tutorial was web scraping and data cleaning.\n\nSo, I have up to three variations on the name based on the last names. My plan was to match on the first variation, then for those that failed to match, match on the second variation, and so on.\n\nI was mildly hopeful that the first variation was the variation that my father used in his Excel table. So, I did a quick check using an inner join. My father had mentioned that there wouldn't be many matches- maybe 5 or 6, because he hadn't found most of the graves yet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war_test <- rev_war_test %>%\n  mutate(match_1 = paste0(V1, \" \", first_name))\n\nmatched_records <- rev_war_test %>% \n  inner_join(data_file, by = c(\"match_1\" = \"full_name\")) %>%\n  select(match_1,\n         Surname,\n         First.Name,\n         Middle.Name,\n         DOB_date,\n         DOD_date)\n\nmatched_records %>% gt()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"yixptztogt\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#yixptztogt table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#yixptztogt thead, #yixptztogt tbody, #yixptztogt tfoot, #yixptztogt tr, #yixptztogt td, #yixptztogt th {\n  border-style: none;\n}\n\n#yixptztogt p {\n  margin: 0;\n  padding: 0;\n}\n\n#yixptztogt .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#yixptztogt .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#yixptztogt .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#yixptztogt .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#yixptztogt .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yixptztogt .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yixptztogt .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#yixptztogt .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#yixptztogt .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#yixptztogt .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#yixptztogt .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#yixptztogt .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#yixptztogt .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#yixptztogt .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#yixptztogt .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#yixptztogt .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#yixptztogt .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#yixptztogt .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#yixptztogt .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yixptztogt .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#yixptztogt .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#yixptztogt .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#yixptztogt .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yixptztogt .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#yixptztogt .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#yixptztogt .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yixptztogt .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yixptztogt .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#yixptztogt .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yixptztogt .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#yixptztogt .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#yixptztogt .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yixptztogt .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yixptztogt .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#yixptztogt .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#yixptztogt .gt_left {\n  text-align: left;\n}\n\n#yixptztogt .gt_center {\n  text-align: center;\n}\n\n#yixptztogt .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#yixptztogt .gt_font_normal {\n  font-weight: normal;\n}\n\n#yixptztogt .gt_font_bold {\n  font-weight: bold;\n}\n\n#yixptztogt .gt_font_italic {\n  font-style: italic;\n}\n\n#yixptztogt .gt_super {\n  font-size: 65%;\n}\n\n#yixptztogt .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#yixptztogt .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#yixptztogt .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#yixptztogt .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#yixptztogt .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#yixptztogt .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#yixptztogt .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"match_1\">match_1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Surname\">Surname</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"First.Name\">First.Name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Middle.Name\">Middle.Name</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"DOB_date\">DOB_date</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"DOD_date\">DOD_date</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Chapman Daniel</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Chapman</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Daniel</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Chapman Daniel</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Chapman</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Daniel</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1863-07-05</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Horrall William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Horrall</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Baldwin William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Baldwin</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Frost Ebenezer</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Frost</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Ebenezer</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Mory Gotthard</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Mory</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Gotthard</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1752-03-20</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1843-05-26</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Horlacher Daniel</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Horlacher</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Daniel</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1735-08-04</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1804-09-24</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Rockel Balzer</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Rockel</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Balzer</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1707-11-10</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1800-06-09</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Finch Isaac</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Finch</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Isaac</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1813-11-26</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Woolard John</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Woolard</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">John</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">Edward</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1872-01-21</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1936-10-19</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Meredith Samuel</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Meredith</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Samuel</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1825-10-10</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Meredith Samuel</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Meredith</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Samuel</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1884-01-05</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Anderson Abraham</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Anderson</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">Abraham</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1776-03-10</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1838-08-15</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Dorris William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Dorris</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">Scott</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Dorris William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Dorris</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">T</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">NA</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Dorris William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Dorris</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">H</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">NA</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1857-08-10</td></tr>\n    <tr><td headers=\"match_1\" class=\"gt_row gt_left\">Dorris William</td>\n<td headers=\"Surname\" class=\"gt_row gt_left\">Dorris</td>\n<td headers=\"First.Name\" class=\"gt_row gt_left\">William</td>\n<td headers=\"Middle.Name\" class=\"gt_row gt_left\">NA</td>\n<td headers=\"DOB_date\" class=\"gt_row gt_right\">1818-11-28</td>\n<td headers=\"DOD_date\" class=\"gt_row gt_right\">1905-02-17</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nWhat we see is that many names are reused in the family, an issue I dealt [with extensively while cleaning up my father's spreadsheet](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html). Some, but not all, of the people in my father's spreadsheet have birthdate (DOB) or death date (DOD) information. This could be used to rule out potential matches (for example, if someone was born after the War or if they were only 3 years old during the Revolutionary War). Since there is so much missing data, using dates to rule people in would not work. So, if I select only people alive during the American Revolutionary War and then match, I am potentially excluding the correct person if their DOB or DOD is NA in the spreadsheet.\n\n## Coding with AI: A Useful Tool to Generate Regex?\n\nLarge Language Models (LLM) like ChatGPT and Google Bard are trendy right now. I've seen a lot of people say that these AI models can be used to increase productivity across a variety of domains. All sorts of tools and services now have AI bonus features. Datacamp has AI in their workspaces and also for some of the course coding exercises. I haven't been too impressed. Generally, syntax errors are caught, corrected, and explained, but deeper problems aren't. I also found that the results often hyperfocus on syntax that is technically correct but not necessarily best or common practice. For example, in a dpylr join, you don't need to specify the columns to join on if they have the same name in both dataframes. However, the AI would insist that not specifying the columns in the code was the problem.\n\nI've also played around with Google Bard for writing and summarizing writing, and the results ranged from generic to ridiculous.\n\nAnyway, as I was staring at the stringr cheatsheet trying to figure out the regex for the pattern space and then a capital letter, I thought that this might be the perfect use case for Bard.\n\nSo:\n\n> hi I need the regular expression for one or more spaces followed by a capital letter\n\n> Sure, here is the regular expression for one or more spaces followed by a capital letter:\n>\n> Code snippet\n>\n> \\\\s+\\[A-Z\\]\n>\n> Use code with caution. Learn more\n>\n> The \\\\s metacharacter matches a single space character, and the + quantifier means that the space character can be matched one or more times. The \\[A-Z\\] character class matches any capital letter.\n>\n> So, this regular expression will match any string that contains one or more spaces followed by a capital letter. For example, it would match the strings \"Â  A\", \" Â  B\", and \"C\".\n>\n> Here is an example of how to use this regular expression in Python:\n>\n> Python\n>\n> import re\n>\n> string = \"Â  A\"\n>\n> match = re.search(r\"\\\\s+\\[A-Z\\]\", string)\n>\n> if match:\n>\n> Â Â Â Â print(match.group())\n>\n> Use code with caution. Learn more\n>\n> This code will print the capital letter that is matched by the regular expression. In this case, the code will print the letter \"A\".\n>\n> I hope this helps! Let me know if you have any other questions.\n\nI \"read\" regex much better than I can write it, so `\"\\s+[A-Z]\"` was enough for me. It isn't right, but it is almost right. The correct regex is `\"\\\\s+[A-Z]\"` .\n\nJust for fun, I asked Bard for the R code. I was using voice to text so my question is a bit garbled. Comma should be , of course.\n\n> can you give me an example of how to use it in r comma for example in the tidyr function separate\n>\n> Sure, here is an example of how to use the regular expression in R, using the separate function from the tidyr package:\n>\n> R\n>\n> library(tidyr)\n>\n> data \\<- data.frame(\n>\n> Â Â text = c(\"Â  A\", \" Â  B\", \"C\"),\n>\n> Â Â stringsAsFactors = FALSE\n>\n> )\n>\n> data %\\>% separate(text, into = c(\"prefix\", \"letter\"), sep = r\"\\\\s+\\[A-Z\\]\")\n>\n> #\\> \\# A tibble: 3 x 2\n>\n> #\\> Â  prefix letter\n>\n> #\\> Â  \\<chr\\> Â  \\<chr\\>\n>\n> #\\> 1 Â  \\<NA\\> Â  Â  A\n>\n> #\\> 2 Â  Â  Â  B Â  Â  B\n>\n> #\\> 3 Â  \\<NA\\> Â  Â  C\n>\n> Use code with caution. Learn more\n>\n> This code will first load the tidyr package. Then, it will create a data frame called data with three rows, each containing a string with one or more spaces followed by a capital letter. The separate function will then be used to split the strings in the text column into two columns: prefix and letter. The sep argument is used to specify the regular expression that will be used to split the strings. In this case, the regular expression is \\\\s+\\[A-Z\\], which matches one or more spaces followed by a capital letter.\n>\n> The output of the code is a data frame with three rows and two columns. The prefix column contains the string that precedes the capital letter, and the letter column contains the capital letter.\n>\n> I hope this helps! Let me know if you have any other questions.\n\nDoes this run? No, of course not! First, this is a terrible example anyway because none of the strings can be split into two parts based on that regex. ('A A A' or 'a B a' or something like that would be a much better choice.) You certainly won't get the output that Bard predicts. Remember, the separator gets discarded. For row one, the separator is \"Â  A\" and there is no part one and no part two. Same with row 2. C should be the prefix, and the letter should be NA. There is no separator in this case. Lots of warnings are going to be generated by this...\n\nI'm not sure where the extra r in `sep = r\" \\s+[A-Z]\"` came from. You can fix that and get it to run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\ntext = c(\"  A\", \"   B\", \"C\"),\nstringsAsFactors = FALSE\n)\n\ndata %>% separate(text, into = c(\"prefix\", \"letter\"), sep = \"\\\\s+[A-Z]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [3].\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  prefix letter\n1              \n2              \n3      C   <NA>\n```\n:::\n:::\n\n\nBut it doesn't give the answer Bard claims.\n\nI was feeling amused, so I argued back and forth with Bard about the need for the escape character. It finally conceded my point and gave me the following code:\n\n`data %>% separate(text, into = c(\"prefix\", \"letter\"), sep = r\"\\\\\\\\\\s+[A-Z]\", fixed = FALSE)`\n\nAgain, this also doesn't run, even with the r removed, because `\\\\\\\\\\s` is not `\\\\s`. Adding extra random slashes does not improve your code!\n\nIn the end, it did save me a bit of time in generating the regex. I think it can be a useful tool, but it is probably more valuable if you have a good idea of what you are doing and can tell if the answer is correct or not. Or if you have the skills to debug what you are given. If you are a learner, I think it can potentially be very time-consuming and frustrating to use.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}