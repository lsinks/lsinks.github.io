{
  "hash": "f72786ad5ab13225a517ee24b3ff38bc",
  "result": {
    "markdown": "---\ntitle: \"Self-Guided Learning through a Wordle Guess Generator: Part 2\"\ndescription: \"Current version of a Wordle Guess Generator\"\ntwitter-card:\n  image: \"thumbnail.png\"\nauthor:\n  - name: Louise E. Sinks\n    url: https://lsinks.github.io/\ndate: 04-01-2023\ncategories: [R, R-code] # self-defined categories\ncitation:\n  url: https://lsinks.github.io/posts/2023-04-01-self-guided-learning-wordle-guesser-part-2\nimage: \"thumbnail.png\"\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat:\n  html:\n    toc: true\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: helper-functions\nConstruct_Freq_Table <- function(word_list) {\n\n#scoring code uses the counting code from\n\n#https://www.r-bloggers.com/2018/12/rrrrs-in-r-letter-frequency-in-r-package-names/  \n# making the frequency table ----\n\nletters <- unlist(strsplit(word_list[,1], split = \"\"))\nchar_frequencies <- as.data.frame(table(letters))\n\n#normalized\ncommon <- max(char_frequencies[,2])\ny=(char_frequencies[,2]/common)\nchar_frequencies$normalized <- y\nreturn(char_frequencies)\n}\n\nScoring_Word <- function(word, freqs = char_frequencies, verbose = FALSE, debug_detail = FALSE){\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n    if (verbose == TRUE)\n    {message(\"I'm in Scoring_words message and scoring: \", word)}\n  \n  value <- 0\n  for (i in 1:length(letter_vec)) {\n    position <- letter_vec[i]== freqs$letters\n    value[i] <- freqs$normalized[position]\n    if (debug_detail == TRUE)\n    {\n      print(\"I am in the scoring loop calculating value: \")\n      print(i)\n      print(sum(value))\n      \n    }\n    \n    if (i == length(letter_vec)) {\n      \n      return(total <- sum(value))\n    }\n    \n  }\n  }\n  \n\nScoring_Word_Unique <- function(word, freqs = char_frequencies, verbose = FALSE, debug_detail = FALSE){\n  # This does only score on unique letters\n  letter_vec <-  unlist(strsplit(word, split = \"\"))\n  unique_letter_vec <- unique(letter_vec)\n  #unique_letter_vec <- letter_vec\n  if (verbose == TRUE)\n  {message(\"I'm in Scoring_words_Unique and scoring: \", word)}\n  \n  value <- 0\n  if (length(unique_letter_vec)== 0) {\n    return(value)\n  } else{\n    for (i in 1:length(unique_letter_vec)) {\n           position <- unique_letter_vec[i] == freqs$letters\n          value[i] <- freqs$normalized[position]\n      if (debug_detail == TRUE)\n      {\n        print(\"I am in the unique scoring loop calculating value: \")\n        print(i)\n        print(sum(value))\n      }\n      \n      if (i==length(unique_letter_vec)) {\n        \n        return(total <- sum(value))\n      }\n      \n    }\n  }\n}\n\nRemoving_Letters <- function (word, chosen_word, verbose = TRUE, debug_detail = TRUE) {\n  lvec <- gsub(paste0(\"[\", chosen_word, \"]\"), \"\", word)  \n  return(lvec)}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading libraries and data ----\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.1     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"assertive\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'assertive'\n\nThe following objects are masked from 'package:purrr':\n\n    is_atomic, is_character, is_double, is_empty, is_formula,\n    is_function, is_integer, is_list, is_logical, is_null, is_vector\n\nThe following object is masked from 'package:tibble':\n\n    has_rownames\n```\n:::\n\n```{.r .cell-code}\n#from https://www-cs-faculty.stanford.edu/~knuth/sgb-words.txt\nword_list <- read.table(\"C:/Users/drsin/OneDrive/Documents/R Projects/Word-Games/input/sgb-words.txt\") \n\n# Functions ----\n#source(\"code/helper-functions.R\")\n\n# calculate letter frequencies from word list\nchar_frequencies <- Construct_Freq_Table(word_list)\n\n# Initialize the word_scores dataframe ----\nnum_words <- nrow(word_list)\n#num_words <- 5\nword_scores <- data.frame(word_name = word_list[1:num_words,1],\n                    word_length = rep(0, times = num_words),\n                    word_guess1 = rep(0, times = num_words),\n                    word_guess2 = rep(0, times = num_words),\n                    word_guess3 = rep(0, times = num_words),\n                    word_guess4 = rep(0, times = num_words),\n                    score = rep(0, times = num_words), \n                    score_guess1 = rep(0, times = num_words),\n                    score_guess2 = rep(0, times = num_words),\n                    score_guess3 = rep(0, times = num_words),\n                    score_guess4 = rep(0, times = num_words)\n                                                )\n#fill in word lengths.  This is so code can be expended to longer words\nword_scores$word_length <-  str_length(word_scores$word_name)\n\n# Calculates the initial scores for all words -----\n\nword_scores <- word_scores %>% \n  mutate(score = map_dbl(word_name, Scoring_Word))\n\nword_scores <- word_scores %>%\n  mutate(score_guess1 = map_dbl(word_name, Scoring_Word_Unique))\n\n\n# Finding the best first word\ntop_words <- word_scores %>%\n arrange(desc(score_guess1))\nword_1 <- top_words$word_name[1]\n\n# Scoring for second guess\nword_scores <- word_scores %>%\n  mutate(word_guess2 = \n           map_chr(word_name, Removing_Letters, chosen_word = word_1))\nword_scores <- word_scores %>%\n  mutate(score_guess2 = map_dbl(word_guess2, Scoring_Word_Unique))\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess2))\n\nword_2 <- top_words$word_name[1]\n\n# Scoring for third guess\nword_scores <- word_scores %>% \n  mutate(word_guess3 =\n           map_chr(word_guess2, Removing_Letters, chosen_word = word_2))\nword_scores <- word_scores %>%\n  mutate(score_guess3 = map_dbl(word_guess3, Scoring_Word_Unique))\n\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess3))\nword_3 <- top_words$word_name[1]\n\n# Scoring for fourth guess\nword_scores <- word_scores %>%\n  mutate(word_guess4 = \n           map_chr(word_guess3, Removing_Letters, chosen_word = word_3))\nword_scores <- word_scores %>%\n  mutate(score_guess4 = map_dbl(word_guess4, Scoring_Word_Unique))\n\n\ntop_words <- word_scores %>%\n  arrange(desc(score_guess4))\n\nword_4 <- top_words$word_name[1]\n\n# subsetting this dataframe and reshaping it.\n# This is used to make a histogram later.\nword_scores2 <- word_scores %>%\n   select(word_name, score_guess1, score_guess2, score_guess3, score_guess4)\nword_scores_reshaped <- \n  pivot_longer(word_scores2, cols = 2:5, \n               names_to = \"score_type\", values_to = \"score\")\n\n### This is now just visualizing what we've done. ------\n\n#plotting the frequency of the letters in our word_set\nggplot(char_frequencies, \n       aes(x = fct_rev(fct_reorder(letters,  normalized)), y = normalized )) +\n  geom_col() +\n  theme_classic() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Frequencies of Letters\", caption = \"from 5 letter words\") +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  xlab(\"Letter\") +\n  ylab(\"Frequency\") +\n    scale_y_continuous(expand = c(0, 0))\n```\n\n::: {.cell-output-display}\n![](current_wordle_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## This looks at the distribution of scores as guessing occurs.  Initially, you have a\n\nword_scores_reshaped$score_type <- as.factor(word_scores_reshaped$score_type)\n\nggplot(word_scores_reshaped, aes(score, fill = score_type)) +\n  geom_density(alpha = 0.5) +\n  theme_classic() +\n  labs(title = \"Evolution of Word Scores as Guessing Progresses\",\n       caption = \"for 5 letter words\") +\n  xlab(\"Score\") +\n  ylab(\"Density\") +\n  labs(fill = \"\") +\n  theme(legend.position = c(0.7, 0.8)) +\n  scale_x_continuous( expand = c(0, 0)) +\n  scale_y_continuous( expand = c(0, 0)) \n```\n\n::: {.cell-output-display}\n![](current_wordle_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n## Now we are visualizing what letters are picked in each guess\nguess <- rep(\"not guessed\", times = 26)\nchar_frequencies <- cbind(char_frequencies, guess)\n\n# this is done in reverse order because some letters are guessed in more than\n# one word and I'd like them marked at the earliest guess.\nletter_vec <-  unlist(strsplit(word_4, split = \"\"))\nprint(letter_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"w\" \"h\" \"a\" \"c\" \"k\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 4\"\n}\n\nletter_vec <-  unlist(strsplit(word_3, split = \"\"))\nprint(letter_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"d\" \"u\" \"m\" \"p\" \"y\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 3\"\n}\n\nletter_vec <-  unlist(strsplit(word_2, split = \"\"))\nprint(letter_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"u\" \"n\" \"t\" \"i\" \"l\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 2\"\n}\n\n\nletter_vec <-  unlist(strsplit(word_1, split = \"\"))\nprint(letter_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"r\" \"o\" \"s\" \"e\"\n```\n:::\n\n```{.r .cell-code}\nfor (i in 1:length(letter_vec)) {\n  position <- letter_vec[i] == char_frequencies$letters\n  char_frequencies$guess[position] <- \"Guess 1\"\n}\n\n\nggplot(char_frequencies, aes(\n  x = fct_rev(fct_reorder(letters,  normalized)),\n  y = normalized,\n  fill = guess)) +\n  geom_col() +\n  ggtitle(\"When Letters are Guessed\") +\n  ylab(\"Normalized Counts\") +\n  xlab(\"Letter\") +\n  theme_classic() +\n  theme(legend.position = c(0.7, 0.8)) +\n  scale_y_continuous(expand = c(0, 0))\n```\n\n::: {.cell-output-display}\n![](current_wordle_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"thumbnail.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n",
    "supporting": [
      "current_wordle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}