---
title: "TidyTuesday: Programming Languages"
description: "TidyTuesday: How to comment in Various Programming Languages"
author:
  - name: Louise E. Sinks
    url: https://lsinks.github.io/
    date: 03-21-2023
categories: [R, TidyTuesday, R-code] # self-defined categories
citation:
  url: https://lsinks.github.io/2023-03-21-tidytuesday-programming-languages 
image: pop-lang-by-token.png
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

This is my first attempt at Tidy Tuesday. The dataset today is about Programming Languages. The sample visualizations are about the comment codes.

```{r}
#| label: loading-libraries
#| warning: false
#| output: false
library(tidytuesdayR)
library(tidyverse)
library(skimr)
library(ggthemes)
library(gt)
library(ggrepel)
```

Load the data first. There has been some cleaning done as outlined on the TidyTuesday github page.

```{r}
#| label: load-data
#| warning: false
#| output: false
# Get the Data

# Read in with tidytuesdayR package 
# This loads the readme and all the datasets for the week of interest

# Either ISO-8601 date or year/week works!

tuesdata <- tidytuesdayR::tt_load('2023-03-21')
tuesdata <- tidytuesdayR::tt_load(2023, week = 12)

languages <- tuesdata$languages

```

First, let's look at how complete the data is. The skimr package produces nice summary information about the variables and their completeness.

```{r}
#| label: check-missingness
skim(languages)
```

The data is pretty incomplete. Only 9 of the 49 variables are fully complete. The line comment token is only 0.110 complete and the has comments is only 0.144 complete. This variable has only 3 false values; it is likely that the missing data is skewed towards false. It is more likely that you'd complete this entry if there were a comment, than if there weren't. It is also possible that the cleaning and prep done to prepare the #TidyTuesday dataset removed some entries which did have FALSE values for the comments.

There are some funny entries that appeared in the skim report, like -2000 as the year the earliest language appeared. It turns out this is Babylonian numerals, so it probably correct. This does show there is a lot more than computer languages in this dataset though.

Looking through the variables, I see there is a "type" in the data dictionary, and it appears that "pl" means programming language. So let's filter for that. (I couldn't find an explanation of this variable on https://pldb.com/) It is used on various pages, but I couldn't find the definition of the types.

Also, rank starts at 0, and I'd like it to start at 1.

```{r}
#| label: cleaning-data
programming_lang <- languages %>%
  filter(type == 'pl') %>%
  select(-starts_with("github"), -starts_with("wikipedia"),
         -description, -creators, -(website:semantic_scholar)) %>%
  mutate(language_rank = language_rank + 1)

skim(programming_lang)
```

This now produces a dataset with 0.143 completeness for features_has_comments. All non-missing entries are TRUE, which again suggests that FALSE is over represented in the missing data.

Let's only look at the programming languages that have data for comments.

```{r}
#| label: only-comments

programming_lang <- programming_lang %>%
  filter(features_has_comments == TRUE)

skim(programming_lang)
```

This subset is still moderately incomplete for information about comments. Only 75% of the data has the type of comment entered (#, //, etc). 86% of the entries are completed for "feature_has_line_comments" which indicates if comments must occupy a single line or if they can be made inline.

```{r}
#| label: most-popular-comment-token

programming_lang %>% filter(is.na(line_comment_token) == FALSE) %>%
  group_by(line_comment_token) %>%
  count(line_comment_token) %>%
  ggplot(aes(fct_rev(fct_reorder(line_comment_token, n)), n)) +
  geom_col(fill = "dodgerblue2") +
  ylab("Count") +
  xlab("Comment Token") +
  ggtitle("Popularity of different comment tokens") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45,  vjust = 0.25, hjust = 0.25))

```

Let's make a nice table of the popular comment types.

```{r}
# | label: table-tokens
programming_lang2 <- programming_lang %>%
  filter(is.na(line_comment_token) == FALSE) %>%
  count(line_comment_token, sort = TRUE) 

programming_lang2 %>%
gt() %>%
tab_header(title = "Most Common Comment Tokens") %>%
cols_label(line_comment_token = "Token", n = "# of Languages that use token")
```

There is a language rank, which measures the popularity of the language based on signals such as number of users and number of jobs. Let's see the average rank of languages for each token.

```{r}
#| label: avg-rank-by-token
programming_lang %>% filter(is.na(line_comment_token) == FALSE) %>%
  group_by(line_comment_token) %>%
  summarize(avg_rank = mean(language_rank)) %>%
  ggplot(aes((fct_reorder(line_comment_token, avg_rank)), avg_rank)) +
  geom_col(fill = "dodgerblue2") +
  ylab("Average Rank of Language") +
  xlab("Comment Token") +
  ggtitle("Average rank of languages using different comment tokens") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45,  vjust = 0.25, hjust = 0.25))
```

The highest (average) ranked token is "\*\>". What languages use this?

```{r}
#| label: highest-avg-rank-token
programming_lang %>% filter(line_comment_token == "*>") %>%
  select(title, language_rank, line_comment_token)
```

Only COBOL does, so the rank of this token isn't diluted by many less popular languages. We can view the distribution of the language ranks for all the tokens.

```{r}
#| label: boxplot-ranks
programming_lang %>%
  filter(is.na(line_comment_token) == FALSE) %>%
  ggplot(aes(line_comment_token, language_rank)) +
  geom_boxplot(color = "dodgerblue2") +
  ggtitle("The rank of languages by token.") +
  xlab("Token") +
  ylab ("Language Rank") +
  theme_classic()
```

Okay, let's clean this up. I'd like it sorted by the median rank. Remeber rank is in reverse numerical order- a low number means a higher rank.

```{r}
#| label: sorted-rank-boxplot
programming_lang %>%
  filter(is.na(line_comment_token) == FALSE) %>%
  ggplot(aes(fct_reorder(line_comment_token, language_rank,
                         .fun = median, .desc = FALSE), language_rank)) +
  geom_boxplot(color = "dodgerblue2") +
  ggtitle("The rank of languages by token") +
  xlab("Token") +
  ylab("Language Rank") +
    theme_classic()

```

Let's see the most popular language for each symbol. There might be a way to do this all at once, but I'm going to pull it out with joins to previous tables I've created.

```{r}
#| label: most-pop-lang-per-token
programming_lang3 <- programming_lang %>%
  filter(is.na(line_comment_token) == FALSE) %>%
  group_by(line_comment_token) %>%
  summarize(highest_rank = min(language_rank)) 

join_madness <- programming_lang2 %>%
  left_join(programming_lang3, by = "line_comment_token") %>% 
  left_join(programming_lang, 
            by = c("highest_rank" = "language_rank",
                   "line_comment_token" = "line_comment_token")) 

join_madness <- join_madness %>%
  select(line_comment_token, n, highest_rank, title, appeared, number_of_users,
         number_of_jobs)
```

So now we have a bunch of summarized data in a single dataframe. Here's a graph. It is saying something, but I'm not sure what. When you can't come up with a concise title, then you probably don't know what you are trying to say...

```{r}
#| label: tokens-pop
join_madness %>%
  ggplot(aes(highest_rank, n, size = log(number_of_users), 
             color = log(number_of_users), label = line_comment_token)) +
  scale_y_log10() +
  scale_x_log10() +
  geom_text_repel(show.legend = FALSE) +
  ggtitle("Popularity of tokens by language rank and usage") +
  xlab("Highest Rank of language using Token") +
  ylab("Number of Languages using token") +
  theme_classic()

```

This is a visualization of the highest ranked languages for each token. The number of users of the dominant language is also encoded in the size and color of the label.  Having it ordered makes it difficult to tell if Java or Python is the most popular/ highest ranked language.

```{r}
#| label: lang-token-graph
join_madness %>%
  ggplot(aes(fct_rev(fct_reorder(line_comment_token, highest_rank)), n , size = log(number_of_users), color = log(number_of_users), label = title)) +
 # geom_point() +
  scale_y_log10() +
  geom_text_repel(show.legend = FALSE) +
   ggtitle("The Most Popular Language for Each Comment Token") +
  xlab("Token") +
  ylab("Number of languages using token") +
  theme_classic()
```
Here is the same graph just ordered "alphabetically" by token.

```{r}
#| label: lang-token-graph-undordered
join_madness %>%
  ggplot(aes(line_comment_token, n, size = log(number_of_users), 
             color = log(number_of_users), label = title)) +
 # geom_point() +
  scale_y_log10() +
  geom_text_repel(show.legend = FALSE) +
   ggtitle("The Most Popular Language for Each Comment Token") +
  xlab("Token") +
  ylab("Number of languages using token") +
  theme_classic()
```
