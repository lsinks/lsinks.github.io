---
title: "TidyTuesday Week 12: Programming Languages Revisited"
description: "TidyTuesday: Polishing "
author:
  - name: Louise E. Sinks
    url: https://lsinks.github.io/
    date: 03-22-2023
categories: [R, TidyTuesday, R-code, Code-Along, Data-Viz, skimr] # self-defined categories
citation:
  url: https://lsinks.github.io/ 
image: pop-lang-by-token.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

This week, I participated in my first #TidyTuesday challenge. My goal was to get something out on the day of the challenge rather than perfection. I did notice that the skimr output wasn't formatted nicely on the webpage. Today, I'm going to delve into the skimr documentation and make a nicer version of the output. Secondly, I'm going to fix up my final figure, which is the one I shared on social media.

## Skimr

Skimr is a package that provides statistical summaries of the variables in your dataframe. It also provides information about the missingness of each variable.

```{r}
#| label: loading-libraries
#| warning: false
#| output: false
library(tidytuesdayR)
library(tidyverse)
library(skimr)
library(ggthemes)
library(gt)
library(ggrepel)
library(visdat) # visualizing missing data in dataframe
```

```{r}
#| label: load-data
#| warning: false
#| output: false
# Get the Data

# Read in with tidytuesdayR package 
# This loads the readme and all the datasets for the week of interest

# Either ISO-8601 date or year/week works!

#tuesdata <- tidytuesdayR::tt_load('2023-03-21')
tuesdata <- tidytuesdayR::tt_load(2023, week = 12)

languages <- tuesdata$languages
```

My main objection is that the numerical summary is too wide and has a scroll bar. I especially want the histogram to be viewable on the first screen. I also don't particularly care about all the quartile information; min and max are enough. If I want to delve more into the stats of a variable, I will do it another way, not with skimr.

First, quarto lets you expand the output of the code chunk to fill the page via the option "#\| column: page", so I'll do that. Next, I'll create a custom skim function that drops the p25, p50, and p75 output from the summary of the numerical variables.

```{r}
#| label: custom-skim-functions
#| column: page

my_skim <- skim_with(numeric = sfl(p25 = NULL, p50 = NULL, p75 = NULL)) 

my_skim(languages)
```

This output is much nicer. It is a bit "wall of text" though. I wouldn't recommend using this in reports, but it is a useful tool when you are doing your initial analysis of a dataset. (As a side note, I have noticed skimr doesn't work well on Kaggle. It performs as expected if you are in interactive mode, but when you try to save the notebook or run non-interactively, it fails.)

If for some reason you did need to include output/ visualizations about missingness in a report, I'd probably recreate visualizations or tables by class of variable, especially if you have a large number of variables, like you do here.

either use skimr and filter the results by variable type and then style the table using the gt package or I'd use the visdat package to make some figures about missingness. The figure is very crow

```{r}
#| column: page
languages_numeric <- languages %>%
  select_if(is.numeric)

lang_numeric_skim <- my_skim(languages_numeric)

lang_numeric_skim %>%
gt() %>%
tab_header(title = "Summary of Numerical Variables in Languages") 


```

the visdat package makes nice figures.

```{r}
#| column: page
vis_miss(languages_numeric) +
ggtitle("Missing Data in the Languages Dataset") 
```

## Making a nicer figure

```{r}
joined <- read_csv("processed_lang.csv" , show_col_types = FALSE)
```

Now the original figure:

```{r}
#| label: lang-token-graph-undordered
joined %>%
  ggplot(aes(line_comment_token, n, size = log(number_of_users), 
             color = log(number_of_users), label = title)) +
 # geom_point() +
  scale_y_log10() +
  geom_text_repel(show.legend = FALSE) +
   ggtitle("The Most Popular Language for Each Comment Token") +
  xlab("Token") +
  ylab("Number of languages using token") +
  theme_classic()
```

T

```{r}
joined %>%
  ggplot(aes(line_comment_token, n, size = log(number_of_users), 
             color = log(number_of_users), label = title)) +
 # geom_point() +
  scale_y_log10() +
  geom_text_repel(show.legend = FALSE) +
  
     ggtitle('\u00a3') +
  #theme(text = element_text(family = "font1")) +
  #theme(text= element_text(family = "Cambria Math")) +
  xlab("Token") +
  ylab("Number of languages using token") +
  theme_classic(base_size = 14)
```
